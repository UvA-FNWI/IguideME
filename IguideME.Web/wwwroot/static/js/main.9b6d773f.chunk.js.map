{"version":3,"sources":["serviceWorker.ts","api/controller.ts","api/consent.ts","store/actions/consent.ts","components/Loading/index.tsx","components/Consent/index.tsx","api/tile.ts","store/actions/helpers/peer.ts","store/actions/helpers/tile.ts","store/default/reducers.ts","store/index.ts","utils/configureStore.ts","api/prediction.tsx","store/actions/tiles.ts","components/Tile/GradeDistribution/index.tsx","utils/helpers.ts","components/Tile/StatusIndication/index.tsx","store/actions/view.ts","components/Tile/index.tsx","api/admin.ts","views/TileList/index.tsx","store/actions/adminView.ts","views/TileDetail/GraphView/index.tsx","views/TileDetail/ComponentsView/index.tsx","views/TileDetail/OutcomeView/index.tsx","views/TileDetail/index.tsx","common/App/index.tsx","common/Admin/Section/index.tsx","api/perusall.ts","api/practiceSessions.ts","api/attendance.ts","common/Admin/index.tsx","app.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","Controller","this","client","axios","create","baseURL","ConsentController","get","granted","post","setConsent","type","payload","Loading","style","textAlign","Component","Consent","state","acceptedTerms","dispatch","props","id","display","padding","width","href","value","onChange","setState","prevState","gutter","marginTop","md","xs","onClick","then","disabled","block","connect","consent","TileController","makePeerComparison","Maximum","minimum","Minimum","maximum","average","Average","constructDiscussionTile","response","data","rank","name","visible","progress","length","peer_comparison","entry_view_type","entries","map","discussion","title","hide_action_button","grade","items","metadata","message","constructQuizzesTile","submissions","quizzes","peer_comp","questions","answers","x","y","flat","Math","round","filter","submission","score","average_grade","reduce","sum","current","quiz","index","i","status","constructPerusallTile","perusall","keys","Object","key","idx","extra_wide","JSON","parse","entry","constructPracticeSessionsTile","practice_sessions","constructAttendanceTile","attendance","aanwezig","constructGradesTile","grades","row","parseFloat","constructPredictionTile","defaultReducer","model","initialState","action","error","rootReducer","combineReducers","routing","routerReducer","tiles","view","adminView","persistConfig","storage","whitelist","persistedReducer","persistReducer","store","createStore","applyMiddleware","thunk","promise","createLogger","persistor","persistStore","PredictionController","exams","find","tile","deeltoets_1","deeltoets_2","deeltoets_3","perusall_1","perusall_2","perusall_3","oefentoets_1","oefentoets_2","quiz_1","quiz_2","quiz_3","quiz_4","fetchTiles","a","fetchQuizzes","push","fetchDiscussions","fetchPerusall","fetchPracticeSessions","fetchAttendance","fetchSubmissions","predict","GradeDistribution","min","max","avg","className","left","PureComponent","isGradeSufficient","StatusIndication","indicateByAverage","prefix","LikeTwoTone","twoToneColor","WarningTwoTone","suffix","indicateByPeerComparison","peer_average","statusFromAverage","peerAverage","setView","Tile","percent","isNaN","plain","AdminController","TileList","wrapper","updateTileSize","wrapperWidth","getBoundingClientRect","tileWidth","colSize","forceUpdate","React","createRef","isAdmin","fetchIsAdmin","addEventListener","prevProps","snapshot","stringify","removeEventListener","size","ref","boxSizing","marginBottom","description","showIcon","flex","Title","level","sort","b","justify","GraphView","Fragment","labels","Array","from","datasets","label","backgroundColor","borderColor","fill","options","legend","maintainAspectRatio","spanGaps","elements","line","tension","plugins","filler","propagate","scales","xAxes","ticks","autoSkip","yAxes","suggestedMin","suggestedMax","ComponentsView","isCompleted","e","renderProgress","completed","renderIemStatus","renderActionButton","renderMetaData","String","dangerouslySetInnerHTML","__html","sm","lg","item","referer","OutcomeView","createObjectives","getState","achieved","exam2","exam3","obj","Item","dot","CheckCircleOutlined","color","TileDetail","renderGraph","last_entry","y_hat","renderComponents","renderDetailView","placement","shape","icon","LeftOutlined","App","Section","collection","that","orientation","required_fields","f","target","placeholder","cssClass","onFileLoaded","sample","includes","some","Modal","content","doUpload","success","onError","parserOptions","header","dynamicTyping","skipEmptyLines","transformHeader","toLowerCase","replace","inputId","doFetch","groups","Set","groupID","json","forEach","group","info","maxHeight","overflow","collapsed","enableClipboard","displayObjectSize","displayDataTypes","src","danger","confirm","ExclamationCircleOutlined","okText","okType","cancelText","onOk","PerusallController","PracticeSessionsController","AttendanceController","Admin","handlePracticeSessionsUpload","uploadData","handlePracticeSessionsFetch","getAll","handlePerusallUpload","studentnaam","handlePerusallFetch","handleAttendanceUpload","handleAttendanceFetch","setup","IguideME","fetchConsent","catch","path","ReactDOM","render","StrictMode","loading","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.9b6d773f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\n\nexport default class Controller {\n  protected static client: any;\n\n  static setup(): void {\n    this.client = axios.create({ baseURL: `https://localhost:5001/` });\n  }\n}\n","import axios from \"axios\";\nimport Controller from \"./controller\";\nimport {IBackendResponse} from \"../models/IBackendResponse\";\n\nexport default class ConsentController extends Controller {\n\n  static fetchConsent(): IBackendResponse {\n    return this.client.get(\n      `consent`\n    );\n  }\n\n  static setConsent(granted: boolean | null): IBackendResponse {\n    return this.client.post(\n      `consent`,\n      { granted: granted === null ? -1 : (granted ? 1 : 0) }\n    );\n  }\n}","export const setConsent = (granted: boolean | null) => {\n\n  return {\n    type: `SET_CONSENT_SUCCESS`,\n    payload: { granted }\n  };\n}","import React, {Component} from \"react\";\n\nexport default class Loading extends Component {\n\n  render(): React.ReactNode {\n    return (\n      <div style={{textAlign: 'center'}}>\n        <h1>Welcome to IguideME</h1>\n      </div>\n    )\n  }\n}","import React, { Component } from \"react\";\nimport {Button, Checkbox, Col, Row} from \"antd\";\nimport {IState} from \"./types\";\nimport FadeIn from \"react-fade-in\";\nimport {RootState} from \"../../store\";\nimport {connect} from \"react-redux\";\nimport {setConsent} from \"../../store/actions/consent\";\nimport ConsentController from \"../../api/consent\";\n\n\nclass Consent extends Component<any, IState> {\n\n  state = {\n    acceptedTerms: false\n  }\n\n  render(): React.ReactNode {\n    const { dispatch } = this.props;\n    return (\n      <div\n        id={\"consent\"}\n        style={{\n          display: 'block',\n          padding: '10px',\n          width: '100vw',\n        }}\n      >\n        <FadeIn>\n          <div style={{textAlign: 'center'}}>\n            <h1>IguideME</h1>\n            <h2>INFORMED CONSENT</h2>\n          </div>\n        </FadeIn>\n        <p>\n          Dear participant,<br />\n          We ask for your cooperation in an evaluation study into educational improvement. In this document, the so-called \"informed consent\", we explain this study and you can indicate whether you want to cooperate. Read the text below carefully. Then click on the informed consent link to sign the document (with yes or no, that choice is free).\n        </p>\n\n        <h3>Goal of the research</h3>\n        <p>\n          The goal of this educational research is to study the effects of the feedback tool “IguideME” and activating learning tools (e.g. Perusall) on the learning process.<br />\n          The results of this research can be used to facilitate your learning process, to improve the design of this and other courses, and for scientific publications.\n        </p>\n\n        <h3>Research description</h3>\n        <p>\n          To investigate the effects of using IguideME, personal data (name and student ID) and learning activity data will be collected. Based on these data, you will receive personal feedback via the IguideME dashboard in Canvas. To investigate the effects of activating learning tools, the quality of assignments will be assessed and the results of a short questionnaire that scores motivation and learning behavior will be compared between the beginning and at the end of the course. For presentations purposes, all data will be anonymized.\n        </p>\n\n        <h3>Voluntariness</h3>\n        <p>\n          The participation in this research is voluntary. In the case that you decline to participate or stop your participation the data that you have generated will not be used in the research. You are free to stop your participation in this research without specifying a reason by informing dr. Erwin van Vliet.\n        </p>\n\n        <h3>Insurance</h3>\n        <p>\n          This research brings no risks for your health and safety and in this case the regular liability insurance of the University of Amsterdam is valid.\n        </p>\n\n        <h3>Additional Information</h3>\n        <p>\n          In case of any questions about this research please contact: dr. Erwin van Vliet (projectleader IGuideME), phone <a href={\"tel:0205257630\"}>020-525 7630</a>, e-mail <a href={\"mailto:e.a.vanvliet@uva.nl\"}>e.a.vanvliet@uva.nl</a>\n        </p>\n\n        <h2>CONSENT FORM</h2>\n        <p>\n          Here you will be asked to sign the Informed consent.<br />\n\n          <ul>\n            <li>\n              By choosing <i>\"Yes\"</i> in this form, you declare that you have read the document entitled “informed consent IguideME”, understood it, and confirm that you agree with the procedure as described.<br />\n            </li>\n            <li>\n              By choosing <i>\"No\"</i> in the form, you declare that you have read read the document entitled “informed consent IguideME”, understood it, and confirm that you do not want to participate in this study.\n            </li>\n          </ul>\n        </p>\n\n        <Checkbox\n          value={this.state.acceptedTerms}\n          onChange={() => this.setState((prevState: IState) => ({acceptedTerms: !prevState.acceptedTerms}))}\n        >\n          “I declare that I have read the information and understood it. I authorize the participation in this educational research and the use of my data in it. I keep my right to stop this authorization without giving an explicit reason to stop and to stop my participation in this experiment at any moment.”\n        </Checkbox>\n\n        <Row gutter={[6, 6]} style={{marginTop: 20}}>\n          <Col md={12} xs={24}>\n            <Button\n              onClick={() => ConsentController.setConsent(true).then(() => dispatch(setConsent(true)))}\n              disabled={!this.state.acceptedTerms}\n              type=\"primary\"\n              block\n            >\n              Yes, I give consent\n            </Button>\n          </Col>\n          <Col md={12} xs={24}>\n            <a href={\"#\"}>\n              <Button\n                onClick={() => ConsentController.setConsent(false).then(() => dispatch(setConsent(false)))}\n                block\n              >\n                No, I do not give consent\n              </Button>\n            </a>\n          </Col>\n        </Row>\n      </div>\n    )\n  }\n}\n\nexport default connect((state: RootState) => ({\n  consent: state.consent\n}))(Consent);","import Controller from \"./controller\";\nimport {IBackendResponse} from \"../models/IBackendResponse\";\n\nexport default class TileController extends Controller {\n\n  static fetchDiscussions(): IBackendResponse {\n    return this.client.get(\n      `discussions`,\n      //tokenHeader()\n    );\n  }\n\n  static fetchQuizzes(): IBackendResponse {\n    return this.client.get(\n      `quizzes`,\n      //tokenHeader()\n    );\n  }\n\n  static fetchSubmissions(): IBackendResponse {\n    return this.client.get(\n      `submissions`\n    )\n  }\n\n  static fetchPerusall(): IBackendResponse {\n    return this.client.get(\n      `perusall`,\n    );\n  }\n\n  static fetchAttendance(): IBackendResponse {\n    return this.client.get(\n      `attendance`,\n    );\n  }\n\n  static fetchPracticeSessions(): IBackendResponse {\n    return this.client.get(\n      `practice-sessions`,\n    );\n  }\n}","export const makePeerComparison = ({ Maximum, Minimum, Average }: any) => {\n\n  return { minimum: Minimum, maximum: Maximum, average: Average };\n}","import {IBackendResponse} from \"../../../models/IBackendResponse\";\nimport {ITile} from \"../../../models/ITile\";\nimport {makePeerComparison} from \"./peer\";\nimport PredictionController from \"../../../api/prediction\";\n\nexport const constructDiscussionTile = (response: IBackendResponse) => {\n  const { data } = response;\n\n  const tile: ITile = {\n    type: \"activity\",\n    rank: 5,\n    name: \"Send in questions\",\n    visible: true,\n    progress: data.length,\n    peer_comparison: {\n      minimum: 0,\n      maximum: data.length,\n      average: 2\n    },\n    entry_view_type: \"components\",\n    entries: data.map((discussion: any) => ({\n      name: discussion.title,\n      hide_action_button: true,\n      grade: null,\n      items: [],\n      metadata: discussion.message\n    }))\n  }\n  return tile;\n}\n\n\nexport const constructQuizzesTile = (response: IBackendResponse) => {\n  const { submissions, quizzes, questions, peer_comp } = response.data;\n\n  const answers = (response.data.questions || []).map((x: any) => x.map((y: any) => y.length === 0 ? null : y).flat());\n\n  const tile: ITile = {\n    rank: 1,\n    type: \"activity\",\n    name: \"Quizzes\",\n    visible: true,\n    progress: Math.round((submissions.filter((submission: any) => submission.score !== null).length / quizzes.length) * 100),\n    average_grade: submissions.filter((submission: any) => submission.score !== null)\n      .map((submission: any) => submission.score).reduce((sum: number, current: number) => sum + current, 0 ) /\n      submissions.filter((submission: any) => submission.score !== null).length,\n    peer_comparison: makePeerComparison(peer_comp),\n    entry_view_type: \"components\",\n    entries: quizzes.map((quiz: any, index: number) => ({\n      name: quiz.title,\n      grade: submissions[index] ? submissions[index].score : null,\n      items: (answers[index] || []).map((x: any, i: number) => ({\n          name: `Question #${i + 1}`,\n          status: (submissions[index] !== null) ?\n            (!x ? \"failed\" : \"passed\") :\n            \"unstarted\"\n        })\n      )\n    }))\n  }\n  return tile;\n}\n\nexport const constructPerusallTile = (response: IBackendResponse) => {\n  const perusall = response.data.payload;\n  const keys = Object.keys(perusall);\n  const TOTAL_PERUSALL_ASSIGNMENTS = 3;\n\n  const tile: ITile = {\n    rank: 3,\n    type: \"activity\",\n    name: \"Perusall Assignments\",\n    visible: true,\n    progress: Math.round((keys.length / TOTAL_PERUSALL_ASSIGNMENTS) * 100),\n    average_grade: (Math.round((keys.map((key: string) => perusall[key].grade).reduce((sum: number, current: number) => sum + current, 0 ) /\n      keys.length) * 10) / 10),\n    peer_comparison: makePeerComparison(response.data.peer_comp),\n    entry_view_type: \"components\",\n    entries: keys.map((key: string, idx) => {\n      return {\n        extra_wide: true,\n        hide_action_button: true,\n        name: `Perusall assignment ${idx + 1}`,\n        grade: perusall[key].grade || null,\n        items: [],\n        metadata: JSON.parse(perusall[key].entry || '{}')\n      }\n    })\n  }\n  return tile;\n}\n\nexport const constructPracticeSessionsTile = (response: IBackendResponse) => {\n  const practice_sessions = response.data.payload;\n  const keys = Object.keys(practice_sessions);\n  const TOTAL_PRACTICE_SESSIONS = 5;\n\n  const tile: ITile = {\n    rank: 2,\n    type: \"activity\",\n    name: \"Practice Sessions\",\n    visible: true,\n    progress: Math.round((keys.length / TOTAL_PRACTICE_SESSIONS) * 100),\n    average_grade: Math.round((keys.map((key: string) => practice_sessions[key].grade).reduce((sum: number, current: number) => sum + current, 0 ) /\n      keys.length) * 10) / 10,\n    peer_comparison: makePeerComparison(response.data.peer_comp),\n    entry_view_type: \"components\",\n    entries: keys.map((key: string, idx) => {\n      return {\n        extra_wide: true,\n        hide_action_button: true,\n        name: `Practice Session ${idx + 1}`,\n        grade: practice_sessions[key].grade,\n        items: [],\n      }\n    })\n  }\n  return tile;\n}\n\nexport const constructAttendanceTile = (response: IBackendResponse) => {\n  const attendance = response.data.payload;\n  const keys = Object.keys(attendance);\n  const TOTAL_LESSONS = 25;\n\n  const tile: ITile = {\n    rank: 6,\n    type: \"activity\",\n    name: \"Lecture Attendance\",\n    visible: true,\n    progress: Math.round((attendance.filter((x: any) => x.aanwezig === \"ja\").length / TOTAL_LESSONS) * 100),\n    peer_comparison: makePeerComparison(response.data.peer_comp),\n    entry_view_type: \"components\",\n    entries: keys.map((key: string, idx) => {\n      return {\n        grade: null,\n        hide_action_button: true,\n        name: `${key}`,\n        items: [],\n        metadata: {\n          'Aanwezig': attendance[key].aanwezig\n        }\n      }\n    })\n  }\n  return tile;\n}\n\nexport const constructGradesTile = (response: IBackendResponse) => {\n  const grades = response.data.payload;\n  const TOTAL_GRADES = 3;\n\n  const tile: ITile = {\n    rank: 1,\n    type: \"grade\",\n    name: \"Exam grades\",\n    visible: true,\n    average_grade: Math.round((grades.map((row: any) => parseFloat(row.grade)).reduce((sum: number, current: number) => sum + current, 0 ) /\n      grades.length) * 10) / 10,\n    progress: Math.round((grades.length / TOTAL_GRADES) * 100),\n    peer_comparison: makePeerComparison(response.data.peer_comp),\n    entry_view_type: \"components\",\n    entries: grades.map((row: any) => {\n      return {\n        grade: row.grade,\n        hide_action_button: true,\n        name: row.name,\n        items: [],\n      }\n    })\n  }\n  return tile;\n}\n\nexport const constructLearningOutcomeTile = (): ITile => {\n  return {\n    rank: 2,\n    type: \"outcome\",\n    name: \"Learning Outcome\",\n    visible: true,\n    progress: 0,\n    peer_comparison: {\n      minimum: 0,\n      maximum: 0,\n      average: 0\n    },\n    entry_view_type: \"components\",\n    entries: []\n  }\n}\n\nexport const constructPredictionTile = (response: IBackendResponse): ITile => {\n  const {data} = response;\n\n  return {\n    rank: 2,\n    type: \"grade\",\n    name: \"Prediction\",\n    visible: true,\n    average_grade: (data && data.length > 0) ? data[data.length - 1]['y_hat'] : '??',\n    progress: null,\n    peer_comparison: {\n      minimum: 0,\n      maximum: 0,\n      average: 0\n    },\n    entry_view_type: \"graph\",\n    entries: [\n      {\n        name: \"Predicted grade\",\n        grade: 0,\n        items: [],\n        metadata: data\n      }]\n  }\n}\n\n","type IAction = {\n  type: string;\n  payload?: any;\n  error?: any;\n}\n\nexport default function defaultReducer(model: string, initialState: any) {\n  return function(state = initialState, action: IAction) {\n    switch(action.type) {\n      // set fetching\n      case `SET_${model}_PENDING`:\n        return null;\n\n      // return payload\n      case `SET_${model}_SUCCESS`:\n        return action.payload;\n\n      // alternative to initializing the action, remove payload from store\n      case `UNSET_${model}_SUCCESS`:\n        return null;\n\n      // whoopsie, the mistake is probably on you\n      case `SET_${model}_ERROR`:\n        return action.error || \"ERROR\";\n\n      default: break;\n    }\n\n    return state;\n  }\n}\n","import {combineReducers} from \"redux\";\nimport { routerReducer } from 'react-router-redux';\nimport defaultReducer from \"./default/reducers\";\n\nconst rootReducer = combineReducers({\n  // react\n  routing: routerReducer,\n  tiles: defaultReducer('TILES', []),\n  view: defaultReducer('VIEW', null),\n  consent: defaultReducer('CONSENT', null),\n  adminView: defaultReducer('ADMIN_VIEW', false),\n});\n\nexport type RootState = ReturnType<typeof rootReducer>\nexport default rootReducer;\n","import thunk from 'redux-thunk';\nimport promise from 'redux-promise';\nimport {createLogger} from 'redux-logger';\nimport {applyMiddleware, createStore} from \"redux\";\nimport { persistStore, persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\nimport rootReducer from \"../store\";\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n  whitelist: ['activeLabel', 'projects']\n}\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\n\nexport const store = createStore(\n  persistedReducer,\n  applyMiddleware(thunk, promise, createLogger())\n);\n\nexport const persistor = persistStore(store);\n","import axios, {AxiosResponse} from \"axios\";\nimport {ITile} from \"../models/ITile\";\n\nexport default class PredictionController {\n\n  static predict(tiles: ITile[]): Promise<AxiosResponse> {\n\n    const exams: ITile | undefined = tiles.find((tile: ITile) => tile.name === \"Exam grades\");\n    const deeltoets_1 = (exams && exams.entries.length > 0) ? exams.entries[0].grade : null;\n    const deeltoets_2 = (exams && exams.entries.length > 1) ? exams.entries[1].grade : null;\n    const deeltoets_3 = (exams && exams.entries.length > 2) ? exams.entries[2].grade : null;\n\n    const perusall: ITile | undefined = tiles.find((tile: ITile) => tile.name === \"Perusall Assignments\");\n    const perusall_1 = (perusall && perusall.entries.length > 0) ? perusall.entries[0].grade : null;\n    const perusall_2 = (perusall && perusall.entries.length > 1) ? perusall.entries[1].grade : null;\n    const perusall_3 = (perusall && perusall.entries.length > 2) ? perusall.entries[2].grade : null;\n\n    const practice_sessions: ITile | undefined = tiles.find((tile: ITile) => tile.name === \"Practice Sessions\");\n    const oefentoets_1 = (practice_sessions && practice_sessions.entries.length > 0) ?\n      practice_sessions.entries[0].grade : null;\n    const oefentoets_2 = (practice_sessions && practice_sessions.entries.length > 1) ?\n      practice_sessions.entries[1].grade : null;\n\n    const quizzes: ITile | undefined = tiles.find((tile: ITile) => tile.name === \"Quizzes\");\n    const quiz_1 = (quizzes && quizzes.entries.length > 0) ? quizzes.entries[0].grade : null;\n    const quiz_2 = (quizzes && quizzes.entries.length > 1) ? quizzes.entries[1].grade : null;\n    const quiz_3 = (quizzes && quizzes.entries.length > 2) ? quizzes.entries[2].grade : null;\n    const quiz_4 = (quizzes && quizzes.entries.length > 3) ? quizzes.entries[3].grade : null;\n\n    return axios.post(\n      `http://${window.location.hostname}:8000/`,\n      {\n        deeltoets_1, deeltoets_2, deeltoets_3,\n        perusall_1, perusall_2, perusall_3,\n        oefentoets_1, oefentoets_2,\n        quiz_1, quiz_2, quiz_3, quiz_4\n      }\n    );\n  }\n}","import {ITile} from \"../../models/ITile\";\nimport TileController from \"../../api/tile\";\nimport {\n  constructAttendanceTile,\n  constructDiscussionTile,\n  constructGradesTile,\n  constructLearningOutcomeTile,\n  constructPerusallTile,\n  constructPracticeSessionsTile, constructPredictionTile,\n  constructQuizzesTile\n} from \"./helpers/tile\";\nimport {store} from \"../../utils/configureStore\";\nimport PredictionController from \"../../api/prediction\";\n\nexport const fetchTiles = async () => {\n  const response: ITile[] = [];\n\n  store.dispatch({\n    type: `SET_TILES_SUCCESS`,\n    payload: null\n  });\n\n  response.push(constructQuizzesTile(await TileController.fetchQuizzes()));\n  response.push(constructDiscussionTile(await TileController.fetchDiscussions()));\n  response.push(constructPerusallTile(await TileController.fetchPerusall()));\n  response.push(constructPracticeSessionsTile(await TileController.fetchPracticeSessions()));\n  response.push(constructAttendanceTile(await TileController.fetchAttendance()));\n  response.push(constructGradesTile(await TileController.fetchSubmissions()));\n  response.push(constructLearningOutcomeTile());\n  response.push(constructPredictionTile(await PredictionController.predict(response)));\n\n  return {\n    type: `SET_TILES_SUCCESS`,\n    payload: response\n  }\n};\n","import React, { PureComponent } from \"react\";\nimport \"./grade-distribution.scss\";\n\ntype IProps = {\n  min: number;\n  max: number;\n  avg: number;\n}\n\nexport default class GradeDistribution extends PureComponent<IProps> {\n  render() {\n    const { min, max, avg } = this.props;\n    return (\n      <div className={\"grade-distribution\"}>\n        <div className={\"min\"}>\n          <small>min</small><span>{ min }</span>\n        </div>\n        <div className={\"distribution\"}>\n          <small>mean</small>\n          <div className={\"avg\"}><span>{avg}</span></div>\n          <div className={\"sep\"} style={{left: `${((avg - min) / (max - min)) * 100}%`}} />\n        </div>\n        <div className={\"max\"}>\n          <small>max</small><span>{ max }</span>\n        </div>\n      </div>\n    );\n  }\n}","export const isGradeSufficient = (grade: number ): boolean => {\n  return grade >= 5.5;\n}","import React, { PureComponent } from \"react\";\nimport {isGradeSufficient} from \"../../../utils/helpers\";\nimport { LikeTwoTone, WarningTwoTone } from '@ant-design/icons';\nimport {Statistic, Tooltip} from \"antd\";\n\ntype IProps = {\n  statusFromAverage: boolean;\n  average?: number | null;\n  progress?: number | null;\n  peerAverage?: number;\n}\n\nconst THUMBS_UP_DESCRIPTION = \"You're doing great!\";\nconst THUMBS_DOWN_DESCRIPTION = \"You're behind the desired average\";\n\nexport default class StatusIndication extends PureComponent<IProps> {\n  /**\n   * If `statusFromAverage` is set to true then the `average` property has to be set.\n   * The status will be sufficient if the average is above or equal to 5.5. If set to\n   * false then the sufficiency will be computed by asserting that the progress of the\n   * user is beyond the group average.\n   */\n\n  indicateByAverage = (average: number) => {\n    return (\n      <Statistic\n        prefix={\n          isGradeSufficient(average) ?\n            <Tooltip title={THUMBS_UP_DESCRIPTION}>\n              <LikeTwoTone twoToneColor={\"#52c41a\"}/>\n            </Tooltip> :\n            <Tooltip title={THUMBS_DOWN_DESCRIPTION}>\n              <WarningTwoTone twoToneColor={\"rgb(255, 78, 78)\"}/>\n            </Tooltip>\n        }\n        value={average}\n        suffix=\"/ 10\"\n      />\n    )\n  }\n\n  indicateByPeerComparison = (progress: number, peer_average: number) => {\n    if (progress >= peer_average) {\n      return (\n        <h1>\n          <Tooltip title={THUMBS_UP_DESCRIPTION}>\n            <LikeTwoTone twoToneColor={\"#52c41a\"}/>\n          </Tooltip>\n        </h1>\n      );\n    }\n\n    return (\n      <h1>\n        <Tooltip title={THUMBS_DOWN_DESCRIPTION}>\n          <WarningTwoTone twoToneColor={\"rgb(255, 78, 78)\"}/>\n        </Tooltip>\n      </h1>\n    );\n  }\n\n  render(): React.ReactNode {\n    const { statusFromAverage, average, progress, peerAverage } = this.props;\n\n    return (\n      <div>\n        <div className={\"statistic\"}>\n          { statusFromAverage ?\n            this.indicateByAverage(average!) :\n            this.indicateByPeerComparison(progress!, peerAverage!)\n          }\n        </div>\n      </div>\n    )\n  }\n}","import {ITile} from \"../../models/ITile\";\n\nexport const setView = async (view: ITile | null) => {\n  return {\n    type: `SET_VIEW_SUCCESS`,\n    payload: view\n  }\n};\n","import React, { PureComponent } from \"react\";\nimport { Divider, Progress } from \"antd\";\nimport GradeDistribution from \"./GradeDistribution\";\nimport FadeIn from 'react-fade-in';\nimport \"./tile.scss\";\nimport {isGradeSufficient} from \"../../utils/helpers\";\nimport {ITile} from \"../../models/ITile\";\nimport StatusIndication from \"./StatusIndication\";\nimport {store} from \"../../utils/configureStore\";\nimport {setView} from \"../../store/actions/view\";\n\ntype IProps = {\n  tile: ITile,\n  width: number,\n}\n\nexport default class Tile extends PureComponent<IProps> {\n\n  progress = () => {\n    const { tile: { progress } } = this.props;\n\n    switch(progress) {\n      case 0:\n        return (<Progress percent={0} status=\"exception\" />);\n      case 100:\n        return (<Progress percent={100} />);\n      case null:\n        return null;\n      default:\n        return (<Progress percent={progress} />);\n    }\n  }\n\n  render() {\n    const { width, tile: { average_grade, name, peer_comparison, progress, visible } } = this.props;\n\n    if (!visible) return null;\n\n    return (\n      <div\n        style={{ width: `${width}px` }}\n        className={\"tile\"}\n        onClick={async () => {\n          store.dispatch(await setView(this.props.tile));\n        }}\n      >\n        <FadeIn>\n          <div className={`inner ${isGradeSufficient(average_grade || 0) ? 'sufficient' : 'insufficient'}`}>\n            <div className={\"title\"}>\n              <h2>{ name }</h2>\n            </div>\n\n            { progress !== null ?\n              <div>\n                {this.progress()}\n\t\t\t\t\t\t\t</div> : null\n            }\n\n            <StatusIndication\n              statusFromAverage={!isNaN(average_grade as number)}\n              average={average_grade !== null ? average_grade : null}\n              progress={progress || null}\n              peerAverage={peer_comparison.average}\n            />\n\n            <div className={\"peer\"}>\n              <Divider plain>Peer comparison</Divider>\n              <GradeDistribution\n                min={peer_comparison.minimum}\n                max={peer_comparison.maximum}\n                avg={peer_comparison.average}\n              />\n            </div>\n          </div>\n        </FadeIn>\n      </div>\n    );\n  }\n}","import Controller from \"./controller\";\nimport {IBackendResponse} from \"../models/IBackendResponse\";\n\nexport default class AdminController extends Controller {\n\n  static fetchIsAdmin(): IBackendResponse {\n    return this.client.get(\n      `is-admin`\n    );\n  }\n}","import React, { PureComponent } from \"react\";\nimport {fetchTiles} from \"../../store/actions/tiles\";\nimport {Alert, Button, Col, Row, Spin, Typography} from \"antd\";\nimport Tile from \"../../components/Tile\";\nimport {RootState} from \"../../store\";\nimport {ITile} from \"../../models/ITile\";\nimport {connect} from \"react-redux\";\nimport AdminController from \"../../api/admin\";\nimport {IBackendResponse} from \"../../models/IBackendResponse\";\nimport {setAdminView} from \"../../store/actions/adminView\";\nimport {STATES} from \"../../api/testStates\";\nimport \"./style.scss\";\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    tiles: state.tiles,\n  };\n}\n\ntype IProps = {\n  dispatch: (e: any) => {};\n  tiles: ITile[] | null;\n}\n\ntype IState = {\n  isAdmin: boolean;\n  tileWidth: number;\n  colSize: string[];\n}\n\nclass TileList extends PureComponent<IProps, IState> {\n  wrapper: any;\n\n  constructor(props: IProps) {\n    super(props);\n    this.wrapper = React.createRef();\n\n    this.state = {\n      isAdmin: false,\n      tileWidth: 0,\n      colSize: ['0px', '0px']\n    };\n  }\n\n  componentDidMount(): void {\n    //fetchTiles\n    const { dispatch } = this.props;\n    dispatch(fetchTiles());\n\n    AdminController.fetchIsAdmin().then((response: IBackendResponse) => {\n      this.setState({isAdmin: response.data});\n    })\n    window.addEventListener('resize', this.updateTileSize);\n  }\n\n  componentDidUpdate(prevProps: Readonly<IProps>, prevState: Readonly<IState>, snapshot?: any): void {\n    if (JSON.stringify(prevProps.tiles) !== JSON.stringify(this.props.tiles)) {\n      this.updateTileSize();\n    }\n  }\n\n  componentWillUnmount(): void {\n    window.removeEventListener('resize', this.updateTileSize);\n  }\n\n  updateTileSize = () => {\n    try {\n      const offset = 50;\n      const wrapperWidth = this.wrapper.current.getBoundingClientRect().width;\n      if (wrapperWidth >= 990) {\n        this.setState({\n          tileWidth: ((wrapperWidth - offset) / 5), colSize: ['60%', '40%']\n        });\n      } else if (wrapperWidth >= 760) {\n        this.setState({\n          tileWidth: (((wrapperWidth - offset) - 1) / 3), colSize: [`${(100 / 3) * 2}%`, `${100 / 3}%`]\n        });\n      } else {\n        this.setState({\n          tileWidth: (((wrapperWidth - offset) - 2) / 2), colSize: ['100%', '100%']\n        });\n      }\n    } catch {\n      this.forceUpdate();\n    }\n  }\n\n  render(): React.ReactNode {\n    const { tiles } = this.props;\n    const { tileWidth, colSize } = this.state;\n\n    if (tiles === null) {\n      return (\n        <div style={{textAlign: \"center\"}}>\n          <h1>Welcome to IguideME</h1>\n          <Spin size=\"large\" />\n        </div>\n      )\n    }\n\n    return (\n      <div ref={this.wrapper} style={{padding: 20, boxSizing: 'border-box'}}>\n        { this.state.isAdmin &&\n          <div style={{marginBottom: 20}}>\n\t\t\t\t\t\t<Alert\n\t\t\t\t\t\t\tmessage={\"Administrative tasks\"}\n\t\t\t\t\t\t\tdescription={<div>\n                You are an IguideME course administrator. Please click the button below to visit the administration panel.\n                <br />\n                <Button onClick={() => this.props.dispatch(setAdminView(true))} style={{marginTop: 15}}>\n                  Admin panel\n                </Button>\n              </div>}\n\t\t\t\t\t\t\ttype=\"info\"\n\t\t\t\t\t\t\tshowIcon\n\t\t\t\t\t\t/>\n          </div>\n        }\n\n        <Row gutter={[5,5]}>\n          <Col flex={colSize[0]} className={\"tileWrapper\"}>\n            <Typography.Title level={3}>Activities</Typography.Title>\n\n            {(tiles || []).sort((a, b) =>\n              a.rank - b.rank\n            ).filter(tile => tile.type === \"activity\").map(tile => {\n              return (\n                <Tile\n                  tile={tile}\n                  width={tileWidth}\n                />\n              )\n            })}\n          </Col>\n\n          <Col flex={colSize[1]}>\n            <div className={\"tileWrapper\"}>\n              <Typography.Title level={3}>Course Grades</Typography.Title>\n              {(tiles || []).sort((a, b) =>\n                a.rank - b.rank\n              ).filter(tile => tile.type === \"grade\").map(tile => {\n                return (\n                  <Tile\n                    tile={tile}\n                    width={tileWidth - 5}\n                  />\n                )\n              })}\n            </div>\n\n            <br />\n\n            <div className={\"tileWrapper\"}>\n              <Typography.Title level={3}>\n                Learning Outcome\n              </Typography.Title>\n\n              <Row justify={\"center\"}>\n                {(tiles || []).sort((a, b) =>\n                  a.rank - b.rank\n                ).filter(tile => tile.type === \"outcome\").map(tile => {\n\n\n                  return (\n                    <Tile\n                      tile={tile}\n                      width={tileWidth}\n                    />\n                  )\n                })}\n              </Row>\n            </div>\n          </Col>\n        </Row>\n      </div>\n    )\n  }\n}\n\nexport default connect(mapStateToProps)(TileList);\n\n","export const setAdminView = (value: boolean) => {\n\n  return {\n    type: `SET_ADMIN_VIEW_SUCCESS`,\n    payload: value\n  };\n}","import React, { PureComponent } from \"react\";\nimport {Line} from 'react-chartjs-2';\n\ninterface IProps {\n  data: { y_hat: number, y_lower: number, y_upper: number }[];\n  average: number | string;\n}\n\n\nexport default class GraphView extends PureComponent<IProps> {\n\n  render() {\n    const { data } = this.props;\n\n    if (!data || data.length === 0) {\n      return (\n        <h2>At the moment we have insufficient data to predict a grade!</h2>\n      )\n    }\n\n    return (\n      <React.Fragment>\n        <h2>Your predicted grade is a <b>{ data[data.length - 1]['y_hat']}</b>.</h2>\n        <Line\n          data={{\n            labels: Array.from(Array((data || []).length).keys()),\n            datasets: [\n              {\n                label: \"Lower boundary\",\n                backgroundColor: 'rgba(211, 211, 211,  0.6)',\n                borderColor: 'rgba(188, 188, 188, 1.0)',\n                fill: false,\n                data: (data || []).map(x => x['y_lower'])\n              },\n              {\n                label: \"Upper boundary\",\n                backgroundColor: 'rgba(211, 211, 211, 0.6)',\n                borderColor: 'rgba(188, 188, 188, 1.0)',\n                fill: '-1',\n                data: (data || []).map(x => x['y_upper'])\n              },\n              {\n                label: \"Predicted grade\",\n                backgroundColor: 'rgba(50, 145, 200, 0.6)',\n                borderColor: 'rgba(50, 145, 200, 1.0)',\n                fill: false,\n                data: (data || []).map(x => x['y_hat'])\n              }\n            ],\n          }}\n          options={{\n            legend: {\n              display: false\n            },\n            maintainAspectRatio: false,\n            spanGaps: false,\n            elements: {\n              line: {\n                tension: 0.000001\n              }\n            },\n            plugins: {\n              filler: {\n                propagate: false\n              }\n            },\n            scales: {\n              xAxes: [{\n                ticks: {\n                  autoSkip: false\n                }\n              }],\n              yAxes: [{\n                ticks: {\n                  suggestedMin: 0,\n                  suggestedMax: 10\n                }\n              }]\n            }\n          }}\n        />\n      </React.Fragment>\n    )\n  }\n}","import React, { PureComponent } from \"react\";\nimport {IEntry} from \"../../../models/ITile\";\nimport { Row, Col, Button } from \"antd\";\nimport StatusIndication from \"../../../components/Tile/StatusIndication\";\nimport \"./components-view.scss\";\nimport { LikeTwoTone, WarningTwoTone } from \"@ant-design/icons\";\n\nexport default class ComponentsView extends PureComponent<{ entries: IEntry[] }> {\n\n  isCompleted = (entry: IEntry): boolean => {\n    return (entry.items || []).filter(e => e.status === \"unstarted\").length === 0;\n  }\n\n  renderProgress = (entry: IEntry) => {\n\n    const completed = this.isCompleted(entry);\n    const progress = completed ? \"completed\" : \"in-progress\";\n    const grade = (entry.grade || 10) < 5.5 ? \"failed\" : \"passed\";\n\n    if (!completed) return (<span>{progress}</span>);\n\n    return <span>{progress}, {grade}</span>\n  }\n\n  renderIemStatus = (status: \"failed\" | \"passed\" | \"unstarted\") => {\n    switch(status) {\n      case \"failed\":\n        return (\n          <WarningTwoTone twoToneColor={\"rgb(255, 78, 78)\"}/>\n        );\n      case \"passed\":\n        return (\n          <LikeTwoTone twoToneColor={\"#52c41a\"}/>\n        );\n      default: return null;\n    }\n  }\n\n  renderActionButton = (entry: IEntry) => {\n    if (entry.hide_action_button) return null;\n\n    return (\n      <Button block type={this.isCompleted(entry) ? \"dashed\" : \"default\"}>\n        { this.isCompleted(entry) ? \"Retake\" : \"Take\" }\n      </Button>\n    )\n  }\n\n  renderMetaData = (metadata: any) => {\n    if (typeof metadata === 'string' || metadata instanceof String) {\n      // html has already been validated by Canvas, so there shouldn't be\n      // anything dangerous\n      return <div dangerouslySetInnerHTML={{__html: String(metadata)}} />\n    }\n\n    return Object.keys(metadata).map(key => {\n      return (\n        <p><b>{key}:</b> {metadata[key]}</p>\n      );\n    });\n  }\n\n  render(): React.ReactNode {\n    const { entries } = this.props;\n    return (\n      <div id={\"componentsView\"}>\n        <Row>\n          { entries.map(entry => {\n            return (\n              <Col\n                xs={24}\n                sm={entry.extra_wide ? 24 : 12}\n                md={entry.extra_wide ? 12 : 8}\n                lg={entry.extra_wide ? 8 : 6}\n              >\n                <div className={\"component\"}>\n                  <div className={\"progress\"}>\n                    { this.renderProgress(entry) }\n                  </div>\n\n                  <h2>{ entry.name }</h2>\n                  { entry.grade !== null &&\n                    (this.isCompleted(entry) ?\n                      <StatusIndication statusFromAverage={true} average={entry.grade} /> :\n                      <span>-</span>)\n                  }\n\n                  { (entry.items || []).map(item => {\n                    return (\n                      <div className={\"items\"}>\n                        <Row>\n                          <Col xs={19} md={12}>\n                            <a href={item.referer}>{ item.name }</a>\n                          </Col>\n\n                          <Col xs={5} md={12}>\n                            { this.renderIemStatus(item.status) }\n                          </Col>\n                        </Row>\n                      </div>\n                    );\n                  })}\n\n                  { entry.metadata && this.renderMetaData(entry.metadata) }\n                  { this.renderActionButton(entry) }\n                </div>\n              </Col>\n            )\n          }) }\n        </Row>\n      </div>\n    )\n  }\n}","import React, { PureComponent } from \"react\";\nimport { CheckCircleOutlined } from '@ant-design/icons';\nimport {Timeline} from \"antd\";\nimport {store} from \"../../../utils/configureStore\";\nimport {ITile} from \"../../../models/ITile\";\nimport {isGradeSufficient} from \"../../../utils/helpers\";\n\nexport default class OutcomeView extends PureComponent {\n\n  createObjectives = () => {\n    const state = store.getState();\n    const OBJECTIVES = [\n      {\n        //1\n        achieved: () => {\n          const exams: ITile = state.tiles.find((tile: ITile) => tile.name === \"Exam grades\");\n          if (!exams) return false;\n          return (isGradeSufficient(exams.entries.length > 0 ? (exams.entries[0].grade || 0) : 0));\n        },\n        description: \"de kernbegrippen uit de farmacokinetiek (halfwaardetijd, verdelingsvolume e.d.) onderscheiden en\" +\n          \" toepassen\"\n      },\n      {\n        //2\n        achieved: () => {\n          const exams: ITile = state.tiles.find((tile: ITile) => tile.name === \"Exam grades\");\n          if (!exams) return false;\n          return (isGradeSufficient(exams.entries.length > 0 ? (exams.entries[0].grade || 0) : 0));\n        },\n        description: \"de kernbegrippen uit de farmacodynamiek (receptoraffiniteit, agonisme, antagonisme,\" +\n          \" concentratie-responsrelatie e.d.) onderscheiden en toepassen\"\n      },\n      {\n        //3\n        achieved: () => {\n          const exams: ITile = state.tiles.find((tile: ITile) => tile.name === \"Exam grades\");\n          if (!exams) return false;\n          return (isGradeSufficient(exams.entries.length > 0 ? (exams.entries[0].grade || 0) : 0));\n        },\n        description: \"farmacokinetische en farmacodynamische eigenschappen van neurofarmaca evalueren om zo te\" +\n          \" interpreteren hoe deze van belang zijn voor de farmacotherapeutische toepasbaarheid en effectiviteit van\" +\n          \" deze (potentiële) geneesmiddelen\"\n      },\n      {\n        //4\n        achieved: () => {\n          const exams: ITile = state.tiles.find((tile: ITile) => tile.name === \"Exam grades\");\n          if (!exams) return false;\n\n          const exam2 = (isGradeSufficient(exams.entries.length > 1 ? (exams.entries[1].grade || 0) : 0));\n          const exam3 = (isGradeSufficient(exams.entries.length > 2 ? (exams.entries[2].grade || 0) : 0));\n\n          const practice_sessions: ITile = state.tiles.find((tile: ITile) => tile.name === \"Practice Sessions\");\n          if (!practice_sessions) return false;\n\n          const perusall: ITile = state.tiles.find((tile: ITile) => tile.name === \"Perusall Assignments\");\n          if (!perusall) return false;\n\n          return exam2 && exam3 && practice_sessions.entries.length >= 2 && perusall.entries.length >= 3;\n        },\n        description: \"uitleggen (in een presentatie) welke (biologische) processen leiden tot de klinische\" +\n          \" verschijnselen van hersenaandoeningen\"\n      },\n      {\n        //5\n        achieved: () => {\n          const exams: ITile = state.tiles.find((tile: ITile) => tile.name === \"Exam grades\");\n          if (!exams) return false;\n\n          const exam2 = (isGradeSufficient(exams.entries.length > 1 ? (exams.entries[1].grade || 0) : 0));\n          const exam3 = (isGradeSufficient(exams.entries.length > 2 ? (exams.entries[2].grade || 0) : 0));\n\n          const practice_sessions: ITile = state.tiles.find((tile: ITile) => tile.name === \"Practice Sessions\");\n          if (!practice_sessions) return false;\n\n          const perusall: ITile = state.tiles.find((tile: ITile) => tile.name === \"Perusall Assignments\");\n          if (!perusall) return false;\n\n          return exam2 && exam3 && practice_sessions.entries.length >= 2 && perusall.entries.length >= 3;\n        },\n        description: \"uitleggen (in een presentatie) hoe huidige (psycho)biologische onderzoeksbenaderingen inzicht\" +\n          \" verschaffen in de diverse ziektebeelden\"\n      },\n      {\n        //6\n        achieved: () => {\n          const exams: ITile = state.tiles.find((tile: ITile) => tile.name === \"Exam grades\");\n          if (!exams) return false;\n\n          const exam2 = (isGradeSufficient(exams.entries.length > 1 ? (exams.entries[1].grade || 0) : 0));\n          const exam3 = (isGradeSufficient(exams.entries.length > 2 ? (exams.entries[2].grade || 0) : 0));\n\n          const practice_sessions: ITile = state.tiles.find((tile: ITile) => tile.name === \"Practice Sessions\");\n          if (!practice_sessions) return false;\n\n          const perusall: ITile = state.tiles.find((tile: ITile) => tile.name === \"Perusall Assignments\");\n          if (!perusall) return false;\n\n          return exam2 && exam3 && practice_sessions.entries.length >= 2 && perusall.entries.length >= 3;\n        },\n        description: \"een samenvatting in eigen woorden geven van de gangbare farmacotherapieën en hoe die leiden tot\" +\n          \" verlichting van de klinische symptomen\"\n      },\n      {\n        //7\n        achieved: () => {\n          const exams: ITile = state.tiles.find((tile: ITile) => tile.name === \"Exam grades\");\n          if (!exams) return false;\n          return isGradeSufficient(exams.entries.length > 0 ? (exams.entries[0].grade || 0) : 0);\n        },\n        description: \"de verschillende aspecten van het “research & development” van geneesmiddelen benoemen en\" +\n          \" uitleggen hoe deze worden toegepast bij de ontwikkeling van nieuwe geneesmiddelen\"\n      },\n      {\n        //8\n        achieved: () => {\n          const exams: ITile = state.tiles.find((tile: ITile) => tile.name === \"Exam grades\");\n          if (!exams) return false;\n\n          const exam2 = (isGradeSufficient(exams.entries.length > 1 ? (exams.entries[1].grade || 0) : 0));\n          const exam3 = (isGradeSufficient(exams.entries.length > 2 ? (exams.entries[2].grade || 0) : 0));\n\n          const practice_sessions: ITile = state.tiles.find((tile: ITile) => tile.name === \"Practice Sessions\");\n          if (!practice_sessions) return false;\n\n          const perusall: ITile = state.tiles.find((tile: ITile) => tile.name === \"Perusall Assignments\");\n          if (!perusall) return false;\n\n          return exam2 && exam3 && practice_sessions.entries.length >= 2 && perusall.entries.length >= 3;\n        },\n        description: \"evalueren welke problemen kleven aan het gebruik van de beschikbare neurofarmaca en hoe naar\" +\n          \" aanleiding daarvan nieuwe geneesmiddelen zouden kunnen worden ontwikkeld\"\n      }\n    ];\n\n    return OBJECTIVES;\n  }\n\n  render() {\n    return (\n      <div style={{ marginTop: 20 }}>\n        <Timeline>\n          { this.createObjectives().map(obj => {\n            if (obj.achieved()) {\n              return (\n                <Timeline.Item dot={<CheckCircleOutlined />} color=\"green\">\n                  { obj.description }\n                </Timeline.Item>\n              )\n            }\n            return (\n              <Timeline.Item color=\"orange\">\n                { obj.description }\n              </Timeline.Item>\n            )\n          })}\n        </Timeline>\n      </div>\n    )\n  }\n}","import React, { PureComponent } from \"react\";\nimport {fetchTiles} from \"../../store/actions/tiles\";\nimport {RootState} from \"../../store\";\nimport {ITile} from \"../../models/ITile\";\nimport {connect} from \"react-redux\";\nimport TileList from \"../TileList\";\nimport {setView} from \"../../store/actions/view\";\nimport Tooltip from \"antd/lib/tooltip\";\nimport { Button } from \"antd\";\nimport { LeftOutlined } from \"@ant-design/icons\";\nimport GraphView from \"./GraphView\";\nimport ComponentsView from \"./ComponentsView\";\nimport \"./tile-detail.scss\";\nimport OutcomeView from \"./OutcomeView\";\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    view: state.view\n  };\n}\n\ntype IProps = {\n  dispatch: (e: any) => {},\n  view: ITile | null,\n}\n\nclass TileDetail extends PureComponent<IProps> {\n  componentDidMount(): void {\n    //fetchTiles\n    const { dispatch } = this.props;\n    dispatch(fetchTiles());\n  }\n\n  renderGraph = () => {\n    const { view } = this.props;\n\n    if (!view || view.entries.length !== 1) {\n      return (\n        <span>Error: malformed data</span>\n      )\n    }\n\n    const entry = view.entries[0].metadata;\n    const last_entry = entry[entry.length - 1];\n\n    return (\n      <div className={\"graphWrapper\"}>\n        <GraphView average={last_entry ? last_entry.y_hat : '??'} data={entry} />\n      </div>\n    );\n  }\n\n  renderComponents = () => {\n    const { view } = this.props;\n\n    if (!view || view.entries.length < 1) return null;\n\n    return (\n      <div className={\"componentsWrapper\"}>\n        <ComponentsView entries={view.entries} />\n      </div>\n    )\n  }\n\n  renderDetailView = () => {\n    const { view } = this.props;\n\n    if (!view) return null;\n\n    if (view.type === \"outcome\") {\n      return <OutcomeView />;\n    }\n\n    switch(view.entry_view_type) {\n      case \"graph\":\n        return this.renderGraph();\n      default:\n        return this.renderComponents();\n    }\n  }\n\n  render(): React.ReactNode {\n    const { dispatch, view } = this.props;\n\n    if (!view) return <TileList />\n\n    return (\n      <div id={\"tileDetail\"}>\n        <Tooltip placement={\"right\"} title={\"Back to dashboard\"}>\n          <Button\n            onClick={async () => {\n              dispatch(await setView(null))\n            }}\n            type={\"primary\"}\n            shape={\"circle\"}\n            icon={<LeftOutlined />}\n          />\n        </Tooltip>\n        <h1>{ view.name }</h1>\n\n        { this.renderDetailView() }\n      </div>\n    )\n  }\n}\n\nexport default connect(mapStateToProps)(TileDetail);\n\n","import React, { PureComponent } from \"react\";\nimport \"./iguideme.scss\";\nimport {RootState} from \"../../store\";\nimport {connect} from \"react-redux\";\nimport {ITile} from \"../../models/ITile\";\nimport TileList from \"../../views/TileList\";\nimport TileDetail from \"../../views/TileDetail\";\n\nconst mapStateToProps = (state: RootState) => {\n  return {\n    view: state.view\n  };\n}\n\ntype IProps = {\n  dispatch: (e: any) => {},\n  view: ITile | null,\n}\n\nclass App extends PureComponent<IProps> {\n\n  render(): React.ReactNode {\n\n    const { view } = this.props;\n\n    return (\n      <div id={\"app\"}>\n        { view === null ? <TileList /> : <TileDetail /> }\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps)(App);","import React, { PureComponent } from \"react\";\nimport {Button, Divider, Input, message, Modal} from \"antd\";\nimport CSVReader from \"react-csv-reader\";\nimport { ExclamationCircleOutlined } from '@ant-design/icons';\nimport \"./style.scss\";\nimport ReactJson from \"react-json-view\";\nimport {IBackendResponse} from \"../../../models/IBackendResponse\";\n\ninterface IProps {\n  id: string;\n  title: string;\n  required_fields: string[];\n  doUpload: (key: string, data: any) => IBackendResponse;\n  doFetch: () => IBackendResponse;\n}\n\nexport default class Section extends PureComponent<IProps> {\n\n  state = {\n    collection: ''\n  }\n\n  render(): React.ReactNode {\n    const papaparseOptions = {\n      header: true,\n      dynamicTyping: true,\n      skipEmptyLines: true,\n      transformHeader: (header: string) =>\n        header\n          .toLowerCase()\n          .replace(/\\W/g, '_')\n    }\n\n    const that = this;\n\n    return (\n      <div>\n        <Divider orientation={\"left\"}>{ this.props.title }</Divider>\n\n        <p>\n          Per upload zijn de volgende velden vereist:\n          <ul>\n            { this.props.required_fields.map(f => <li>{f}</li>)}\n          </ul>\n        </p>\n\n        <Input\n          onChange={(e) => this.setState({collection: e.target.value})}\n          placeholder={\"collection\"}\n          style={{ width: 200 }}\n        />\n\n        <CSVReader\n          cssClass=\"csv-reader-input\"\n          onFileLoaded={(data) => {\n\n            if (data.length === 0) return;\n\n            const sample = data[0];\n            if (this.props.required_fields.map(f => Object.keys(sample).includes(f)).some(x => !x)) {\n              Modal.error({\n                title: 'Failed to upload data',\n                content: `Not all required fields were included!`,\n              });\n              return;\n            }\n\n            this.props.doUpload( this.state.collection, data ).then(() => {\n              Modal.success({\n                title: 'Data uploaded successfully',\n                content: `${data.length} records were added!`,\n              });\n            });\n          }}\n          onError={() => message.error('An error occurred loading the file')}\n          parserOptions={papaparseOptions}\n          inputId={this.props.id}\n          disabled={this.state.collection.length < 1}\n        />\n\n        <Button type={\"primary\"} onClick={() => {\n\n          this.props.doFetch().then((response: IBackendResponse) => {\n\n            const groups = new Set(response.data.map((x: any) => x.groupID));\n\n            let json = {};\n            Array.from(groups).forEach((group: any) => {\n              // @ts-ignore\n              json[group] = response.data.filter((y: any) => y.groupID === group);\n            });\n\n            Modal.info({\n              width: 800,\n              title: `${this.props.title} data`,\n              content: <div style={{maxHeight: '60vh', overflow: 'scroll'}}>\n                <ReactJson\n                  name={false}\n                  collapsed={true}\n                  enableClipboard={false}\n                  displayObjectSize={false}\n                  displayDataTypes={false}\n                  src={json}\n                />\n              </div>,\n            });\n          });\n        }}\n        >\n          View data\n        </Button>\n        &nbsp;\n        <Button danger onClick={() => {\n          Modal.confirm({\n            title: `Do you really want to delete all ${this.props.title} data?`,\n            icon: <ExclamationCircleOutlined />,\n            content: 'This action can not be undone.',\n            okText: 'Yes',\n            okType: 'danger',\n            cancelText: 'No',\n            onOk() {\n              that.props.doUpload('', {}).then(() =>\n                message.success(\"Reset was successful!\"))\n            }\n          });\n        }}>Reset</Button>\n      </div>\n    )\n  }\n}","import Controller from \"./controller\";\nimport {IBackendResponse} from \"../models/IBackendResponse\";\n\nexport default class PerusallController extends Controller {\n\n  static uploadData(key: string, payload: any): IBackendResponse {\n    return this.client.post(\n      `Admin-perusall`,\n      { key, payload }\n    );\n  }\n\n  static getAll(): IBackendResponse {\n    return this.client.get(\n      `Admin-perusall`\n    );\n  }\n}","import Controller from \"./controller\";\nimport {IBackendResponse} from \"../models/IBackendResponse\";\n\nexport default class PracticeSessionsController extends Controller {\n\n  static uploadData(key: string, payload: any): IBackendResponse {\n    return this.client.post(\n      `Admin-practice-sessions`,\n      { key, payload }\n    );\n  }\n\n  static getAll(): IBackendResponse {\n    return this.client.get(\n      `Admin-practice-sessions`\n    );\n  }\n}","import Controller from \"./controller\";\nimport {IBackendResponse} from \"../models/IBackendResponse\";\n\nexport default class AttendanceController extends Controller {\n\n  static uploadData(key: string, payload: any): IBackendResponse {\n    return this.client.post(\n      `Admin-attendance`,\n      { key, payload }\n    );\n  }\n\n  static getAll(): IBackendResponse {\n    return this.client.get(\n      `Admin-attendance`\n    );\n  }\n}","import React, { PureComponent } from \"react\";\nimport Section from \"./Section\";\nimport PerusallController from \"../../api/perusall\";\nimport Controller from \"../../api/controller\";\nimport {IBackendResponse} from \"../../models/IBackendResponse\";\nimport PracticeSessionsController from \"../../api/practiceSessions\";\nimport AttendanceController from \"../../api/attendance\";\n\nexport default class Admin extends PureComponent {\n\n  constructor(props: any) {\n    super(props);\n\n    Controller.setup();\n  }\n\n  handlePracticeSessionsUpload = (key: string, data: any): IBackendResponse => {\n    return PracticeSessionsController.uploadData(key, data).then((response: IBackendResponse) => response.data);\n  }\n\n  handlePracticeSessionsFetch = (): IBackendResponse => {\n    return PracticeSessionsController.getAll();\n  }\n\n  handlePerusallUpload = (key: string, data: any): IBackendResponse => {\n    const entries = data.map((x: any) => {\n      return {\n        studentnaam: x['studentnaam'],\n        grade: x['grade'],\n        entry: JSON.stringify(x)\n      }\n    });\n    return PerusallController.uploadData(key, entries).then((response: IBackendResponse) => response.data);\n  }\n\n  handlePerusallFetch = (): IBackendResponse => {\n    return PerusallController.getAll();\n  }\n\n  handleAttendanceUpload = (key: string, data: any): IBackendResponse => {\n    return AttendanceController.uploadData(key, data).then((response: IBackendResponse) => response.data);\n  }\n\n  handleAttendanceFetch = (): IBackendResponse => {\n    return AttendanceController.getAll();\n  }\n\n  render(): React.ReactNode {\n    Controller.setup();\n\n    return (\n      <div>\n        <h1>IguideME administration</h1>\n        <Section\n          id={\"practice\"}\n          title={\"Practice Sessions\"}\n          required_fields={['studentnaam', 'grade']}\n          doUpload={this.handlePracticeSessionsUpload}\n          doFetch={this.handlePracticeSessionsFetch}\n        />\n        <Section\n          id={\"perusall\"}\n          title={\"Perusall\"}\n          required_fields={['studentnaam', 'grade']}\n          doUpload={this.handlePerusallUpload}\n          doFetch={this.handlePerusallFetch}\n        />\n        <Section\n          id={\"attendance\"}\n          title={\"Lecture Attendance\"}\n          required_fields={['studentnaam', 'aanwezig']}\n          doUpload={this.handleAttendanceUpload}\n          doFetch={this.handleAttendanceFetch}\n        />\n      </div>\n    )\n  }\n}","import React from \"react\";\nimport ConsentController from \"./api/consent\";\nimport {IBackendResponse} from \"./models/IBackendResponse\";\nimport {setConsent} from \"./store/actions/consent\";\nimport Loading from \"./components/Loading\";\nimport {connect} from \"react-redux\";\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\nimport Consent from \"./components/Consent\";\nimport App from \"./common/App\";\nimport {RootState} from \"./store\";\nimport {Alert} from \"antd\";\nimport Admin from \"./common/Admin\";\n\n\nclass IguideME extends React.Component<any, any> {\n\n  componentDidMount(): void {\n    const { dispatch } = this.props;\n\n    ConsentController.fetchConsent().then((response: IBackendResponse) => {\n      const { data } = response;\n\n      switch (data) {\n        case 1:\n          dispatch(setConsent(true));\n          break;\n        case 0:\n          dispatch(setConsent(false));\n          break;\n        default:\n          dispatch(setConsent(null));\n          break;\n      }\n      this.forceUpdate();\n    }).catch(() => { dispatch(setConsent(null)); this.forceUpdate() });\n  }\n\n  render(): React.ReactNode {\n\n    if (!this.props.consent) {\n      return <Loading />;\n    }\n\n    if (this.props.consent.granted === false) {\n      return (\n        <div>\n          <Alert\n            message=\"Consent not granted\"\n            description=\"You have denied consent in the past. If you wish to participate you can grant consent below.\"\n            type=\"info\"\n            showIcon\n          />\n          <Consent />\n        </div>\n      )\n    }\n\n    if (this.props.adminView) {\n      return <Admin />;\n    }\n\n    return (\n      this.props.consent.granted === null ?\n        <Consent /> :\n        <Router>\n          <Switch>\n            <Route path=\"/admin\">\n              <Admin />\n            </Route>\n            <Route path=\"/consent\">\n              <Consent />\n            </Route>\n            <Route path=\"/\">\n              <App />\n            </Route>\n          </Switch>\n        </Router>\n    )\n  }\n}\n\nexport default connect((state: RootState) => ({\n  consent: state.consent,\n  adminView: state.adminView\n}))(IguideME);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport \"./scss/base.scss\";\nimport Controller from \"./api/controller\";\nimport App from \"./app\";\nimport {Provider} from \"react-redux\";\nimport {persistor, store} from \"./utils/configureStore\";\nimport {PersistGate} from \"redux-persist/integration/react\";\n\nController.setup();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}