{"version":3,"sources":["api/controllers/student.ts","containers/AdminHeader/index.tsx","common/Admin/AdminMenu/index.tsx","common/Admin/index.tsx","components/settings/RequireConsent/ConsentEditor/index.tsx","components/settings/RequireConsent/index.tsx","components/settings/AcceptList/index.tsx","components/settings/PeerGroups/index.tsx","common/Admin/sections/Settings/index.tsx"],"names":["StudentController","debug","delay","MOCK_STUDENTS","this","client","get","then","response","data","Controller","connector","connect","state","course","user","AdminHeader","loaded","students","props","studentPickView","getStudents","setState","id","isLoading","options","sort","a","b","name","localeCompare","map","s","label","value","login_id","placeholder","onChange","e","setStudent","find","isClearable","styles","control","provided","backgroundColor","color","border","singleValue","course_name","Fragment","to","style","float","padding","title","shape","icon","renderInner","Component","UserOutlined","selectedKeys","menuKey","Item","key","DatabaseOutlined","AppstoreOutlined","LaptopOutlined","TeamOutlined","SubMenu","TrophyOutlined","FundProjectionScreenOutlined","DotChartOutlined","CloudUploadOutlined","ClusterOutlined","NotificationOutlined","ControlOutlined","Admin","isAdmin","xs","className","children","withAdminRole","toolbarPlugin","createToolbarPlugin","linkifyPlugin","createLinkifyPlugin","Toolbar","mapDispatch","loadCourse","CourseActions","doneLoading","editorState","undefined","initialState","hasChanged","saving","isUpToDate","currentState","stateToHTML","getCurrentContent","toString","trim","updateState","newState","save","text","AppController","updateConsent","require_consent","message","success","setTimeout","EditorState","createWithContent","stateFromHTML","standardConsent","externalProps","type","disabled","onClick","showIcon","plugins","Loading","small","loading","toggleConsentRequirement","checkedChildren","CheckOutlined","unCheckedChildren","CloseOutlined","checked","enabled","accepted","isAccepted","loginId","includes","DataMartController","getAcceptList","acceptList","filter","x","student_login_id","accept_list","val","updateAcceptList","length","Math","round","Swal","fire","input","inputAttributes","autocapitalize","showCancelButton","confirmButtonText","showLoaderOnConfirm","preConfirm","percentage","_p","parseInt","showValidationMessage","allowOutsideClick","result","isConfirmed","n","ceil","_a","random","slice","createAcceptList","list","opacity","student","md","lg","xl","size","inputSize","inputEnabled","buttonText","updatePeerGroups","personalized","updateCoursePeerGroup","personalized_peers","min_size","getCoursePeerGroups","direction","min","Settings","width"],"mappings":"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","file":"static/js/18.37243e79.chunk.js","sourcesContent":["import { debug } from \"../../config/config\";\nimport Controller from \"../controller\";\nimport {CanvasStudent} from \"../../models/canvas/Student\";\nimport {MOCK_STUDENTS} from \"../../mocks/students\";\nimport {delay} from \"../../utils/mockRequest\";\n\nexport default class StudentController extends Controller {\n\n  static getStudents(): Promise<CanvasStudent[]> {\n    if (debug()) return delay(MOCK_STUDENTS);\n\n    return this.client.get(\n      `students`\n    ).then(response => response.data);\n  }\n}","import React, { Component } from \"react\";\nimport Select from \"react-select\";\nimport {Button, Tooltip} from \"antd\";\nimport {SyncOutlined} from \"@ant-design/icons\";\nimport { Link } from \"react-router-dom\";\nimport {IProps, IState} from \"./types\";\nimport StudentController from \"../../api/controllers/student\";\nimport {CanvasStudent} from \"../../models/canvas/Student\";\nimport {debug} from \"../../config/config\";\nimport {RootState} from \"../../store\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport \"./style.scss\";\n\nconst mapState = (state: RootState) => ({\n  course: state.course,\n  user: state.user\n});\n\nconst connector = connect(mapState);\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\ntype Props = IProps & PropsFromRedux;\n\nclass AdminHeader extends Component<Props, IState> {\n\n  state = {\n    loaded: false,\n    students: []\n  }\n\n  componentDidMount(): void {\n    const { studentPickView } = this.props;\n\n    if (studentPickView) {\n      StudentController.getStudents().then(students => this.setState({ students, loaded: true }));\n    }\n\n    this.setState({ loaded: true });\n  }\n\n  renderInner(): React.ReactNode {\n    if (this.props.studentPickView) {\n      const { students, loaded } = this.state;\n      return (\n        <Select id={\"studentPicker\"}\n                isLoading={!loaded}\n                options={students.sort(\n                  (a: CanvasStudent, b: CanvasStudent) => a.name.localeCompare(b.name)\n                ).map((s: CanvasStudent) => ({ label: s.name, value: s.login_id}))}\n                placeholder={\"Choose a student\"}\n                onChange={(e) => this.props.setStudent!(\n                  e ? students.find((s: CanvasStudent) => s.login_id === e!.value)! : null\n                )}\n                isClearable={true}\n                styles={{\n                  control: (provided, state) => ({\n                    ...provided,\n                    backgroundColor: 'transparent',\n                    color: 'white',\n                    border: '1px solid white'\n                  }),\n                  singleValue: (provided, state) => {\n                    return {...provided, color: 'white'};\n                  }\n                }}\n        />\n      );\n    }\n\n    return (\n      <div id={\"inner\"}>\n        <h2>{ this.props.course ? this.props.course.course_name : \"Loading course...\" }</h2>\n      </div>\n    );\n  }\n\n  render(): React.ReactNode {\n    return (\n      <React.Fragment>\n        <div id={\"adminHeader\"}>\n          { this.props.studentPickView ?\n            <Link to={'/admin'} style={{ float: 'right' }}>\n              <h3>Admin Panel</h3>\n            </Link> :\n            <div style={{float: 'right', padding: 20}}>\n              <Tooltip title={\"Reload data\"}>\n                <Button id={\"reload\"}\n                        shape=\"circle\"\n                        style={{backgroundColor: 'rgba(255, 255, 255, 0.5)', color: 'white'}}\n                        icon={<SyncOutlined />} />\n              </Tooltip>\n            </div>\n          }\n\n          <div id={\"navbarContent\"}>\n            <div id={\"brand\"}>\n              <Link to={'/'}>\n                <h1>IGuideME</h1>\n              </Link>\n            </div>\n\n            { this.renderInner() }\n          </div>\n        </div>\n        { debug() &&\n          (<div id={\"debugNotice\"}>\n            Application is running in <strong>demo</strong> mode. Changes will not be saved!\n          </div>)\n        }\n      </React.Fragment>\n    );\n  }\n}\n\nexport default connector(AdminHeader);","import React, { Component } from \"react\";\nimport {\n  AppstoreOutlined,\n  ControlOutlined,\n  CloudUploadOutlined,\n  ClusterOutlined,\n  DotChartOutlined,\n  FundProjectionScreenOutlined,\n  LaptopOutlined,\n  TrophyOutlined,\n  NotificationOutlined,\n  DatabaseOutlined,\n  UserOutlined,\n  TeamOutlined } from \"@ant-design/icons\";\nimport { Menu } from \"antd\";\nimport {Link} from \"react-router-dom\";\nimport \"./style.scss\";\nimport {RootState} from \"../../../store\";\nimport {connect, ConnectedProps} from \"react-redux\";\n\nconst mapState = (state: RootState) => ({\n  user: state.user\n});\n\nconst connector = connect(mapState)\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\ntype Props = { menuKey: string } & PropsFromRedux;\n\nclass AdminMenu extends Component<Props> {\n\n  render(): React.ReactNode {\n    const { user } = this.props;\n\n    return (\n      <div id={\"adminMenu\"}>\n        <div id={\"user\"}>\n          <h3>{ user ? user.name : \"Loading profile...\" }</h3>\n          <strong><UserOutlined /> Instructor</strong>\n        </div>\n\n        <Menu selectedKeys={[ this.props.menuKey ]}>\n          <Menu.Item key={\"datamart\"} icon={<DatabaseOutlined />}>\n            <Link to={'/admin'}>\n              Datamart\n            </Link>\n          </Menu.Item>\n\n          <Menu.Item key={\"tiles\"} icon={<AppstoreOutlined />}>\n            <Link to={'/admin/tiles'}>\n              Tiles\n            </Link>\n          </Menu.Item>\n\n          <Menu.Item key={\"dashboard\"} icon={<LaptopOutlined />}>\n            <Link to={'/admin/dashboard'}>\n              Dashboard\n            </Link>\n          </Menu.Item>\n\n          <Menu.Item key={\"studentOverview\"} icon={<TeamOutlined />}>\n            <Link to={'/admin/student-overview'}>\n              Student Overview\n            </Link>\n          </Menu.Item>\n          <Menu.SubMenu key={\"submenu\"} icon={<TrophyOutlined />} title={\"Grades\"}>\n            <Menu.Item key={\"gradePredictor\"} icon={<FundProjectionScreenOutlined />}>\n              <Link to={'/admin/grade-predictor'}>\n                Predictor\n              </Link>\n            </Menu.Item>\n            <Menu.Item key={\"gradeAnalyzer\"} icon={<DotChartOutlined />}>\n              <Link to={'/admin/grade-analyzer'}>\n                Analyzer\n              </Link>\n            </Menu.Item>\n          </Menu.SubMenu>\n          <Menu.Item key={\"dataWizard\"} icon={<CloudUploadOutlined />}>\n            <Link to={'/admin/data-wizard'}>\n              Data Wizard\n            </Link>\n          </Menu.Item>\n          <Menu.Item key={\"analytics\"} icon={<ClusterOutlined />}>\n            <Link to={'/admin/analytics'}>\n              Analytics\n            </Link>\n          </Menu.Item>\n          <Menu.Item key={\"notificationCentre\"} icon={<NotificationOutlined />}>\n            <Link to={'/notification-centre'}>\n              Notification Centre\n            </Link>\n          </Menu.Item>\n          <Menu.Item key={\"settings\"} icon={<ControlOutlined />}>\n            <Link to={'/admin/settings'}>\n              Settings\n            </Link>\n          </Menu.Item>\n        </Menu>\n      </div>\n    )\n  }\n}\n\nexport default connector(AdminMenu);","import React, { Component } from \"react\";\nimport { withAdminRole } from \"../../hoc/withAdminRole\";\nimport AdminHeader from \"../../containers/AdminHeader\";\nimport { Redirect } from \"react-router-dom\";\nimport { Col, Row } from \"antd\";\nimport AdminMenu from \"./AdminMenu\";\nimport \"./style.scss\";\n\nclass Admin extends Component<any> {\n\n  render(): React.ReactNode {\n    const { isAdmin, menuKey } = this.props;\n    if (!isAdmin) return (<Redirect to={'/'} />);\n\n    return (\n      <div id={\"admin\"}>\n        <AdminHeader />\n        <Row>\n          <Col xs={4}>\n            <AdminMenu menuKey={menuKey} />\n          </Col>\n          <Col xs={20} id={'wrapper'} className={`${ menuKey !== \"settings\" && \"noOverflow\"}`}>\n            { this.props.children }\n          </Col>\n        </Row>\n      </div>\n    )\n  }\n}\n\nexport default withAdminRole(Admin);","import React, { Component } from \"react\";\nimport { IState } from \"./types\";\nimport { EditorState } from 'draft-js';\n// @ts-ignore plugin does not support TypeScript\nimport createToolbarPlugin from 'draft-js-static-toolbar-plugin';\n// @ts-ignore plugin does not support TypeScript\nimport createLinkifyPlugin from 'draft-js-linkify-plugin';\nimport Editor from 'draft-js-plugins-editor';\nimport {\n  ItalicButton,\n  BoldButton,\n  UnderlineButton,\n  CodeButton,\n  HeadlineOneButton,\n  HeadlineTwoButton,\n  HeadlineThreeButton,\n  UnorderedListButton,\n  OrderedListButton,\n  BlockquoteButton,\n  CodeBlockButton,\n} from 'draft-js-buttons';\nimport 'draft-js/dist/Draft.css';\nimport 'draft-js-static-toolbar-plugin/lib/plugin.css';\nimport \"./style.scss\";\nimport { stateToHTML } from \"draft-js-export-html\";\nimport { stateFromHTML } from \"draft-js-import-html\";\nimport { standardConsent } from \"./template\";\nimport {Alert, Button, message} from \"antd\";\nimport Loading from \"../../../utils/Loading\";\nimport {RootState} from \"../../../../store\";\nimport {ThunkDispatch} from \"redux-thunk\";\nimport {TileActions} from \"../../../../store/actions/tiles\";\nimport {CourseActions} from \"../../../../store/actions/course\";\nimport {UserActions} from \"../../../../store/actions/user\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport AppController from \"../../../../api/controllers/app\";\n\nconst toolbarPlugin = createToolbarPlugin();\nconst linkifyPlugin = createLinkifyPlugin();\nconst { Toolbar } = toolbarPlugin;\n\nconst mapState = (state: RootState) => ({\n  course: state.course,\n});\n\nconst mapDispatch = {\n  loadCourse: () => CourseActions.loadCourse()\n}\n\nconst connector = connect(mapState, mapDispatch)\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nclass ConsentEditor extends Component<PropsFromRedux, IState> {\n\n  state = {\n    doneLoading: false,\n    editorState: undefined,\n    initialState: undefined,\n    hasChanged: false,\n    saving: false\n  }\n\n  componentDidMount(): void {\n    const { course }: PropsFromRedux = this.props;\n\n    const editorState = course ? (course.text ? course.text : undefined) : undefined;\n\n    setTimeout(() => {\n      this.setState({\n        doneLoading: true,\n        editorState: EditorState.createWithContent(stateFromHTML(course ? (course.text ? course.text : standardConsent) : standardConsent)),\n        initialState: stateToHTML(stateFromHTML(course ? (course.text ? course.text : \"\") : \"\")),\n        hasChanged: false\n      });\n    }, 300);\n  }\n\n  isUpToDate = () => {\n    if (!this.state.editorState || !this.state.doneLoading) return false;\n    const currentState: EditorState = this.state.editorState!;\n    return (stateToHTML(currentState.getCurrentContent()).toString().trim() === this.state.initialState)\n  }\n\n  updateState = (newState: EditorState) => {\n    this.setState({ editorState: newState, hasChanged: true });\n  }\n\n  save = () => {\n    const { course } = this.props;\n    this.setState({ saving: true }, () => {\n      const currentState: EditorState = this.state.editorState!;\n      const text = stateToHTML(currentState.getCurrentContent());\n\n      AppController.updateConsent(course!.require_consent, text).then(() => {\n        this.props.loadCourse().then(() => {\n          this.setState({\n            saving: false,\n            initialState: text\n          }, () => message.success(\"Informed consent saved!\"));\n        });\n      });\n    });\n  }\n\n  render(): React.ReactNode {\n    if (!this.state.doneLoading) {\n      return <Loading small={true} />\n    }\n\n    return (\n      <div id={\"consentEditor\"}>\n        <div id={\"editorToolbar\"}>\n          <Toolbar>\n            {\n              (externalProps: any) => (\n                <React.Fragment>\n                  <BoldButton {...externalProps} />\n                  <ItalicButton {...externalProps} />\n                  <UnderlineButton {...externalProps} />\n                  <CodeButton {...externalProps} />\n                  <UnorderedListButton {...externalProps} />\n                  <HeadlineOneButton {...externalProps} />\n                  <HeadlineTwoButton {...externalProps} />\n                  <HeadlineThreeButton {...externalProps} />\n                  <OrderedListButton {...externalProps} />\n                  <BlockquoteButton {...externalProps} />\n                  <CodeBlockButton {...externalProps} />\n                  <Button\n                    id={\"save\"}\n                    type={\"link\"}\n                    disabled={this.isUpToDate() || this.state.saving}\n                    onClick={this.save}\n                  >\n                    { this.state.saving ? \"Saving\" : \"Save\" }\n                  </Button>\n                </React.Fragment>\n              )\n            }\n          </Toolbar>\n\n          { !this.state.initialState &&\n          <Alert\n            message={\"Consent can not be given because the informed consent is undefined. Provide the\" +\n            \" informed consent below\"}\n            type={\"error\"} showIcon />\n          }\n        </div>\n\n        <div id={\"contentWrapper\"}\n             className={`${this.isUpToDate() && \"up-to-date\"} ${this.state.saving && \"saving\"}`}>\n          <Editor\n            editorState={this.state.editorState!}\n            onChange={this.updateState}\n            plugins={[toolbarPlugin, linkifyPlugin]}\n          />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default connector(ConsentEditor);","import React, { Component } from \"react\";\nimport {Divider, Space, Switch, Tooltip} from \"antd\";\nimport {CheckOutlined, CloseOutlined} from \"@ant-design/icons\";\nimport ConsentEditor from \"./ConsentEditor\";\nimport FadeIn from \"react-fade-in\";\nimport {RootState} from \"../../../store\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport AppController from \"../../../api/controllers/app\";\nimport Loading from \"../../utils/Loading\";\nimport {IState} from \"./types\";\nimport {CourseActions} from \"../../../store/actions/course\";\n\nconst mapState = (state: RootState) => ({\n  course: state.course,\n});\n\nconst mapDispatch = {\n  loadCourse: () => CourseActions.loadCourse()\n}\n\nconst connector = connect(mapState, mapDispatch)\ntype PropsFromRedux = ConnectedProps<typeof connector>\n\nclass RequireConsent extends Component<PropsFromRedux, IState> {\n\n  state = {\n    loading: false\n  }\n\n  toggleConsentRequirement = () => {\n    const { course } = this.props;\n\n    if (!course) return;\n\n    this.setState({ loading: true }, () => {\n      AppController.updateConsent(!course.require_consent, course.text).then(() => {\n        this.props.loadCourse().then(() => {\n          this.setState({ loading: false });\n        });\n      });\n    });\n  }\n\n  render(): React.ReactNode {\n    const { course } = this.props;\n    if (!course) return <Loading small={true} />;\n\n    return (\n      <div id={\"informedConsent\"}>\n        <h2>Informed Consent</h2>\n        <div className={\"primaryContainer\"}>\n          <span>\n            <Tooltip title={\"Consent is mandatory!\"}>\n              <Switch\n                // consent is enforced\n                checkedChildren={<CheckOutlined />}\n                unCheckedChildren={<CloseOutlined />}\n                onClick={this.toggleConsentRequirement}\n                checked={course.require_consent || true}\n                disabled={true}\n                loading={this.state.loading}\n              />\n            </Tooltip>\n            &nbsp;\n            When checked students are required to explicitly accept the informed consent. Students that did not grant\n              consent won't be able to use the application and their data will be excluded.\n          </span>\n\n          <Divider />\n\n          { course.require_consent &&\n            <FadeIn>\n              <ConsentEditor />\n            </FadeIn>\n          }\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default connector(RequireConsent);","import React, { Component } from \"react\";\nimport StudentController from \"../../../api/controllers/student\";\nimport {Button, Col, Divider, Row, Space, Switch} from \"antd\";\nimport {CheckOutlined, CloseOutlined} from \"@ant-design/icons\";\nimport {IProps, IState} from \"./types\";\nimport Loading from \"../../utils/Loading\";\nimport {CanvasStudent} from \"../../../models/canvas/Student\";\nimport \"./style.scss\";\nimport Swal from \"sweetalert2\";\nimport {RootState} from \"../../../store\";\nimport {CourseActions} from \"../../../store/actions/course\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport DataMartController from \"../../../api/controllers/datamart\";\nimport AppController from \"../../../api/controllers/app\";\n\nconst mapState = (state: RootState) => ({\n  course: state.course,\n});\n\nconst mapDispatch = {\n  loadCourse: () => CourseActions.loadCourse()\n}\n\nconst connector = connect(mapState, mapDispatch)\ntype PropsFromRedux = ConnectedProps<typeof connector>\n\nclass AcceptList extends Component<PropsFromRedux & IProps, IState> {\n\n  state = {\n    loaded: false,\n    students: [],\n    enabled: false,\n    accepted: []\n  }\n\n  componentDidMount(): void {\n    StudentController.getStudents().then(students => this.setState({ students, loaded: true }));\n\n    DataMartController.getAcceptList().then(acceptList => {\n      this.setState({ accepted: acceptList.filter(x => x.accepted).map(x => x.student_login_id) });\n    });\n\n    const { course } = this.props;\n    if (course) {\n      this.setState({ enabled: course.accept_list });\n    }\n  }\n\n  isAccepted = (loginId: string) => {\n    return (this.state.accepted as string[]).includes(loginId);\n  }\n\n  render(): React.ReactNode {\n    const { loaded, students, enabled, accepted }: IState = this.state;\n\n    if (!loaded) {\n      return (\n        <div id={\"acceptList\"}>\n          <h2>Accept List</h2>\n          <div className={\"primaryContainer\"}>\n            <Loading small={true} />\n          </div>\n        </div>\n      )\n    }\n\n    return (\n      <div id={\"acceptList\"}>\n        <h2>Accept List</h2>\n\n        <div className={\"primaryContainer\"}>\n          <span>\n            <Switch\n              checkedChildren={<CheckOutlined />}\n              unCheckedChildren={<CloseOutlined />}\n              checked={enabled}\n              onChange={val => {\n                AppController.updateAcceptList(val).then(e =>\n                  this.setState({ enabled: e }, () => this.props.loadCourse()));\n              }}\n            />\n            &nbsp;\n            If enabled only the students with explicit access may use the application. When disabled all enrolled students are able to use the application.\n          </span>\n\n          <Divider />\n\n          <span>\n            Accepted: { accepted.length } / { students.length } <small>({Math.round((accepted.length / students.length) * 100)}%)</small>\n          </span>\n\n          <br />\n\n          <Space>\n            <Button disabled={!enabled}>Select all</Button>\n            <Button disabled={!enabled}>Deselect all</Button>\n            <Button disabled={!enabled}\n                    onClick={() => {\n                      Swal.fire({\n                        title: 'Percentage of students to accept',\n                        input: 'number',\n                        inputAttributes: {\n                          autocapitalize: 'off'\n                        },\n                        showCancelButton: true,\n                        confirmButtonText: 'Randomize',\n                        showLoaderOnConfirm: true,\n                        preConfirm: (percentage) => {\n                          const _p = parseInt(percentage);\n\n                          if (_p < 10) {\n                            return Swal.showValidationMessage(\n                              `The acceptance percentage must be above 10%!`\n                            )\n                          }\n\n                          if (_p > 100) {\n                            return Swal.showValidationMessage(\n                              `Percentages can't exceed 100%.`\n                            )\n                          }\n                        },\n                        allowOutsideClick: () => !Swal.isLoading()\n                      }).then((result) => {\n                        if (result.isConfirmed) {\n                          const percentage = parseInt(result.value as unknown as string);\n                          const n = Math.ceil(students.length * (percentage / 100));\n                          const _a = students.sort(() => 0.5 - Math.random()).slice(0, n);\n                          this.setState({ accepted: _a.map((s: CanvasStudent) => s.login_id) });\n\n                          Swal.fire('Task completed!', '', 'success')\n                        }\n                      })\n                    }}\n            >\n              Random assign\n            </Button>\n            <Button className={\"successButtonStyle\"}\n                    disabled={!enabled}\n                    onClick={() => {\n                      DataMartController.createAcceptList(students.map(s => {\n                        return {\n                          student_login_id: s.login_id,\n                          accepted: accepted.includes(s.login_id)\n                        }\n                      })).then(list => {\n                        this.setState({\n                          accepted: list.filter(x => x.accepted).map(x => x.student_login_id)\n                        });\n                        Swal.fire('Configuration saved!', '', 'success')\n                      })\n                    }}\n            >\n              Save\n            </Button>\n          </Space>\n\n          <Divider />\n\n          <div style={{ opacity: enabled ? 1 : 0.5}}>\n            <Row>\n              { students.sort((a, b) => a.name.localeCompare(b.name)).map((student: CanvasStudent) => (\n                <Col xs={12} md={8} lg={6} xl={4}>\n                  <div className={`student ${this.isAccepted(student.login_id) && \"accepted\"}`}\n                       onClick={() => {\n                         this.isAccepted(student.login_id) ?\n                           this.setState({ accepted: accepted.filter(s => s !== student.login_id) }) :\n                           this.setState({ accepted: [...accepted, student.login_id] })\n                       }}\n                  >\n                    <span>{ student.name }</span>\n                    <br />\n                    <small>{ student.login_id }</small>\n                  </div>\n                </Col>\n              ))}\n            </Row>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default connector(AcceptList);","import React, { Component } from \"react\";\nimport {Button, InputNumber, Space, Switch} from \"antd\";\nimport {CheckOutlined, CloseOutlined} from \"@ant-design/icons\";\nimport {RootState} from \"../../../store\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport AppController from \"../../../api/controllers/app\";\nimport {IState} from \"./types\";\nimport {CourseActions} from \"../../../store/actions/course\";\n\nconst mapState = (state: RootState) => ({\n  course: state.course,\n});\n\nconst mapDispatch = {\n  loadCourse: () => CourseActions.loadCourse()\n}\n\nconst connector = connect(mapState, mapDispatch)\ntype PropsFromRedux = ConnectedProps<typeof connector>\n\nclass PeerGroups extends Component<PropsFromRedux, IState> {\n\n  state = {\n    loading: true,\n    enabled: false,\n    size: 0,\n    inputSize: 0,\n    inputEnabled: false,\n    buttonText: \"Save\"\n  }\n\n  componentDidMount(): void {\n    this.setState({ loading: true }, () => {\n      AppController.getCoursePeerGroups().then(result => {\n        this.setState({\n          loading: false,\n          enabled: result.personalized_peers,\n          inputEnabled: result.personalized_peers,\n          size: result.min_size,\n          inputSize: result.min_size\n        })\n      });\n    });\n  }\n\n  updatePeerGroups = (personalized: boolean = false) => {\n    this.setState({ loading: true }, () => {\n      AppController.updateCoursePeerGroup(\n        this.state.inputSize,\n        personalized ? true : this.state.inputEnabled\n      ).then(result => {\n        this.setState({\n          enabled: result.personalized_peers,\n          inputEnabled: result.personalized_peers,\n          size: result.min_size,\n          inputSize: result.min_size,\n          buttonText: \"Saved\"\n        }, () => {\n          setTimeout(() => this.setState({ buttonText: \"Save\", loading: false }), 1000)\n        });\n      });\n    });\n  }\n\n  render(): React.ReactNode {\n    return (\n      <div id={\"peerGroups\"}>\n        <h2>Peer Groups</h2>\n        <div className={\"primaryContainer\"}>\n          <Space direction={\"vertical\"}>\n            <div>\n              <span>\n                <Switch\n                  checkedChildren={<CheckOutlined />}\n                  unCheckedChildren={<CloseOutlined />}\n                  onClick={() => {\n                    this.updatePeerGroups(!this.state.inputEnabled);\n                    this.setState({ inputEnabled: !this.state.inputEnabled });\n                  }}\n                  checked={this.state.inputEnabled}\n                  loading={this.state.loading}\n                />\n                &nbsp;\n                Enable personalized peer groups.\n              </span>\n            </div>\n\n            <div>\n              Minimum group size: &nbsp;\n              <InputNumber min={2}\n                           size={\"large\"}\n                           value={this.state.inputSize}\n                           onChange={val => this.setState({ inputSize: val as number })}\n                           disabled={!this.state.enabled || this.state.loading} />\n            </div>\n\n            <Button className={\"successButtonStyle\"}\n                    onClick={() => this.updatePeerGroups()}\n                    loading={this.state.loading}\n                    disabled={this.state.loading}>\n              { this.state.buttonText }\n            </Button>\n          </Space>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default connector(PeerGroups);","import React, { Component } from \"react\";\nimport Admin from \"../../index\";\nimport {Divider, Space} from \"antd\";\nimport RequireConsent from \"../../../../components/settings/RequireConsent\";\nimport AcceptList from \"../../../../components/settings/AcceptList\";\nimport PeerGroups from \"../../../../components/settings/PeerGroups\";\n\nexport default class Settings extends Component {\n  render(): React.ReactNode {\n    return (\n      <Admin menuKey={\"settings\"}>\n        <h1>Settings</h1>\n        <Divider />\n\n        <Space direction={\"vertical\"} style={{width: '100%'}}>\n          <RequireConsent />\n          <AcceptList />\n          <PeerGroups />\n        </Space>\n      </Admin>\n    )\n  }\n}"],"sourceRoot":""}