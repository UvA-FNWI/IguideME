{"version":3,"sources":["api/controllers/student.ts","containers/AdminHeader/index.tsx","common/Admin/AdminMenu/index.tsx","common/Admin/index.tsx","components/visuals/GradesOverviewBar/helpers.ts","components/visuals/GradesOverviewBar/GradeBar/index.tsx","components/visuals/GradeScatter/helpers.ts","components/visuals/GradeScatter/index.tsx","common/Admin/sections/grades/GradeAnalyzer/helpers.ts","common/Admin/sections/grades/GradeAnalyzer/EntrySelect/index.tsx","components/visuals/GradesOverviewBar/GradeDistribution/index.tsx","components/visuals/GradesOverviewBar/index.tsx","common/Admin/sections/grades/GradeAnalyzer/index.tsx"],"names":["StudentController","debug","delay","MOCK_STUDENTS","this","client","get","then","response","data","MOCK_CONSENTS","MOCK_GOALS","Controller","connector","connect","state","course","user","AdminHeader","loaded","students","props","studentPickView","getStudents","setState","id","isLoading","options","sort","a","b","name","localeCompare","map","s","label","value","login_id","placeholder","onChange","e","setStudent","find","isClearable","styles","control","provided","backgroundColor","color","border","singleValue","course_name","Fragment","to","style","float","padding","title","shape","icon","renderInner","Component","AdminMenu","UserOutlined","selectedKeys","menuKey","Item","key","DatabaseOutlined","AppstoreOutlined","LaptopOutlined","TeamOutlined","SubMenu","TrophyOutlined","FundProjectionScreenOutlined","DotChartOutlined","CloudUploadOutlined","ClusterOutlined","NotificationOutlined","ControlOutlined","Admin","isAdmin","xs","className","children","withAdminRole","createLineData","grades","labels","toString","datasets","borderColor","pointRadius","createBarData","binary","filter","length","Math","floor","getLineOptions","maintainAspectRatio","legend","display","scales","xAxes","gridLines","ticks","yAxes","scaleLabel","labelString","getBarOptions","withLegend","stacked","GradeBar","height","defaultProps","createScatterData","mergedData","fill","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointHitRadius","p","x","grade1","y","grade2","user_login_id","borderWidth","getScatterOptions","tooltips","callbacks","tooltipItem","datasetIndex","index","suggestedMin","min","suggestedMax","max","GradeScatter","width","margin","textAlign","getGradeEntryOptions","tiles","entries","tile","tileEntries","tile_id","EntrySelect","span","setEntryOne","undefined","setEntryTwo","compute","require","GradeDistribution","size","round","mean","g","GradesOverviewBar","GradeAnalyzer","entryOne","entryTwo","allSubmissions","submissionsOne","submissionsTwo","allEntries","update","TileController","getEntrySubmissions","getTiles","getTileEntries","push","getAllSubmissions","stack1","stack2","users","Set","Array","from","u","grade","mergeData","gutter","md","pcorr","d","parseFloat","chi","type","TabPane","tab"],"mappings":"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","file":"static/js/23.40077aa5.chunk.js","sourcesContent":["import { debug } from \"../../config/config\";\nimport Controller from \"../controller\";\nimport {CanvasStudent} from \"../../models/canvas/Student\";\nimport {ConsentData} from \"../../models/app/ConsentData\";\nimport {GoalData} from \"../../models/app/GoalData\";\nimport {MOCK_STUDENTS, MOCK_CONSENTS, MOCK_GOALS} from \"../../mocks/students\";\nimport {delay} from \"../../utils/mockRequest\";\n\nexport default class StudentController extends Controller {\n\n  static getStudents(): Promise<CanvasStudent[]> {\n    if (debug()) return delay(MOCK_STUDENTS);\n\n    return this.client.get(\n      `students`\n    ).then(response => response.data);\n  }\n\n  static getConsents(): Promise<ConsentData[]> {\n    if (debug()) return delay(MOCK_CONSENTS);\n\n    return this.client.get(\n      `consents`\n    ).then(response => response.data);\n\n  }\n  static getGoalgrades(): Promise<GoalData[]> {\n    if (debug()) return delay(MOCK_GOALS);\n\n    return this.client.get(\n      `goal-grades`\n    ).then(response => response.data);\n  }\n}","import React, { Component } from \"react\";\nimport Select from \"react-select\";\nimport {Button, Tooltip} from \"antd\";\nimport {SyncOutlined} from \"@ant-design/icons\";\nimport { Link } from \"react-router-dom\";\nimport {IProps, IState} from \"./types\";\nimport StudentController from \"../../api/controllers/student\";\nimport {CanvasStudent} from \"../../models/canvas/Student\";\nimport {debug} from \"../../config/config\";\nimport {RootState} from \"../../store\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport \"./style.scss\";\n\nconst mapState = (state: RootState) => ({\n  course: state.course,\n  user: state.user\n});\n\nconst connector = connect(mapState);\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\ntype Props = IProps & PropsFromRedux;\n\nclass AdminHeader extends Component<Props, IState> {\n\n  state = {\n    loaded: false,\n    students: []\n  }\n\n  componentDidMount(): void {\n    const { studentPickView } = this.props;\n\n    if (studentPickView) {\n      StudentController.getStudents().then(students => this.setState({ students, loaded: true }));\n    }\n\n    this.setState({ loaded: true });\n  }\n\n  renderInner(): React.ReactNode {\n    if (this.props.studentPickView) {\n      const { students, loaded } = this.state;\n      return (\n        <Select id={\"studentPicker\"}\n                isLoading={!loaded}\n                options={students.sort(\n                  (a: CanvasStudent, b: CanvasStudent) => a.name.localeCompare(b.name)\n                ).map((s: CanvasStudent) => ({ label: s.name, value: s.login_id}))}\n                placeholder={\"Choose a student\"}\n                onChange={(e) => this.props.setStudent!(\n                  e ? students.find((s: CanvasStudent) => s.login_id === e!.value)! : null\n                )}\n                isClearable={true}\n                styles={{\n                  control: (provided, state) => ({\n                    ...provided,\n                    backgroundColor: 'transparent',\n                    color: 'white',\n                    border: '1px solid white'\n                  }),\n                  singleValue: (provided, state) => {\n                    return {...provided, color: 'white'};\n                  }\n                }}\n        />\n      );\n    }\n\n    return (\n      <div id={\"inner\"}>\n        <h2>{ this.props.course ? this.props.course.course_name : \"Loading course...\" }</h2>\n      </div>\n    );\n  }\n\n  render(): React.ReactNode {\n    return (\n      <React.Fragment>\n        <div id={\"adminHeader\"}>\n          { this.props.studentPickView ?\n            <Link to={'/admin'} style={{ float: 'right' }}>\n              <h3>Admin Panel</h3>\n            </Link> :\n            <div style={{float: 'right', padding: 20}}>\n              <Tooltip title={\"Reload data\"}>\n                <Button id={\"reload\"}\n                        shape=\"circle\"\n                        style={{backgroundColor: 'rgba(255, 255, 255, 0.5)', color: 'white'}}\n                        icon={<SyncOutlined />} />\n              </Tooltip>\n            </div>\n          }\n\n          <div id={\"navbarContent\"}>\n            <div id={\"brand\"}>\n              <Link to={'/'}>\n                <h1>IGuideME</h1>\n              </Link>\n            </div>\n\n            { this.renderInner() }\n          </div>\n        </div>\n        { debug() &&\n          (<div id={\"debugNotice\"}>\n            Application is running in <strong>demo</strong> mode. Changes will not be saved!\n          </div>)\n        }\n      </React.Fragment>\n    );\n  }\n}\n\nexport default connector(AdminHeader);","import React, { Component } from \"react\";\nimport {\n    AppstoreOutlined,\n    ControlOutlined,\n    CloudUploadOutlined,\n    ClusterOutlined,\n    DotChartOutlined,\n    FundProjectionScreenOutlined,\n    LaptopOutlined,\n    TrophyOutlined,\n    NotificationOutlined,\n    DatabaseOutlined,\n    UserOutlined,\n    TeamOutlined\n} from \"@ant-design/icons\";\nimport { Menu } from \"antd\";\nimport { Link } from \"react-router-dom\";\nimport \"./style.scss\";\nimport { RootState } from \"../../../store\";\nimport { connect, ConnectedProps } from \"react-redux\";\n\nconst mapState = (state: RootState) => ({\n    user: state.user\n});\n\nconst connector = connect(mapState)\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\ntype Props = { menuKey: string } & PropsFromRedux;\n\nclass AdminMenu extends Component<Props> {\n\n    render(): React.ReactNode {\n        const { user } = this.props;\n\n        return (\n            <div id={\"adminMenu\"}>\n                <div id={\"user\"}>\n                    <h3>{user ? user.name : \"Loading profile...\"}</h3>\n                    <strong><UserOutlined /> Instructor</strong>\n                </div>\n\n                <Menu selectedKeys={[this.props.menuKey]}>\n                    <Menu.Item key={\"datamart\"} icon={<DatabaseOutlined />}>\n                        <Link to={'/admin'}>\n                            Datamart\n            </Link>\n                    </Menu.Item>\n\n                    <Menu.Item key={\"tiles\"} icon={<AppstoreOutlined />}>\n                        <Link to={'/admin/tiles'}>\n                            Tiles\n            </Link>\n                    </Menu.Item>\n\n                    <Menu.Item key={\"dashboard\"} icon={<LaptopOutlined />}>\n                        <Link to={'/admin/dashboard'}>\n                            Dashboard\n            </Link>\n                    </Menu.Item>\n\n                    <Menu.Item key={\"studentOverview\"} icon={<TeamOutlined />}>\n                        <Link to={'/admin/student-overview'}>\n                            Student Overview\n            </Link>\n                    </Menu.Item>\n                    <Menu.SubMenu key={\"submenu\"} icon={<TrophyOutlined />} title={\"Grades\"}>\n                        <Menu.Item key={\"gradePredictorOld\"} icon={<FundProjectionScreenOutlined />}>\n                            <Link to={'/admin/grade-predictor-old'}>\n                                Old Predictor\n              </Link>\n                        </Menu.Item>\n                        <Menu.Item key={\"gradePredictor\"} icon={<FundProjectionScreenOutlined />}>\n                            <Link to={'/admin/grade-predictor'}>\n                                Predictor\n              </Link>\n                        </Menu.Item>\n                        <Menu.Item key={\"gradeAnalyzer\"} icon={<DotChartOutlined />}>\n                            <Link to={'/admin/grade-analyzer'}>\n                                Analyzer\n              </Link>\n                        </Menu.Item>\n                    </Menu.SubMenu>\n                    <Menu.Item key={\"dataWizard\"} icon={<CloudUploadOutlined />}>\n                        <Link to={'/admin/data-wizard'}>\n                            Data Wizard\n            </Link>\n                    </Menu.Item>\n                    <Menu.Item key={\"analytics\"} icon={<ClusterOutlined />}>\n                        <Link to={'/admin/analytics'}>\n                            Analytics\n            </Link>\n                    </Menu.Item>\n                    <Menu.Item key={\"notificationCentre\"} icon={<NotificationOutlined />}>\n                        <Link to={'/admin/notification-centre'}>\n                            Notification Centre\n            </Link>\n                    </Menu.Item>\n                    <Menu.Item key={\"settings\"} icon={<ControlOutlined />}>\n                        <Link to={'/admin/settings'}>\n                            Settings\n            </Link>\n                    </Menu.Item>\n                </Menu>\n            </div>\n        )\n    }\n}\n\nexport default connector(AdminMenu);\n","import React, { Component } from \"react\";\nimport { withAdminRole } from \"../../hoc/withAdminRole\";\nimport AdminHeader from \"../../containers/AdminHeader\";\nimport { Redirect } from \"react-router-dom\";\nimport { Col, Row } from \"antd\";\nimport AdminMenu from \"./AdminMenu\";\nimport \"./style.scss\";\n\nclass Admin extends Component<any> {\n\n  render(): React.ReactNode {\n    const { isAdmin, menuKey } = this.props;\n    if (!isAdmin) return (<Redirect to={'/'} />);\n\n    return (\n      <div id={\"admin\"}>\n        <AdminHeader />\n        <Row>\n          <Col xs={4}>\n            <AdminMenu menuKey={menuKey} />\n          </Col>\n          <Col xs={20} id={'wrapper'} className={`${ menuKey !== \"settings\" && \"noOverflow\"}`}>\n            { this.props.children }\n          </Col>\n        </Row>\n      </div>\n    )\n  }\n}\n\nexport default withAdminRole(Admin);","export const createLineData = (grades: number[]) => {\n  return {\n    labels: grades.sort((a, b) =>\n      a - b).map(s => s.toString()),\n    datasets: [\n      {\n        label: \"Grades\",\n        borderColor: \"rgb(90, 50, 255)\",\n        backgroundColor: \"rgba(90, 50, 255, 0.4)\",\n        pointRadius: 0,\n        data: grades.sort((a, b) =>\n          a - b)\n      }\n    ]\n  }\n}\n\nexport const createBarData = (grades: number[], binary: boolean) => {\n  return {\n    labels: binary ? ['0', '1'] : ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10'],\n    datasets: [{\n      label: \"Failed\",\n      backgroundColor: \"rgb(255,110,90)\",\n      data: binary ?\n        [\n          grades.filter(s => s === 0).length,\n          0,\n        ] : [\n        grades.filter(s => Math.floor(s) === 0).length,\n        grades.filter(s => Math.floor(s) === 1).length,\n        grades.filter(s => Math.floor(s) === 2).length,\n        grades.filter(s => Math.floor(s) === 3).length,\n        grades.filter(s => Math.floor(s) === 4).length,\n        grades.filter(s => Math.floor(s) === 5 && s < 5.5).length,\n        0,\n        0,\n        0,\n        0,\n        0\n      ]\n    }, {\n      label: \"Passed\",\n      backgroundColor: \"rgb(0, 185, 125)\",\n      data: binary ?\n        [\n          0,\n          grades.filter(s => s === 1).length,\n        ] : [\n        0,\n        0,\n        0,\n        0,\n        0,\n        grades.filter(s => Math.floor(s) === 5 && s >= 5.5).length,\n        grades.filter(s => Math.floor(s) === 6).length,\n        grades.filter(s => Math.floor(s) === 7).length,\n        grades.filter(s => Math.floor(s) === 8).length,\n        grades.filter(s => Math.floor(s) === 9).length,\n        grades.filter(s => Math.floor(s) === 10).length,\n      ]\n    }]\n  }\n}\n\nexport const getLineOptions = () => {\n  return {\n    maintainAspectRatio: false,\n    legend: {\n      display: false\n    },\n    scales: {\n      xAxes: [{\n        gridLines : {\n          display : false\n        },\n        ticks: {\n          display: false\n        }\n      }],\n      yAxes: [{\n        scaleLabel: {\n          display: true,\n          labelString: 'Grade'\n        }\n      }]\n    }\n  }\n}\n\nexport const getBarOptions = (withLegend: boolean) => {\n  return {\n    maintainAspectRatio: false,\n    legend: {\n      display: false\n    },\n    scales: {\n      xAxes: [{\n        gridLines : {\n          display : false\n        },\n        scaleLabel: {\n          display: withLegend,\n          labelString: 'Grade'\n        },\n        stacked: true,\n      }],\n      yAxes: [{\n        scaleLabel: {\n          display: withLegend,\n          labelString: '# of students'\n        },\n        stacked: true\n      }]\n    }\n  }\n}","import React, { Component } from \"react\";\nimport {createBarData, getBarOptions} from \"../helpers\";\nimport {Bar} from \"react-chartjs-2\";\n\nexport default class GradeBar extends Component<{\n  grades: number[],\n  binary: boolean,\n  height: number,\n  withLegend: boolean\n}> {\n\n  static defaultProps = {\n    height: 300,\n    withLegend: true\n  }\n\n  render(): React.ReactNode {\n    const { grades, binary, height, withLegend } = this.props;\n\n    return (\n      <div>\n        <Bar height={height} data={createBarData(grades, binary)} options={getBarOptions(withLegend)} />\n      </div>\n    );\n  }\n}","import { ChartData } from \"react-chartjs-2\";\nimport {MergedData} from \"./types\";\n\nexport const createScatterData = (mergedData: MergedData[]) => {\n  return {\n    datasets: [\n      {\n        label: 'Quiz 1 vs. Quiz 2',\n        fill: true,\n        backgroundColor: 'rgba(90, 50, 255, 0.4)',\n        pointBorderColor: 'rgb(90, 50, 255)',\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 2,\n        pointHoverRadius: 8,\n        pointHoverBackgroundColor: 'rgb(90, 50, 255)',\n        pointHoverBorderColor: 'rgba(90, 50, 255, 0.8)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 5,\n        pointHitRadius: 7,\n        data: mergedData.map((p: any) => ({ x: p.grade1, y: p.grade2, name: p.user_login_id })),\n        borderWidth: 4\n      }\n    ]\n  }\n}\n\nexport const getScatterOptions = (mergedData: MergedData[]) => {\n  return {\n    maintainAspectRatio: false,\n    legend: {\n      display: false\n    },\n    tooltips: {\n      callbacks: {\n        label: (tooltipItem: any, data: ChartData<any>) => {\n          return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index].name;\n        }\n      }\n    },\n    scales: {\n      yAxes: [{\n        scaleLabel: {\n          display: true,\n          labelString: 'Quiz 1'\n        },\n        ticks: {\n          suggestedMin: Math.min(...mergedData.map((p: any) => p.grade1)),\n          suggestedMax: Math.max(...mergedData.map((p: any) => p.grade1)),\n        }\n      }],\n      xAxes: [{\n        scaleLabel: {\n          display: true,\n          labelString: 'Quiz 2'\n        },\n        ticks: {\n          suggestedMin: Math.min(...mergedData.map((p: any) => p.grade2)),\n          suggestedMax: Math.max(...mergedData.map((p: any) => p.grade2)),\n        }\n      }]\n    }\n  }\n}","import React, { Component } from \"react\";\nimport { Scatter } from \"react-chartjs-2\";\nimport { createScatterData, getScatterOptions } from \"./helpers\";\nimport { IProps } from \"./types\";\n\nexport default class GradeScatter extends Component<IProps> {\n\n  render(): React.ReactNode {\n    const { mergedData }: IProps = this.props;\n\n    return (\n      <div style={{\n        width: '100%', height: '30vw', padding: 20, margin: '0 auto', textAlign: 'center'\n      }}>\n        <Scatter data={createScatterData(mergedData)} options={getScatterOptions(mergedData)} />\n      </div>\n    );\n  }\n}","import {Tile, TileEntry, TileEntrySubmission} from \"../../../../../models/app/Tile\";\n\nexport const getGradeEntryOptions = (tiles: Tile[], entries: TileEntry[]) => {\n\n  return tiles.map(tile => {\n    const tileEntries = entries.filter(e => e.tile_id === tile.id);\n\n    return {\n      label: tile.title,\n      options: tileEntries.map(e => ({\n        label: e.title, value: e.id\n      }))\n    }\n  });\n}\n\nexport const mergeData = (stack1: TileEntrySubmission[], stack2: TileEntrySubmission[]) => {\n  const users = new Set([...stack1.map(s => s.user_login_id), ...stack2.map(s => s.user_login_id)]);\n\n  return Array.from(users).filter(u => (\n    stack1.find(s => s.user_login_id === u) &&\n      stack2.find(s => s.user_login_id === u)\n    )\n  ).map(u => ({\n    user_login_id: u,\n    grade1: stack1.find(s => s.user_login_id === u)!.grade,\n    grade2: stack2.find(s => s.user_login_id === u)!.grade\n  }));\n}","import React, { Component } from \"react\";\nimport {Col, Row} from \"antd\";\nimport Select from \"react-select\";\nimport { getGradeEntryOptions } from \"../helpers\";\nimport { IProps } from \"./types\";\n\nexport default class EntrySelect extends Component<IProps> {\n\n  render(): React.ReactNode {\n    const { tiles, entries } = this.props;\n    return (\n      <Row style={{width: '100%'}}>\n        <Col span={10}>\n          <Select isLoading={true}\n                  options={getGradeEntryOptions(tiles, entries)}\n                  onChange={(e: any) => this.props.setEntryOne(e ? e.value : undefined)}\n          />\n        </Col>\n        <Col span={4} style={{textAlign: 'center'}}>\n          vs\n        </Col>\n        <Col span={10}>\n          <Select options={getGradeEntryOptions(tiles, entries)}\n                  onChange={(e: any) => this.props.setEntryTwo(e ? e.value : undefined)}\n          />\n        </Col>\n      </Row>\n\n    )\n  }\n}","import React, { Component } from \"react\";\nimport { Space } from \"antd\";\nimport \"./style.scss\";\n\nconst compute = require( 'compute.io' );\n\nexport default class GradeDistribution extends Component<{ grades: number[] }> {\n  render(): React.ReactNode {\n    const { grades } = this.props;\n    return (\n      <div className={\"gradeDistribution\"}>\n        <Space size={20}>\n          <div className={\"item\"}>\n            <h3>{ Math.min(...grades)}</h3>\n            Minimum\n          </div>\n\n          <div className={\"item avg\"}>\n            <h3>{ Math.round(compute.mean(grades) * 100) / 100 }</h3>\n            Average\n          </div>\n\n          <div className={\"item\"}>\n            <h3>{ Math.max(...grades)}</h3>\n            Maximum\n          </div>\n\n          <div className={\"item\"}>\n            <h3>{ Math.round((grades.filter(g => g >= 5.5).length / grades.length) * 10000) / 100 }%</h3>\n            Pass Rate\n          </div>\n        </Space>\n      </div>\n    )\n  }\n}","import React, { Component } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { createLineData, getLineOptions} from \"./helpers\";\nimport GradeDistribution from \"./GradeDistribution\";\nimport GradeBar from \"./GradeBar\";\n\nexport default class GradesOverviewBar extends Component<{\n  binary: boolean,\n  title: string,\n  grades: number[],\n}> {\n\n  render(): React.ReactNode {\n    const { binary, grades, title } = this.props;\n\n    return (\n        <div>\n          <h2>{ title }</h2>\n          <GradeDistribution grades={grades} />\n          <GradeBar height={150} binary={binary} grades={grades} />\n          <div style={{ height: 150 }}>\n            <Line data={createLineData(grades)} options={getLineOptions()} />\n          </div>\n      </div>\n    )\n  }\n}","import React, { Component } from \"react\";\nimport Admin from \"../../../index\";\nimport {Divider, Row, Col, Statistic, Tabs} from \"antd\";\nimport GradeScatter from \"../../../../../components/visuals/GradeScatter\";\nimport EntrySelect from \"./EntrySelect\";\nimport GradeBar from \"../../../../../components/visuals/GradesOverviewBar\";\nimport { IProps, IState } from \"./types\";\nimport TileController from \"../../../../../api/controllers/tile\";\nimport {mergeData} from \"./helpers\";\nimport {TileEntry, TileEntrySubmission} from \"../../../../../models/app/Tile\";\n\nconst compute = require( 'compute.io' );\n\nexport default class GradeAnalyzer extends Component<IProps, IState> {\n\n  state = {\n    tiles: [],\n    entryOne: undefined, entryTwo: undefined,\n    allSubmissions: [], submissionsOne: [], submissionsTwo: [], allEntries: []\n  }\n\n  componentDidMount(): void {\n    TileController.getTiles().then(async tiles => {\n      let allEntries: TileEntry[] = [];\n\n      for (const tile of tiles) {\n        await TileController.getTileEntries(tile.id).then(entries => allEntries.push(...entries));\n      }\n\n      TileController.getAllSubmissions().then(allSubmissions =>\n        this.setState({ allSubmissions, allEntries, tiles })\n      );\n    });\n  }\n\n  update = () => {\n    const { entryOne, entryTwo } = this.state;\n\n    if (!entryOne || !entryTwo) {\n      return;\n    }\n\n    TileController.getEntrySubmissions(entryOne!).then((submissionsOne) => {\n      TileController.getEntrySubmissions(entryTwo!).then((submissionsTwo) => {\n        this.setState({ submissionsOne, submissionsTwo });\n      });\n    });\n  }\n\n  render(): React.ReactNode {\n    const {\n      entryOne,\n      entryTwo,\n      submissionsOne,\n      submissionsTwo,\n      allSubmissions,\n      allEntries,\n      tiles\n    }: IState = this.state;\n    void allSubmissions; // discard value\n\n    const data = mergeData(submissionsOne, submissionsTwo);\n\n    return (\n      <Admin menuKey={\"gradeAnalyzer\"}>\n        <h1>Grade Analyzer</h1>\n        <Divider />\n\n        <EntrySelect\n          setEntryOne={(id) => this.setState({ entryOne: id }, () => this.update())}\n          setEntryTwo={(id) => this.setState({ entryTwo: id }, () => this.update())}\n          tiles={tiles}\n          entries={allEntries}\n        />\n\n        <Divider />\n\n        { (data.length > 0) ?\n          <Row gutter={[50, 10]}>\n            <Col xs={24} md={24}>\n              <div className={\"primaryContainer\"}>\n                <Row>\n                  <Col xs={24}>\n                    <Row gutter={10}>\n                      <Col>\n                        <Statistic\n                          title={\"Correlation\"}\n                          value={Math.round(compute.pcorr(\n                            data.map(d => parseFloat(d.grade1)),\n                            data.map(d => parseFloat(d.grade2))\n                          )[0][1] * 1000) / 1000}\n                        />\n                      </Col>\n                      <Col>\n                        <Statistic\n                          title={\"Chi-square dist.\"}\n                          value={compute.chi}\n                        />\n                      </Col>\n                      <Col>\n                        <Statistic\n                          title={\"Sample size\"}\n                          value={data.length}\n                        />\n                      </Col>\n                    </Row>\n                  </Col>\n\n                  <Col xs={24}>\n                    <Tabs type=\"card\">\n                      <Tabs.TabPane tab={\"Grade correlation\"} key=\"1\">\n                        <GradeScatter mergedData={data} />\n                      </Tabs.TabPane>\n                      <Tabs.TabPane tab={\"Statistics\"} key=\"2\">\n                        <Row gutter={[50, 10]}>\n                          <Col xs={24} md={12}>\n                            <GradeBar binary={false}\n                                      title={allEntries.find(e => e.id === entryOne)?.title || \"\"}\n                                      grades={submissionsOne.map((s: TileEntrySubmission) => parseFloat(s.grade))} />\n                          </Col>\n\n                          <Col xs={24} md={12}>\n                            <GradeBar binary={false}\n                                      title={allEntries.find(e => e.id === entryTwo)?.title || \"\"}\n                                      grades={submissionsTwo.map((s: TileEntrySubmission) => parseFloat(s.grade))} />\n                          </Col>\n                        </Row>\n                      </Tabs.TabPane>\n                    </Tabs>\n                  </Col>\n                </Row>\n              </div>\n            </Col>\n          </Row> : <span>Waiting for selection</span>\n        }\n      </Admin>\n    )\n  }\n}"],"sourceRoot":""}