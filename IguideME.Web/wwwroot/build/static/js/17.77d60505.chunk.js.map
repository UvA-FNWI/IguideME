{"version":3,"sources":["api/controllers/student.ts","containers/AdminHeader/index.tsx","components/StudentDashboard/TileGroup/Tile/PeerComparison/index.tsx","utils/grades.ts","components/StudentDashboard/TileGroup/Tile/helpers.ts","containers/GradeStatistic/index.tsx","components/StudentDashboard/TileGroup/Tile/index.tsx","components/StudentDashboard/TileGroup/index.tsx","components/StudentDashboard/TileDetail/BinaryGrades/index.tsx","components/StudentDashboard/TileDetail/EntriesList/EntryItem/index.tsx","components/StudentDashboard/TileDetail/EntriesList/index.tsx","components/StudentDashboard/TileDetail/GradePrediction/index.tsx","components/StudentDashboard/TileDetail/DiscussionsList/index.tsx","components/StudentDashboard/TileDetail/LearningOutcomes/index.tsx","components/StudentDashboard/TileDetail/index.tsx","components/StudentDashboard/TileRadar/helpers.ts","components/StudentDashboard/TileRadar/index.tsx","components/StudentDashboard/UserProfile/index.tsx","components/StudentDashboard/index.tsx","components/AdminDashboard/index.tsx","common/App/index.tsx"],"names":["StudentController","debug","delay","MOCK_STUDENTS","this","client","get","then","response","data","Controller","connector","connect","state","course","user","AdminHeader","loaded","students","props","studentPickView","getStudents","setState","id","isLoading","options","sort","a","b","name","localeCompare","map","s","label","value","login_id","placeholder","onChange","e","setStudent","find","isClearable","styles","control","provided","backgroundColor","color","border","singleValue","course_name","Fragment","to","style","float","padding","title","shape","icon","renderInner","Component","PeerComparison","peerGrades","round","val","Math","className","min","avg","max","compute","require","getAverageGrade","submissions","precision","grades","average","length","mean","getProgression","tile","entries","content","filter","parseFloat","grade","GradeStatistic","loading","passed","setup","prefix","LikeOutlined","WarningOutlined","Tile","getHeader","tileEntries","userGrades","discussions","learningOutcomes","type","textAlign","success","lo","toString","percent","onClick","window","dispatchEvent","CustomEvent","detail","direction","width","pg","tileID","TileGroup","tileGroup","tiles","student","tilesGradeSummary","position","t","tile_id","x","includes","entry_id","tgs","key","BinaryGrades","gutter","slice","entry","xs","md","lg","CheckOutlined","EntryItem","tileEntry","submission","meta","JSON","parse","margin","EntriesList","graph_view","labels","i","datasets","fill","minHeight","legend","display","sm","GradePrediction","predictions","store","getState","maxComponents","errors","Array","from","keys","sortedPredictions","graded_components","scales","xAxes","yAxes","ticks","beginAtZero","canvas","ctx","getContext","gradient1","createLinearGradient","addColorStop","gradient2","borderColor","hoverBorderColor","tension","sp","yAxisID","xAxisID","pointRadius","DiscussionsList","d","posted_at","dangerouslySetInnerHTML","__html","message","LearningOutcomes","maxWidth","goal","Ribbon","text","size","requirements","r","exp","formatExpression","expression","TileDetail","ArrowLeftOutlined","undefined","genPolygonPoints","getScale","getValue","step","PI","points","y","pointString","reduce","res","_","xVal","sin","yVal","cos","getDescriptionAnchor","silver","orange","TileRadar","monitorWidth","refreshMode","refreshRate","xMax","yMax","radius","genYScale","scaleLinear","range","domain","_peerGrades","zeroPoint","degrees","angle","genAngles","Point","genPoints","polygonPoints","n","peerPoints","target","p","height","rx","Group","top","left","Line","stroke","opacity","fillOpacity","strokeWidth","transition","zIndex","point","cx","cy","split","j","textAnchor","whiteSpace","String","UserProfile","_isMounted","notifications","loadNotifications","DataMartController","getNotifications","_getTileTitle","nextProps","nextContext","outperforming","status","closing","moreEffort","TrophyOutlined","boxSizing","paddingLeft","RiseOutlined","mapDispatch","loadPredictions","DataMartActions","dashboardColumns","tileGroups","StudentDashboard","userSubmissions","displayTile","viewType","propPredictions","goals","TileController","getDiscussions","discussion_result","push","getUserGoals","g","goal_result","getSubmissions","toLowerCase","getPeerResults","catch","addEventListener","event","payload","buttonStyle","Button","RadarChartOutlined","AppstoreOutlined","c","container_width","tg","column_id","group_id","Loading","small","AdminDashboard","SmileOutlined","App","goalGrade","isAdmin","UserController","getUser","getGoalGrade","withConsent","withAdminRole"],"mappings":"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","file":"static/js/17.77d60505.chunk.js","sourcesContent":["import { debug } from \"../../config/config\";\nimport Controller from \"../controller\";\nimport {CanvasStudent} from \"../../models/canvas/Student\";\nimport {MOCK_STUDENTS} from \"../../mocks/students\";\nimport {delay} from \"../../utils/mockRequest\";\n\nexport default class StudentController extends Controller {\n\n  static getStudents(): Promise<CanvasStudent[]> {\n    if (debug()) return delay(MOCK_STUDENTS);\n\n    return this.client.get(\n      `students`\n    ).then(response => response.data);\n  }\n}","import React, { Component } from \"react\";\nimport Select from \"react-select\";\nimport {Button, Tooltip} from \"antd\";\nimport {SyncOutlined} from \"@ant-design/icons\";\nimport { Link } from \"react-router-dom\";\nimport {IProps, IState} from \"./types\";\nimport StudentController from \"../../api/controllers/student\";\nimport {CanvasStudent} from \"../../models/canvas/Student\";\nimport {debug} from \"../../config/config\";\nimport {RootState} from \"../../store\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport \"./style.scss\";\n\nconst mapState = (state: RootState) => ({\n  course: state.course,\n  user: state.user\n});\n\nconst connector = connect(mapState);\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\ntype Props = IProps & PropsFromRedux;\n\nclass AdminHeader extends Component<Props, IState> {\n\n  state = {\n    loaded: false,\n    students: []\n  }\n\n  componentDidMount(): void {\n    const { studentPickView } = this.props;\n\n    if (studentPickView) {\n      StudentController.getStudents().then(students => this.setState({ students, loaded: true }));\n    }\n\n    this.setState({ loaded: true });\n  }\n\n  renderInner(): React.ReactNode {\n    if (this.props.studentPickView) {\n      const { students, loaded } = this.state;\n      return (\n        <Select id={\"studentPicker\"}\n                isLoading={!loaded}\n                options={students.sort(\n                  (a: CanvasStudent, b: CanvasStudent) => a.name.localeCompare(b.name)\n                ).map((s: CanvasStudent) => ({ label: s.name, value: s.login_id}))}\n                placeholder={\"Choose a student\"}\n                onChange={(e) => this.props.setStudent!(\n                  e ? students.find((s: CanvasStudent) => s.login_id === e!.value)! : null\n                )}\n                isClearable={true}\n                styles={{\n                  control: (provided, state) => ({\n                    ...provided,\n                    backgroundColor: 'transparent',\n                    color: 'white',\n                    border: '1px solid white'\n                  }),\n                  singleValue: (provided, state) => {\n                    return {...provided, color: 'white'};\n                  }\n                }}\n        />\n      );\n    }\n\n    return (\n      <div id={\"inner\"}>\n        <h2>{ this.props.course ? this.props.course.course_name : \"Loading course...\" }</h2>\n      </div>\n    );\n  }\n\n  render(): React.ReactNode {\n    return (\n      <React.Fragment>\n        <div id={\"adminHeader\"}>\n          { this.props.studentPickView ?\n            <Link to={'/admin'} style={{ float: 'right' }}>\n              <h3>Admin Panel</h3>\n            </Link> :\n            <div style={{float: 'right', padding: 20}}>\n              <Tooltip title={\"Reload data\"}>\n                <Button id={\"reload\"}\n                        shape=\"circle\"\n                        style={{backgroundColor: 'rgba(255, 255, 255, 0.5)', color: 'white'}}\n                        icon={<SyncOutlined />} />\n              </Tooltip>\n            </div>\n          }\n\n          <div id={\"navbarContent\"}>\n            <div id={\"brand\"}>\n              <Link to={'/'}>\n                <h1>IGuideME</h1>\n              </Link>\n            </div>\n\n            { this.renderInner() }\n          </div>\n        </div>\n        { debug() &&\n          (<div id={\"debugNotice\"}>\n            Application is running in <strong>demo</strong> mode. Changes will not be saved!\n          </div>)\n        }\n      </React.Fragment>\n    );\n  }\n}\n\nexport default connector(AdminHeader);","import React, { Component } from \"react\";\nimport \"./style.scss\";\nimport {PeerGrades} from \"../../../types\";\n\nexport default class PeerComparison extends Component<{peerGrades: PeerGrades | undefined}> {\n  render(): React.ReactNode {\n    const { peerGrades } = this.props;\n\n    const round = (val: number) => {\n      return Math.round(val * 100) / 100;\n    }\n\n    return (\n      <div className={\"peerComparison\"}>\n        <span className={\"title\"}>Peer Comparison</span>\n\n        { peerGrades ?\n          <div className={\"distribution\"}>\n            <div className={\"min\"}>\n              <small>min.</small>\n              <br />\n              { round(peerGrades.min) }\n            </div>\n\n            <div className={\"avg\"}>\n              <small>avg.</small>\n              <br />\n              { round(peerGrades.avg) }\n            </div>\n\n            <div className={\"max\"}>\n              <small>max.</small>\n              <br />\n              { round(peerGrades.max) }\n            </div>\n          </div> :\n          <p>Not available</p>\n        }\n      </div>\n    )\n  }\n}","import {TileEntrySubmission} from \"../models/app/Tile\";\nimport {TilesGradeSummary} from \"../components/StudentDashboard/types\";\nconst compute = require( 'compute.io' );\n\nexport const getAverageGrade = (submissions: TilesGradeSummary[],\n                                precision: number = 2): number | null => {\n  const grades = submissions.map(s => s.average);\n\n  if (grades.length === 0) return null;\n\n  return Math.round(compute.mean(grades) * (10 ** precision)) / (10 ** precision);\n}","import {Tile, TileEntry, TileEntrySubmission} from \"../../../../models/app/Tile\";\nimport {TilesGradeSummary} from \"../../types\";\n\nexport const getProgression = (tile: Tile, entries: TileEntry[], submissions: TileEntrySubmission[]): number => {\n  if (tile.content === \"BINARY\") {\n    return submissions.length > 0 ?\n      Math.round((\n        submissions.filter(s => parseFloat(s.grade) > .8).length /\n        entries.length\n      ) * 100) : 0;\n  }\n\n  return Math.round((submissions.length / entries.length) * 100);\n}","import React, { Component } from \"react\";\nimport {Statistic} from \"antd\";\nimport { WarningOutlined, LikeOutlined } from \"@ant-design/icons\";\nimport \"./style.scss\";\n\nexport default class GradeStatistic extends Component<\n  { grade: string },\n  { loading: boolean, passed: boolean }\n  > {\n\n  state = { loading: true, passed: false }\n\n  componentDidMount(): void {\n    this.setup();\n  }\n\n  setup = () => {\n    const { grade } = this.props;\n\n    this.setState({ loading: false, passed: parseFloat(grade) >= 5.5 });\n  }\n\n  render(): React.ReactNode {\n    const { loading, passed } = this.state;\n    const { grade } = this.props;\n\n    return (\n      <div className={\"gradeStatistic\"}>\n        <Statistic title={\"Grade\"}\n                   value={grade}\n                   loading={loading}\n                   prefix={passed ?\n                     <LikeOutlined className={\"pass\"} /> :\n                     <WarningOutlined  className={\"fail\"} />\n                   }\n        />\n      </div>\n    );\n  }\n}","import React, { Component } from \"react\";\nimport { Progress, Space } from \"antd\";\nimport PeerComparison from \"./PeerComparison\";\nimport {IProps, IState} from \"./types\";\nimport {getAverageGrade} from \"../../../../utils/grades\";\nimport {getProgression} from \"./helpers\";\nimport GradeStatistic from \"../../../../containers/GradeStatistic\";\nimport \"./style.scss\";\n\nexport default class Tile extends Component<IProps, IState> {\n\n  state = { loaded: false }\n\n  getHeader = () => {\n    const { tile, tileEntries, submissions, userGrades, discussions, learningOutcomes } = this.props;\n    const avg: number | null = getAverageGrade(userGrades);\n\n    switch (tile.type) {\n      case \"DISCUSSIONS\":\n      return (\n        <span style={{textAlign: 'center'}}>\n          <strong>{ discussions.length }</strong> discussion{discussions.length !== 1 && \"s\"}\n        </span>\n      );\n    }\n\n    switch (tile.content){\n        case \"LEARNING_OUTCOMES\":\n      const success = learningOutcomes.filter(lo => lo.success).length;\n      return (\n        <span style={{textAlign: 'center'}}>\n          <strong>{ success }<small>/{ learningOutcomes.length }</small></strong> completed\n        </span>\n      );\n        case \"PREDICTION\":\n      return <GradeStatistic grade={avg ? avg!.toString() : \"-\"} />;\n        case \"BINARY\":\n        case \"ENTRIES\":\n      return (\n        <>\n          { !!avg && <Progress percent={getProgression(tile, tileEntries, submissions)} /> }\n          <GradeStatistic grade={avg ? avg!.toString() : \"-\"} />\n        </>\n      );\n        default:\n        return null;\n    }\n  }\n\n  render(): React.ReactNode {\n    const { tile, peerGrades, userGrades } = this.props;\n    return (\n      <div className={\"tile\"}\n           onClick={() => {\n             window.dispatchEvent(new CustomEvent(\"selectTile\", { detail: { tile, userGrades } }))\n           }}\n      >\n        <div className={\"wrapper\"}>\n          <div className={\"content\"}>\n            <h2>{ tile.title }</h2>\n            <Space direction={\"vertical\"} style={{ width: '100%' }}>\n              { this.getHeader() }\n            </Space>\n          </div>\n\n          <PeerComparison peerGrades={peerGrades.find(pg => pg.tileID === tile.id)} />\n        </div>\n      </div>\n    )\n  }\n}\n","import React, { Component } from \"react\";\nimport Tile from \"./Tile\";\nimport { IProps } from \"./types\";\nimport \"./style.scss\";\n\nexport default class TileGroup extends Component<IProps> {\n\n  render(): React.ReactNode {\n    const {\n      tileGroup,\n      tileEntries,\n      tiles,\n      student,\n      tilesGradeSummary,\n      peerGrades,\n      submissions,\n      discussions,\n      learningOutcomes\n    } = this.props;\n\n    return (\n      <div className={`tileGroup`}>\n        <h2>{ tileGroup.title }</h2>\n\n        <div className={`tileWrapper`}>\n          { tiles.sort((a, b) => a.position - b.position).map(t => {\n            return (\n              <Tile tile={t}\n                    tileEntries={tileEntries.filter(e => e.tile_id === t.id)}\n                    discussions={discussions}\n                    student={student}\n                    submissions={submissions.filter(\n                      s => tileEntries.filter(e => e.tile_id === t.id).map(x => x.id)\n                        .includes(s.entry_id))}\n                    userGrades={tilesGradeSummary.filter(tgs => tgs.tile.id === t.id)}\n                    peerGrades={peerGrades.filter(pg => pg.tileID === t.id)}\n                    learningOutcomes={learningOutcomes}\n              key={t.id}/>\n            );\n          })}\n        </div>\n      </div>\n    )\n  }\n}\n","import React, { Component } from \"react\";\nimport { TileEntry, TileEntrySubmission } from \"../../../../models/app/Tile\";\nimport { Col, Row } from \"antd\";\nimport { CheckOutlined } from \"@ant-design/icons\";\nimport \"./style.scss\";\n\nexport default class BinaryGrades extends Component<{\n    submissions: TileEntrySubmission[],\n    tileEntries: TileEntry[]\n}> {\n    render(): React.ReactNode {\n        const { submissions, tileEntries } = this.props;\n\n        return (\n            <div id={\"binaryEntries\"}>\n                <Row gutter={[5, 5]}>\n                    {submissions.map(s => {\n                        const success = s.grade.slice(0, 1) !== \"0\";\n                        const entry = tileEntries.find(e => e.id === s.entry_id);\n\n                        return (\n                            <Col key={s.entry_id} xs={12} md={8} lg={6}>\n                                <div className={`entry ${success ? \"success\" : \"fail\"}`}>\n                                    <h2>{entry ? entry.title : null}</h2>\n                                    {success ?\n                                        <span><CheckOutlined /> Present</span> :\n                                        <span>Absent</span>}\n                                </div>\n                            </Col>\n                        );\n                    })}\n                </Row>\n            </div>\n        )\n    }\n}\n","import React, { Component } from \"react\";\nimport { TileEntry, TileEntrySubmission } from \"../../../../../models/app/Tile\";\nimport { Divider, Statistic, Table } from \"antd\";\nimport GradeStatistic from \"../../../../../containers/GradeStatistic\";\n\nexport default class EntryItem extends Component<{\n    submission: TileEntrySubmission,\n    tileEntry: TileEntry\n}> {\n    render(): React.ReactNode {\n        const { tileEntry, submission } = this.props;\n\n        // FIXME the check for type is done because when the mocks were made, no consideration was given to the type of meta. To remove this check, convert the meta objects in the mocks to JSON strings.\n        const meta = typeof submission.meta === \"string\" ? JSON.parse(submission.meta || \"{}\") : submission.meta || {};\n\n        return (\n            <div className={\"tileEntry\"}>\n                <h2>{tileEntry.title}</h2>\n                <Divider style={{ margin: '5px 0' }} />\n\n                <GradeStatistic grade={submission.grade} />\n\n                {/* TODO why and when is this visible to the user */}\n                { (/* hide meta */ false) && Object.keys(meta).length > 0 &&\n                    <div>\n                        <Table dataSource={Object.keys(meta).map((key, i) => ({\n                            key: i,\n                            label: key,\n                            value: meta[key]\n                        }))} columns={[\n                            {\n                                title: 'Key',\n                                dataIndex: 'label',\n                                key: 'label',\n                                width: '40%',\n                                ellipsis: true\n                            },\n                            {\n                                title: 'Value',\n                                dataIndex: 'value',\n                                key: 'value',\n                            }]} />\n                    </div>\n                }\n            </div>\n        )\n    }\n}\n","import React, { Component } from \"react\";\nimport {Tile, TileEntry, TileEntrySubmission} from \"../../../../models/app/Tile\";\nimport {Col, Row} from \"antd\";\nimport EntryItem from \"./EntryItem\";\nimport { ParentSize } from '@visx/responsive';\nimport {Bar} from \"react-chartjs-2\";\nimport \"./style.scss\";\nimport {CanvasDiscussion} from \"../../../../models/canvas/Discussion\";\n\nexport default class EntriesList extends Component<{\n  submissions: TileEntrySubmission[],\n  tileEntries: TileEntry[],\n  discussions: CanvasDiscussion[],\n  tile: Tile\n}> {\n  render(): React.ReactNode {\n    const { tile, tileEntries, submissions } = this.props;\n\n    if (tile.graph_view) {\n      const data = {\n        labels: submissions.map((s, i) => {\n          const entry = tileEntries.find(e => e.id === s.entry_id);\n          return entry?.title ?? \"???\";\n        }),\n        datasets: [\n          {\n            label: tile.title + \" grades\",\n            data: submissions.map(s => s.grade),\n            fill: false,\n            backgroundColor: \"rgba(75,192,192,1)\"\n          }\n        ]\n      };\n\n      return (\n        <div id={\"tileEntriesGraph\"} style={{minHeight: '60vh'}}>\n          <div>\n            <Bar options={{ legend: { display: false }}}\n                  width={500}\n                  data={data} />\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div id={\"tileEntriesList\"}>\n        <Row gutter={[10, 10]}>\n          { tileEntries.map(entry => {\n            const submission = submissions.find(s => s.entry_id === entry.id);\n            if (!submission) return null;\n\n            return (\n              <Col key={entry.id} xs={24} sm={12} md={8} lg={6} className={\"entryCol\"}>\n                <EntryItem submission={submission} tileEntry={entry} />\n              </Col>\n            )\n          })}\n        </Row>\n      </div>\n    )\n  }\n}\n","import React, { Component } from \"react\";\nimport {PredictedGrade} from \"../../../../models/app/PredictiveModel\";\nimport {Bar} from \"react-chartjs-2\";\nimport {TileEntry} from \"../../../../models/app/Tile\";\nimport \"./style.scss\";\nimport {store} from \"../../../../utils/configureStore\";\n\nexport default class GradePrediction extends Component<{\n  predictions: PredictedGrade[],\n  tileEntries: TileEntry[]\n}> {\n  render(): React.ReactNode {\n    const { predictions, tileEntries } = this.props;\n    const tiles = store.getState().tiles;\n    let maxComponents = tiles.filter(t => t.content === \"BINARY\").length + 1;\n\n    for (const entry of tileEntries) {\n      const tile = tiles.find(t => t.id === entry.tile_id);\n      if (!tile) continue;\n\n      if (tile.content === \"BINARY\") continue;\n      maxComponents += 1;\n    }\n\n    const round = (val: number) => Math.round(val * 100) / 100;\n\n    const errors = Array.from(Array(maxComponents).keys()).map(i => 5 - ((4.5 / maxComponents) * i));\n    if (predictions.length === 0) {\n      return (\n        <div id={\"gradePrediction\"}>\n          <h2>No predictions available.</h2>\n          <p>Try again later when more grades are available.</p>\n        </div>\n      );\n    }\n\n    const sortedPredictions = predictions.sort(\n      (a, b) => a.graded_components - b.graded_components);\n\n    const data = (canvas: any) => {\n      const ctx = canvas.getContext(\"2d\")\n      const gradient1 = ctx.createLinearGradient(0,0,0,350);\n      gradient1.addColorStop(0, \"#FFF\");\n      gradient1.addColorStop(1, \"rgb(90, 50, 255)\");\n\n      const gradient2 = ctx.createLinearGradient(0,0,0,350);\n      gradient2.addColorStop(1, \"#FFF\");\n      gradient2.addColorStop(0, \"rgb(90, 50, 255)\");\n\n      return {\n        labels: sortedPredictions.map((pg) => pg.graded_components + \" graded components\"),\n        datasets: [\n          {\n            label: \"Predicted grade\",\n            type: \"line\",\n            backgroundColor: \"rgb(90, 50, 255)\",\n            borderColor: \"rgb(90, 50, 255)\",\n            hoverBorderColor: \"rgb(90, 50, 255)\",\n            fill: false,\n            tension: 0,\n            data: sortedPredictions.map(sp => round(sp.grade)),\n            yAxisID: 'y',\n            xAxisID: 'x'\n          },\n          {\n            label: \"UpperConfidence\",\n            type: \"line\",\n            backgroundColor: gradient1,\n            borderColor: \"transparent\",\n            pointRadius: 0,\n            fill: 0,\n            tension: 0,\n            data: sortedPredictions.map((sp, i) => sp.grade + errors[i + 3]),\n            yAxisID: 'y',\n            xAxisID: 'x'\n          },\n          {\n            label: \"LowerConfidence\",\n            type: \"line\",\n            backgroundColor: gradient2,\n            borderColor: \"transparent\",\n            pointRadius: 0,\n            fill: 0,\n            tension: 0,\n            data: sortedPredictions.map((sp, i) => sp.grade - errors[i + 3]),\n            yAxisID: 'y',\n            xAxisID: 'x'\n          }\n        ]\n      }\n    };\n\n    return (\n      <div id={\"gradePrediction\"}>\n        <h3>Your predicted grade is a <strong>{round(sortedPredictions[sortedPredictions.length - 1].grade)}</strong></h3>\n\n        <Bar options={{  legend: { display: false },\n                          scales: {\n                            xAxes: [{\n                              id: 'x',\n                              type: 'category'\n                            }],\n                            yAxes: [{\n                              id: 'y',\n                              type: 'linear',\n                              position: \"left\",\n                              ticks: {\n                                beginAtZero: true,\n                                min: 0,\n                                max: 10\n                              }\n                            }]\n                          }}}\n              width={500}\n              data={data} />\n\n        <p>Grade predictions will grow more accurate as the course progresses.</p>\n      </div>\n    );\n  }\n}","import { Col, Divider, Row } from \"antd\";\nimport React, { Component } from \"react\";\nimport { Tile } from \"../../../../models/app/Tile\";\nimport { CanvasDiscussion } from \"../../../../models/canvas/Discussion\";\nimport \"./style.scss\";\n\nexport default class DiscussionsList extends Component<{\n    discussions: CanvasDiscussion[],\n    tile: Tile\n}> {\n    render(): React.ReactNode {\n        const { discussions } = this.props;\n        return (\n            <div id={\"discussionsList\"}>\n                <Row gutter={[10, 10]}>\n                    {discussions.map(d => {\n                        return (\n                            <Col key={d.id} xs={24} md={12} lg={8}>\n                                <div className={\"discussion\"}>\n                                    <h2>{d.title}</h2>\n                                    <small>{d.posted_at}</small>\n                                    <Divider />\n                                    <p dangerouslySetInnerHTML={{ __html: d.message }} />\n                                </div>\n                            </Col>\n                        )\n                    })}\n                </Row>\n            </div>\n        )\n    }\n}\n","import React, { Component } from \"react\";\nimport { TileEntry, TileEntrySubmission } from \"../../../../models/app/Tile\";\nimport { Badge, Card, Col, Row } from \"antd\";\nimport { CheckOutlined } from \"@ant-design/icons\";\nimport \"./style.scss\";\nimport { LearningOutcome } from \"../../../../models/app/LearningGoal\";\n\nexport default class LearningOutcomes extends Component<{\n    learningOutcomes: LearningOutcome[],\n    tileEntries: TileEntry[]\n}> {\n    render(): React.ReactNode {\n        const { learningOutcomes, tileEntries } = this.props;\n\n        const formatExpression = (exp: string | null) => {\n            switch (exp) {\n                case \"lte\": return \"≤\";\n                case \"gte\": return \"≥\";\n                default: return \"=\";\n            }\n        }\n\n        return (\n            <div id={\"learningOutcomes\"}>\n                <div style={{ margin: \"0 auto\", maxWidth: '400px', width: '100%' }}>\n                    {learningOutcomes.map((lo, i) => {\n                        return (\n                            <div key={lo.goal.id} style={{ margin: \"5px 0\" }}>\n                                <Badge.Ribbon text={lo.success ? \"Completed\" : \"Not completed\"} color={lo.success ? \"green\" : \"red\"}>\n                                    <Card title={`Goal ${i}`} size=\"small\">\n                                        <strong>\n                                            {lo.goal.title}\n                                        </strong>\n                                        <br />\n                                        {lo.goal.requirements.map(r => {\n                                            const entry = tileEntries.find(e => e.id === r.entry_id);\n\n                                            return (\n                                                <span>{entry ? entry.title : \"???\"} {formatExpression(r.expression)} { r.value}<br /></span>\n                                            )\n                                        })}\n                                    </Card>\n                                </Badge.Ribbon>\n                            </div>\n                        );\n                    })}\n                </div>\n            </div>\n        )\n    }\n}\n","import React, { Component } from \"react\";\nimport {Tile, TileEntry, TileEntrySubmission} from \"../../../models/app/Tile\";\nimport BinaryGrades from \"./BinaryGrades\";\nimport {Button} from \"antd\";\nimport { ArrowLeftOutlined } from \"@ant-design/icons\";\nimport EntriesList from \"./EntriesList\";\nimport GradePrediction from \"./GradePrediction\";\nimport {PredictedGrade} from \"../../../models/app/PredictiveModel\";\nimport DiscussionsList from \"./DiscussionsList\";\nimport {CanvasDiscussion} from \"../../../models/canvas/Discussion\";\nimport LearningOutcomes from \"./LearningOutcomes\";\nimport { LearningOutcome } from \"../../../models/app/LearningGoal\";\n\nexport default class TileDetail extends Component<{\n  tile: Tile,\n  submissions: TileEntrySubmission[],\n  discussions: CanvasDiscussion[],\n  tileEntries: TileEntry[],\n  predictions: PredictedGrade[],\n  learningOutcomes: LearningOutcome[]\n}> {\n\n  content = () => {\n    const { tile, submissions, tileEntries, predictions, discussions, learningOutcomes } = this.props;\n\n    switch(tile.content) {\n      case \"BINARY\":\n        return (\n          <BinaryGrades submissions={submissions.filter(\n            s => tileEntries.filter(e => e.tile_id === tile.id).map(x => x.id).includes(s.entry_id))}\n                        tileEntries={tileEntries.filter(e => e.tile_id === tile.id)}\n          />\n        );\n      case \"ENTRIES\":\n        switch (tile.type) {\n          case \"DISCUSSIONS\":\n            return (\n              <DiscussionsList discussions={discussions}\n                               tile={tile} />\n            );\n          default:\n            return (\n              <EntriesList submissions={submissions.filter(\n                s => tileEntries.filter(e => e.tile_id === tile.id).map(x => x.id).includes(s.entry_id))}\n                           tileEntries={tileEntries.filter(e => e.tile_id === tile.id)}\n                           discussions={discussions}\n                           tile={tile}\n              />\n            );\n        }\n      case \"PREDICTION\":\n        return (\n          <GradePrediction tileEntries={tileEntries}\n                           predictions={predictions} />\n        );\n      case \"LEARNING_OUTCOMES\":\n        return (\n          <LearningOutcomes learningOutcomes={learningOutcomes} tileEntries={tileEntries} />\n        );\n      default:\n        return null;\n    }\n  }\n\n  render(): React.ReactNode {\n    const { tile } = this.props;\n\n    return (\n      <div style={{padding: 20}}>\n        <Button type={\"ghost\"}\n                icon={<ArrowLeftOutlined />}\n                onClick={() => {\n                  window.dispatchEvent(new CustomEvent('selectTile', { detail: undefined }))\n                }}\n        >\n          Return to dashboard\n        </Button>\n\n        <h1 style={{margin: '10px 0'}}>{ tile.title }</h1>\n        { this.content() }\n      </div>\n    )\n  }\n}","import { Tile } from \"../../../models/app/Tile\";\nimport TileController from \"../../../api/controllers/tile\";\nimport {TilesGradeSummary} from \"../types\";\n\nconst compute = require( 'compute.io' );\n\nexport const getTileAverage = async (tile: Tile, studentLoginId: string): Promise<number> => {\n  const submissions = await TileController.getTileSubmissions(tile.id, studentLoginId).then(s => s);\n\n  // For binary content types return the percentage of true values\n  if (tile.content === \"BINARY\") {\n    const success = submissions.filter(s => parseFloat(s.grade) > 0.1).length;\n    const total = submissions.length;\n    return Promise.resolve(\n      (success / total) * 10\n    );\n  }\n\n  const average = compute.mean(submissions.map(s => parseFloat(s.grade)));\n  return Promise.resolve(average)\n}\n\nexport const genAngles = (length: number, degrees: number) => {\n  return [...new Array(length + 1)].map((_, i) => ({\n    angle: i * (degrees / length),\n  }));\n}\n\nexport const genPoints = (length: number, radius: number) => {\n  const step = (Math.PI * 2) / length;\n  return [...new Array(length)].map((_, i) => ({\n    x: radius * Math.sin(i * step),\n    y: radius * Math.cos(i * step),\n  }));\n};\n\nexport const genPolygonPoints = (\n  tilesGradeSummary: TilesGradeSummary[],\n  getScale: (n: number, tile: Tile) => any,\n  getValue: (d: { tile: Tile, average: number }) => number,\n) => {\n  const step = (Math.PI * 2) / tilesGradeSummary.length;\n  const points: { x: number; y: number, tile: Tile | undefined }[] =\n    new Array(tilesGradeSummary.length).fill({ x: 0, y: 0, tile: undefined });\n\n  const pointString: string = new Array(tilesGradeSummary.length + 1).fill('').reduce((res, _, i) => {\n    if (i > tilesGradeSummary.length) return res;\n\n    const xVal = getScale(getValue(tilesGradeSummary[i - 1]), tilesGradeSummary[i - 1].tile) * Math.sin(i * step);\n    const yVal = getScale(getValue(tilesGradeSummary[i - 1]), tilesGradeSummary[i - 1].tile) * Math.cos(i * step);\n    points[i - 1] = { x: xVal, y: yVal, tile: tilesGradeSummary[i - 1].tile };\n    res += `${xVal || 0},${yVal || 0} `;\n    return res;\n  });\n\n  return { points, pointString };\n}\n\nexport const getDescriptionAnchor = (x: number, y: number) => {\n  if (x > 1) {\n    return \"start\";\n  } else if (x < -0.1) {\n    return \"end\";\n  }\n\n  return \"middle\";\n}\n","import React, { Component } from \"react\";\nimport { SizeMe } from 'react-sizeme'\nimport { genAngles, genPoints, genPolygonPoints, getDescriptionAnchor } from \"./helpers\";\nimport { IProps } from \"./types\";\nimport { scaleLinear } from '@visx/scale';\nimport { Group } from '@visx/group';\nimport { Point } from '@visx/point';\nimport { Line } from '@visx/shape';\nimport { Tile } from \"../../../models/app/Tile\";\nimport \"./style.scss\";\n\nconst silver = '#d9d9d9';\nconst orange = '#ff9933';\nconst pumpkin = '#f5810c';\n\nexport default class TileRadar extends Component<IProps> {\n\n    render(): React.ReactNode {\n        const { tilesGradeSummary, peerGrades } = this.props;\n\n        const degrees = 360;\n        const margin = { top: 50, left: 75, right: 75, bottom: 50 }\n\n        return (\n            <div id={\"tileRadial\"}>\n                <h2 style={{ textAlign: 'center' }}>What requires my attention?</h2>\n                <br />\n                <div style={{ width: '100%' }}>\n                    <SizeMe monitorWidth={true} refreshMode={'throttle'} refreshRate={40}>\n                        {({ size }) => {\n                            if ((size.width || 0) < 50 || !size.width) {\n                                return <span>Can't display radar</span>;\n                            }\n\n                            const xMax = size.width - margin.left - margin.right;\n                            const yMax = size.width - margin.top - margin.bottom;\n                            const radius = Math.min(xMax, yMax) / 2;\n\n                            const radialScale = scaleLinear<number>()\n                                .range([0, Math.PI * 2])\n                                .domain([degrees, 0]);\n\n                            const genYScale = (value: number, tile: Tile) => {\n                                const userGrades = tilesGradeSummary.filter(tgs => tgs.tile.id === tile.id);\n                                const _peerGrades = peerGrades.filter(pg => pg.tileID === tile.id);\n\n                                return scaleLinear<number>({\n                                    range: [0, radius],\n                                    domain: [0, tile.content === \"BINARY\" ?\n                                        100 :\n                                        Math.max(10, Math.max(...userGrades.map(x => x.average), ..._peerGrades.map(x => x.avg)))],\n                                })(value);\n                            }\n\n                            const webs = genAngles(tilesGradeSummary.length, degrees);\n                            const zeroPoint = new Point({ x: 0, y: 0 });\n                            const points = genPoints(tilesGradeSummary.length, radius);\n                            const polygonPoints = genPolygonPoints(\n                                tilesGradeSummary,\n                                (n, tile) => genYScale(n, tile),\n                                d => d.average\n                            );\n\n                            const peerPoints = genPolygonPoints(\n                                [...tilesGradeSummary].map(d => {\n                                    const target = peerGrades.find(p => p.tileID === d.tile.id);\n                                    return {\n                                        ...d,\n                                        average: target?.avg ?? 0\n                                    }\n                                }), (n, tile) => genYScale(n, tile), d => d.average);\n\n                            return (\n                                <svg width={`${100}%`} height={`${size.width || 0}px`}>\n                                    <rect width={`${size.width || 0}px`}\n                                        height={`${size.width || 0}px`}\n                                        fill={\"#FAF7E9\"}\n                                        rx={14}\n                                    />\n\n                                    <Group top={size.width / 2 - margin.top} left={size.width / 2}>\n                                        {[...new Array(tilesGradeSummary.length)].map((_, i) => (\n                                            <Line key={`radar-line-${i}`}\n                                                from={zeroPoint}\n                                                to={points[i]}\n                                                stroke={silver}\n                                            />\n                                        ))}\n\n                                        <polygon\n                                            opacity={1} // TODO: fade in?\n                                            points={peerPoints.pointString}\n                                            fill={'rgba(255, 0, 0, 0.3)'}\n                                            fillOpacity={0.3}\n                                            stroke={'red'}\n                                            strokeWidth={1}\n                                            style={{ transition: 'opacity .4s ease-in-out', zIndex: 90 }}\n                                        />\n\n                                        {peerPoints.points.map((point, i) => (\n                                            <circle key={`peer-point-${i}`}\n                                                cx={point.x}\n                                                cy={point.y}\n                                                r={2}\n                                                opacity={1} // TODO: fade in?\n                                                fill={'red'}\n                                                style={{ transition: 'opacity .4s ease-in-out', zIndex: 90 }}\n                                                onClick={() => {\n                                                    window.dispatchEvent(new CustomEvent(\"selectTile\", { detail: { tile: point.tile! } }))\n                                                    //alert(point.tile!.title)\n                                                }}\n                                            />\n                                        ))}\n\n                                        {points.map((point, i) => (\n                                            <React.Fragment key={i}>\n                                                <Line key={`radar-line-${i}`}\n                                                    from={i === 0 ? points[points.length - 1] : points[i - 1]}\n                                                    to={points[i]}\n                                                    stroke={silver}\n                                                />\n                                                { tilesGradeSummary[i === 0 ? tilesGradeSummary.length - 1 : i - 1].tile.title.split(\" \").map((x, j) => (\n                                                    <text x={point.x > 0 ? point.x + 10 : point.x - 10}\n                                                        y={point.y > 0 ? point.y + 10 + (j * 12) : point.y - 10 - (j * 12)}\n                                                        textAnchor={getDescriptionAnchor(point.x, point.y)}\n                                                        style={{ whiteSpace: 'pre-wrap' }}\n                                                        key={`$x:{x};j:${j}`}\n                                                    >\n                                                        { x}\n                                                    </text>\n                                                ))}\n                                            </React.Fragment>\n                                        ))}\n\n                                        <polygon\n                                            points={polygonPoints.pointString}\n                                            fill={orange}\n                                            fillOpacity={0.3}\n                                            stroke={orange}\n                                            strokeWidth={1}\n                                            style={{ zIndex: 100 }}\n                                        />\n\n                                        {polygonPoints.points.map((point, i) => (\n                                            <circle key={`radar-point-${i}`}\n                                                cx={String(point.x)}\n                                                cy={String(point.y)}\n                                                r={4}\n                                                fill={pumpkin}\n                                                style={{ zIndex: 100 }}\n                                                onClick={() => {\n                                                    window.dispatchEvent(new CustomEvent(\"selectTile\", { detail: { tile: point.tile! } }))\n                                                    //alert(point.tile!.title)\n                                                }}\n                                            />\n                                        ))}\n                                    </Group>\n\n                                    <circle cy={(size.width || 0) - 20} cx={20} fill={orange} r={5} />\n                                    <text y={(size.width || 0) - 15} x={30}>\n                                        You\n                  </text>\n\n                                    <circle cy={(size.width || 0) - 20} cx={80} fill={'red'} r={5} />\n                                    <text y={(size.width || 0) - 15} x={90}>\n                                        Peers\n                  </text>\n                                </svg>\n                            );\n                        }}\n                    </SizeMe>\n                </div>\n            </div>\n        )\n    }\n}\n","import React, { Component } from \"react\";\nimport {Link} from \"react-router-dom\";\nimport {Button, Col, Divider, Row} from \"antd\";\nimport {TrophyOutlined, RiseOutlined, WarningOutlined} from \"@ant-design/icons\";\nimport {RootState} from \"../../../store\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport {CanvasStudent} from \"../../../models/canvas/Student\";\nimport DataMartController from \"../../../api/controllers/datamart\";\nimport {PerformanceNotification} from \"../../../models/app/Notification\";\n\nconst mapState = (state: RootState) => ({\n  course: state.course,\n  tiles: state.tiles\n});\n\nconst connector = connect(mapState)\ntype PropsFromRedux = ConnectedProps<typeof connector>\ntype Props = PropsFromRedux & { student: CanvasStudent | undefined };\ntype IState = { notifications: PerformanceNotification[] };\n\nclass UserProfile extends Component<Props, IState> {\n\n  _isMounted = false;\n\n  state = {\n    notifications: []\n  }\n  \n  componentDidMount(): void {\n    this._isMounted = true;\n    this.loadNotifications(this.props);\n  }\n\n  componentWillReceiveProps(nextProps: Readonly<Props>, nextContext: any): void {\n    if (nextProps.student?.login_id !== this.props.student?.login_id) {\n      this.loadNotifications(nextProps);\n    }\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  loadNotifications = (props: Props) => {\n    const { student } = props;\n    if (!student) return;\n\n    DataMartController.getNotifications(student.login_id).then(notifications => {\n      // TODO: I think this may be a race condition, try to do away with the isMounted flag and resolve the console error. If noone complains about missing functionality by 2023, remove this todo.\n      this._isMounted && this.setState({ notifications });\n    });\n  }\n\n  _getTileTitle = (tileID: number): string => {\n    const { tiles } = this.props;\n\n    return tiles.find(t => t.id === tileID)?.title ?? \"\";\n  }\n\n  render(): React.ReactNode {\n    const { course, student, tiles } = this.props;\n    const { notifications }: IState = this.state;\n\n    const outperforming = notifications\n      .filter(n => n.status === \"outperforming peers\")\n      .sort((a, b) => {\n        return this._getTileTitle(a.tile_id).localeCompare(this._getTileTitle(b.tile_id));\n      });\n\n    const closing = notifications\n      .filter(n => n.status === \"closing the gap\")\n      .sort((a, b) => {\n        return this._getTileTitle(a.tile_id).localeCompare(this._getTileTitle(b.tile_id));\n      });\n\n    const moreEffort = notifications\n      .filter(n => n.status === \"more effort required\")\n      .sort((a, b) => {\n        return this._getTileTitle(a.tile_id).localeCompare(this._getTileTitle(b.tile_id));\n      });\n\n    return (\n      <div id={\"userProfile\"}>\n        <Row>\n          <Col xs={24} style={{textAlign: 'center'}}>\n            <Link to={'/goal-grade'}>\n              <Button size={\"large\"} color={\"primary\"}>\n                Goal Grade\n              </Button>\n            </Link>\n          </Col>\n\n          <Col xs={24} md={8} lg={6}>\n            <h3>{ student && student.name }</h3>\n            <strong>{ course && course.course_name }</strong>\n          </Col>\n\n          <Col xs={24} md={0}>\n            <Divider />\n          </Col>\n\n          <Col xs={24} md={16} lg={18}>\n            { outperforming.length > 0 &&\n              <div>\n                <TrophyOutlined />\n                {' '}\n                You are outperforming your peers in:\n                <ul style={{boxSizing: 'border-box', paddingLeft: 30}}>\n                  { outperforming.map((n, i) => <li key={i}>{this._getTileTitle(n.tile_id)}</li>)}\n                </ul>\n              </div> }\n\n            { closing.length > 0 &&\n              <div>\n                <RiseOutlined />\n                {' '}\n                You are closing the gap to your peers in:\n                <ul style={{boxSizing: 'border-box', paddingLeft: 30}}>\n                  { closing.map((n, i) => <li key={i}>{this._getTileTitle(n.tile_id)}</li>)}\n                </ul>\n              </div> }\n\n            { moreEffort.length > 0 &&\n              <div>\n                <WarningOutlined />\n                {' '}\n                You have to put more effort in:\n                <ul style={{boxSizing: 'border-box', paddingLeft: 30}}>\n                  { moreEffort.map(n => <li>{this._getTileTitle(n.tile_id)}</li>)}\n                </ul>\n              </div> }\n\n            <div style={{textAlign: 'right'}}>\n              <Link to={'/consent'}>Informed Consent</Link>\n            </div>\n          </Col>\n        </Row>\n        <br />\n        <div style={{textAlign: 'center'}}>\n          <small>\n            IGuideME is a product by the University of Amsterdam.\n          </small>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default connector(UserProfile);\n","import React, { Component } from \"react\";\nimport {IProps, IState, PeerGrades, TilesGradeSummary, ViewTypes} from \"./types\";\nimport TileGroup from \"./TileGroup\";\nimport {Tile, TileGroup as TileGroupModel} from \"../../models/app/Tile\";\nimport FadeIn from \"react-fade-in\";\nimport TileController from \"../../api/controllers/tile\";\nimport Loading from \"../utils/Loading\";\nimport {DashboardColumn} from \"../../models/app/Layout\";\nimport TileDetail from \"./TileDetail\";\nimport { Radio } from \"antd\";\nimport { AppstoreOutlined, RadarChartOutlined } from \"@ant-design/icons\";\nimport TileRadar from \"./TileRadar\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport {RootState} from \"../../store\";\nimport \"./style.scss\";\nimport {DataMartActions} from \"../../store/actions/datamart\";\nimport {PredictedGrade} from \"../../models/app/PredictiveModel\";\nimport UserProfile from \"./UserProfile\";\nimport {CanvasDiscussion} from \"../../models/canvas/Discussion\";\nimport {LearningGoal, LearningOutcome} from \"../../models/app/LearningGoal\";\n\nconst compute = require('compute.io');\n\nconst mapState = (state: RootState) => ({\n  dashboardColumns: state.dashboardColumns,\n  tiles: state.tiles,\n  tileGroups: state.tileGroups,\n  tileEntries: state.tileEntries,\n  predictions: state.predictions,\n});\n\nconst mapDispatch = {\n  loadPredictions: (user: string = 'self') => DataMartActions.loadPredictions(user)\n}\n\nconst connector = connect(mapState, mapDispatch)\ntype PropsFromRedux = ConnectedProps<typeof connector>\ntype Props = PropsFromRedux & IProps;\n\nclass StudentDashboard extends Component<Props, IState> {\n\n  state = {\n    tilesGradeSummary: [],\n    peerGrades: [],\n    userSubmissions: [],\n    loaded: true,\n    displayTile: undefined,\n    discussions: [],\n    learningOutcomes: [],\n    viewType: \"radar\" as ViewTypes\n  }\n\n  componentDidMount(): void {\n    window.addEventListener('selectTile', (event: any) => {\n      if (event.detail) {\n        const tile: Tile | undefined = (event as any).detail;\n        this.setState({ displayTile: tile });\n      } else this.setState({ displayTile: undefined });\n    });\n\n    this.setup(this.props);\n  }\n\n  componentWillReceiveProps(nextProps: Readonly<Props>, nextContext: any): void {\n    if (nextProps.student?.login_id !== this.props.student?.login_id && nextProps.student) {\n      this.props.loadPredictions(nextProps.student.login_id).then(({ payload }) => {\n        this.setup(nextProps, payload);\n      });\n    }\n\n    if (nextProps.predictions.length !== this.props.predictions.length) {\n      this.setup(nextProps);\n    }\n  }\n\n  setup = async (props: Props, propPredictions: PredictedGrade[] = []) => {\n    const { tiles, student, tileEntries, predictions } = props;\n    if (!student) return;\n\n    this.setState({ loaded: false });\n\n    let discussions: CanvasDiscussion[] = [];\n    let goals: LearningOutcome[] = [];\n\n    for (const tile of tiles.filter(t => t.type === \"DISCUSSIONS\")) {\n      const discussion_result: CanvasDiscussion[] =\n        await TileController.getDiscussions(tile.id, student.login_id).then(d => d);\n      discussions.push(...discussion_result);\n    }\n\n    for (const tile of tiles.filter(t => t.content === \"LEARNING_OUTCOMES\")) {\n      const goal_result: any =\n        await TileController.getUserGoals(tile.id, student.login_id).then(g => g);\n\n      goals.push(...goal_result);\n    }\n\n    TileController.getSubmissions(student.login_id).then(userSubmissions => {\n      let data = tiles.filter(\n        t => t.content !== \"PREDICTION\" && t.content !== \"LEARNING_OUTCOMES\" &&\n          t.type !== \"DISCUSSIONS\"\n      ).map(t => {\n        return {\n          tile: t,\n          average: t.content.toLowerCase() === 'binary' ?\n            (\n              userSubmissions.filter(\n                s => tileEntries\n                  .filter(e => e.tile_id === t.id && parseFloat(s.grade) > .1)\n                  .map(e => e.id)\n                  .includes(s.entry_id)\n              ).length /\n              userSubmissions.filter(\n                s => tileEntries\n                  .filter(e => e.tile_id === t.id)\n                  .map(e => e.id)\n                  .includes(s.entry_id)\n              ).length\n            ) * 100 :\n            compute.mean(\n              userSubmissions.filter(\n                s => tileEntries\n                  .filter(e => e.tile_id === t.id)\n                  .map(e => e.id)\n                  .includes(s.entry_id)\n              ).map(s => parseFloat(s.grade))\n            )\n        }\n      });\n\n      if (tiles.filter(t => t.content === \"PREDICTION\").length > 0)\n      {\n        const sortedPredictions = (propPredictions.length > 0 ? propPredictions : predictions).sort(\n          (a, b) => b.graded_components - a.graded_components);\n        data.push({\n          tile: tiles.find(t => t.content == \"PREDICTION\")!,\n          average: sortedPredictions.length > 0 ? sortedPredictions[0].grade : 0\n        });\n      }\n\n      this.setState({\n        discussions,\n        learningOutcomes: goals,\n        tilesGradeSummary: data,\n        userSubmissions\n      }, () => {\n        TileController.getPeerResults(student.login_id).then(peerGrades =>\n          this.setState({ peerGrades, loaded: true })\n        ).catch(() => this.setState({ loaded: true }));\n      });\n    });\n  }\n\n  render(): React.ReactNode {\n    const {\n      loaded,\n      displayTile,\n      viewType,\n      tilesGradeSummary,\n      peerGrades,\n      userSubmissions,\n      discussions,\n      learningOutcomes\n    } = this.state;\n\n    const { tiles, tileGroups, dashboardColumns, tileEntries, student, predictions } = this.props;\n    if (!loaded || !student) return (<Loading small={true} />);\n\n    if (displayTile) {\n      return <TileDetail tile={(displayTile as any).tile}\n                         tileEntries={tileEntries}\n                         discussions={discussions}\n                         predictions={predictions}\n                         submissions={userSubmissions}\n                         learningOutcomes={learningOutcomes}\n      />\n    }\n\n    return (\n      <div id={\"studentDashboard\"}>\n        <Radio.Group value={viewType}\n                     buttonStyle=\"solid\"\n                     onChange={e => this.setState({ viewType: e.target.value })}\n        >\n          <Radio.Button value=\"radar\"><RadarChartOutlined /> Radar</Radio.Button>\n          <Radio.Button value=\"grid\"><AppstoreOutlined /> Grid</Radio.Button>\n        </Radio.Group>\n\n        { viewType === \"grid\" ?\n          <FadeIn>\n            <div>\n              { dashboardColumns.map((c: DashboardColumn) => {\n                return (\n                  <div className={`column ${c.container_width}`}\n                       key={c.id}>\n                    { tileGroups\n                      .filter((tg: TileGroupModel) => tg.column_id === c.id)\n                      .sort((a: TileGroupModel, b: TileGroupModel) => a.position - b.position)\n                      .map((tg: TileGroupModel) =>\n                        <TileGroup tileGroup={tg}\n                                   tiles={tiles.filter((t: Tile) => t.group_id === tg.id)}\n                                   discussions={discussions}\n                                   tileEntries={tileEntries.filter(e => tiles.filter(\n                                     (t: Tile) => t.group_id === tg.id).map(x => x.id).includes(e.tile_id))}\n                                   student={student}\n                                   tilesGradeSummary={tilesGradeSummary.filter(\n                                     (tgs: TilesGradeSummary) => tgs.tile.group_id === tg.id)}\n                                   peerGrades={peerGrades}\n                                   submissions={userSubmissions}\n                                   learningOutcomes={learningOutcomes}\n                        key={tg.id}\n                        />\n                      )\n                    }\n                  </div>\n                )\n              })}\n            </div>\n          </FadeIn> :\n          <TileRadar tiles={tiles}\n                     tileEntries={tileEntries}\n                     student={student}\n                     tilesGradeSummary={tilesGradeSummary}\n                     peerGrades={peerGrades}\n          />\n        }\n\n        <UserProfile student={this.props.student} />\n      </div>\n    )\n  }\n}\n\nexport default connector(StudentDashboard);\n","import React, { Component } from \"react\";\nimport { IProps } from \"./types\";\nimport { Result } from \"antd\";\nimport { SmileOutlined } from \"@ant-design/icons\";\nimport StudentDashboard from \"../StudentDashboard\";\nimport \"./style.scss\";\n\nexport default class AdminDashboard extends Component<IProps> {\n  render(): React.ReactNode {\n    if (!this.props.student) {\n      return (\n        <div id={\"getStarted\"}>\n          <Result\n            icon={<SmileOutlined />}\n            title={\n              <div>\n                <h2>Pick a student to start!</h2>\n                <h1 id={\"brand\"}>IGuideME</h1>\n              </div>\n            }\n          />\n        </div>\n      );\n    }\n\n    return (<StudentDashboard student={this.props.student} />);\n  }\n}","import React, { Component } from \"react\";\nimport { withConsent } from \"../../hoc/withConsent\";\nimport { withAdminRole } from \"../../hoc/withAdminRole\";\nimport {UserDataProps} from \"../../hoc/types\";\nimport AdminHeader from \"../../containers/AdminHeader\";\nimport StudentDashboard from \"../../components/StudentDashboard\";\nimport AdminDashboard from \"../../components/AdminDashboard\";\nimport {CanvasStudent} from \"../../models/canvas/Student\";\nimport UserController from \"../../api/controllers/app\";\nimport {RootState} from \"../../store\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport Loading from \"../../components/utils/Loading\";\nimport { Redirect } from \"react-router-dom\";\n\nconst mapState = (state: RootState) => ({\n  user: state.user,\n  predictions: state.predictions\n});\n\nconst connector = connect(mapState)\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\ntype Props = PropsFromRedux & UserDataProps;\n\nclass App extends Component<Props, { student: CanvasStudent | null, goalGrade: number | undefined }> {\n\n  state = { student: null, goalGrade: undefined }\n\n  componentDidMount(): void {\n    const { isAdmin } = this.props;\n    if (!isAdmin) {\n      UserController.getUser().then(student => this.setState({ student }));\n      UserController.getGoalGrade().then(goalGrade => this.setState({ goalGrade }));\n    } else {\n      this.setState({ goalGrade: 10 });\n    }\n  }\n\n  render(): React.ReactNode {\n    const { isAdmin } = this.props;\n    const { student, goalGrade } = this.state;\n\n    if (goalGrade === undefined) return <Loading />;\n    if (goalGrade === -1) return <Redirect to={'goal-grade'} />;\n\n    return (\n      <div id={\"app\"}>\n        { isAdmin && <AdminHeader studentPickView={true}\n                                  setStudent={student => {\n                                    this.setState({ student }, () =>\n                                      window.dispatchEvent(\n                                        new CustomEvent('selectTile', {\n                                          detail: undefined\n                                        })\n                                      )\n                                    )\n                                  }}\n        /> }\n        { isAdmin ?\n          <AdminDashboard student={student} /> :\n          student === null ?\n            <h1>Your account has not yet been processed, try again tomorrow!</h1>:\n            <StudentDashboard student={student || undefined} />\n        }\n      </div>\n    )\n  }\n}\n\nexport default withConsent(withAdminRole(connector(App)));"],"sourceRoot":""}