{"version":3,"sources":["api/controllers/student.ts","containers/AdminHeader/index.tsx","common/Admin/AdminMenu/index.tsx","common/Admin/index.tsx","components/analytics/ApplicationAnalytics/helpers.ts","components/analytics/ApplicationAnalytics/index.tsx","components/analytics/ApplicationAnalytics/linkcomponent.tsx","components/analytics/TileTraffic/index.tsx","components/analytics/TileConversions/index.tsx","components/analytics/TileConversions/helpers.ts","common/Admin/sections/Analytics/index.tsx"],"names":["StudentController","debug","delay","MOCK_STUDENTS","this","client","get","then","response","data","MOCK_CONSENTS","MOCK_GOALS","Controller","connector","connect","state","course","user","AdminHeader","loaded","students","props","studentPickView","getStudents","setState","id","isLoading","options","sort","a","b","name","localeCompare","map","s","label","value","login_id","placeholder","onChange","e","setStudent","find","isClearable","styles","control","provided","backgroundColor","color","border","singleValue","course_name","Fragment","to","style","float","padding","title","shape","icon","renderInner","Component","AdminMenu","UserOutlined","selectedKeys","menuKey","Item","key","DatabaseOutlined","AppstoreOutlined","LaptopOutlined","TeamOutlined","SubMenu","TrophyOutlined","FundProjectionScreenOutlined","DotChartOutlined","CloudUploadOutlined","ClusterOutlined","NotificationOutlined","ControlOutlined","Admin","isAdmin","xs","className","children","withAdminRole","defaultMargin","top","left","right","bottom","ApplicationAnalytics","margin","width","ParentSize","size","Math","max","sizeWidth","sizeHeight","origin","LinkComponent","layout","linkType","orientation","LinkRadialStep","LinkRadialCurve","LinkRadialLine","LinkRadial","LinkVerticalStep","LinkVerticalCurve","LinkVerticalLine","LinkVertical","LinkHorizontalStep","LinkHorizontalCurve","LinkHorizontalLine","LinkHorizontal","getLinkComponent","height","LinearGradient","from","rx","fill","Group","Tree","root","hierarchy","d","isExpanded","separation","parent","depth","tree","links","link","i","percent","stroke","strokeWidth","descendants","node","x","y","r","onClick","console","log","forceUpdate","strokeDasharray","strokeOpacity","dy","fontSize","fontFamily","textAnchor","pointerEvents","dataMatrix","descending","NaN","TileTraffic","colors","colorCombos","length","push","j","outerRadius","min","innerRadius","vertical","Chord","matrix","padAngle","sortSubgroups","master","chords","groups","group","Arc","chord","Ribbon","radius","source","index","target","fillOpacity","alert","purple3","date","moment","add","TileConversions","mode","allowClear","marginBottom","defaultValue","Option","totals","xMax","yMax","keys","Object","filter","temperatureTotals","reduce","allTotals","currentDate","totalTemperature","dailyTotal","k","Number","dateScale","scaleBand","domain","format","getDate","temperatureScale","scaleLinear","nice","rangeRound","range","AxisBottom","scale","tickFormat","tickStroke","tickLabelProps","Analytics"],"mappings":"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","file":"static/js/24.318d3522.chunk.js","sourcesContent":["import { debug } from \"../../config/config\";\nimport Controller from \"../controller\";\nimport {CanvasStudent} from \"../../models/canvas/Student\";\nimport {ConsentData} from \"../../models/app/ConsentData\";\nimport {GoalData} from \"../../models/app/GoalData\";\nimport {MOCK_STUDENTS, MOCK_CONSENTS, MOCK_GOALS} from \"../../mocks/students\";\nimport {delay} from \"../../utils/mockRequest\";\n\nexport default class StudentController extends Controller {\n\n  static getStudents(): Promise<CanvasStudent[]> {\n    if (debug()) return delay(MOCK_STUDENTS);\n\n    return this.client.get(\n      `students`\n    ).then(response => response.data);\n  }\n\n  static getConsents(): Promise<ConsentData[]> {\n    if (debug()) return delay(MOCK_CONSENTS);\n\n    return this.client.get(\n      `consents`\n    ).then(response => response.data);\n\n  }\n  static getGoalgrades(): Promise<GoalData[]> {\n    if (debug()) return delay(MOCK_GOALS);\n\n    return this.client.get(\n      `goal-grades`\n    ).then(response => response.data);\n  }\n}","import React, { Component } from \"react\";\nimport Select from \"react-select\";\nimport {Button, Tooltip} from \"antd\";\nimport {SyncOutlined} from \"@ant-design/icons\";\nimport { Link } from \"react-router-dom\";\nimport {IProps, IState} from \"./types\";\nimport StudentController from \"../../api/controllers/student\";\nimport {CanvasStudent} from \"../../models/canvas/Student\";\nimport {debug} from \"../../config/config\";\nimport {RootState} from \"../../store\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport \"./style.scss\";\n\nconst mapState = (state: RootState) => ({\n  course: state.course,\n  user: state.user\n});\n\nconst connector = connect(mapState);\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\ntype Props = IProps & PropsFromRedux;\n\nclass AdminHeader extends Component<Props, IState> {\n\n  state = {\n    loaded: false,\n    students: []\n  }\n\n  componentDidMount(): void {\n    const { studentPickView } = this.props;\n\n    if (studentPickView) {\n      StudentController.getStudents().then(students => this.setState({ students, loaded: true }));\n    }\n\n    this.setState({ loaded: true });\n  }\n\n  renderInner(): React.ReactNode {\n    if (this.props.studentPickView) {\n      const { students, loaded } = this.state;\n      return (\n        <Select id={\"studentPicker\"}\n                isLoading={!loaded}\n                options={students.sort(\n                  (a: CanvasStudent, b: CanvasStudent) => a.name.localeCompare(b.name)\n                ).map((s: CanvasStudent) => ({ label: s.name, value: s.login_id}))}\n                placeholder={\"Choose a student\"}\n                onChange={(e) => this.props.setStudent!(\n                  e ? students.find((s: CanvasStudent) => s.login_id === e!.value)! : null\n                )}\n                isClearable={true}\n                styles={{\n                  control: (provided, state) => ({\n                    ...provided,\n                    backgroundColor: 'transparent',\n                    color: 'white',\n                    border: '1px solid white'\n                  }),\n                  singleValue: (provided, state) => {\n                    return {...provided, color: 'white'};\n                  }\n                }}\n        />\n      );\n    }\n\n    return (\n      <div id={\"inner\"}>\n        <h2>{ this.props.course ? this.props.course.course_name : \"Loading course...\" }</h2>\n      </div>\n    );\n  }\n\n  render(): React.ReactNode {\n    return (\n      <React.Fragment>\n        <div id={\"adminHeader\"}>\n          { this.props.studentPickView ?\n            <Link to={'/admin'} style={{ float: 'right' }}>\n              <h3>Admin Panel</h3>\n            </Link> :\n            <div style={{float: 'right', padding: 20}}>\n              <Tooltip title={\"Reload data\"}>\n                <Button id={\"reload\"}\n                        shape=\"circle\"\n                        style={{backgroundColor: 'rgba(255, 255, 255, 0.5)', color: 'white'}}\n                        icon={<SyncOutlined />} />\n              </Tooltip>\n            </div>\n          }\n\n          <div id={\"navbarContent\"}>\n            <div id={\"brand\"}>\n              <Link to={'/'}>\n                <h1>IGuideME</h1>\n              </Link>\n            </div>\n\n            { this.renderInner() }\n          </div>\n        </div>\n        { debug() &&\n          (<div id={\"debugNotice\"}>\n            Application is running in <strong>demo</strong> mode. Changes will not be saved!\n          </div>)\n        }\n      </React.Fragment>\n    );\n  }\n}\n\nexport default connector(AdminHeader);","import React, { Component } from \"react\";\nimport {\n    AppstoreOutlined,\n    ControlOutlined,\n    CloudUploadOutlined,\n    ClusterOutlined,\n    DotChartOutlined,\n    FundProjectionScreenOutlined,\n    LaptopOutlined,\n    TrophyOutlined,\n    NotificationOutlined,\n    DatabaseOutlined,\n    UserOutlined,\n    TeamOutlined\n} from \"@ant-design/icons\";\nimport { Menu } from \"antd\";\nimport { Link } from \"react-router-dom\";\nimport \"./style.scss\";\nimport { RootState } from \"../../../store\";\nimport { connect, ConnectedProps } from \"react-redux\";\n\nconst mapState = (state: RootState) => ({\n    user: state.user\n});\n\nconst connector = connect(mapState)\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\ntype Props = { menuKey: string } & PropsFromRedux;\n\nclass AdminMenu extends Component<Props> {\n\n    render(): React.ReactNode {\n        const { user } = this.props;\n\n        return (\n            <div id={\"adminMenu\"}>\n                <div id={\"user\"}>\n                    <h3>{user ? user.name : \"Loading profile...\"}</h3>\n                    <strong><UserOutlined /> Instructor</strong>\n                </div>\n\n                <Menu selectedKeys={[this.props.menuKey]}>\n                    <Menu.Item key={\"datamart\"} icon={<DatabaseOutlined />}>\n                        <Link to={'/admin'}>\n                            Datamart\n            </Link>\n                    </Menu.Item>\n\n                    <Menu.Item key={\"tiles\"} icon={<AppstoreOutlined />}>\n                        <Link to={'/admin/tiles'}>\n                            Tiles\n            </Link>\n                    </Menu.Item>\n\n                    <Menu.Item key={\"dashboard\"} icon={<LaptopOutlined />}>\n                        <Link to={'/admin/dashboard'}>\n                            Dashboard\n            </Link>\n                    </Menu.Item>\n\n                    <Menu.Item key={\"studentOverview\"} icon={<TeamOutlined />}>\n                        <Link to={'/admin/student-overview'}>\n                            Student Overview\n            </Link>\n                    </Menu.Item>\n                    <Menu.SubMenu key={\"submenu\"} icon={<TrophyOutlined />} title={\"Grades\"}>\n                        <Menu.Item key={\"gradePredictorOld\"} icon={<FundProjectionScreenOutlined />}>\n                            <Link to={'/admin/grade-predictor-old'}>\n                                Old Predictor\n              </Link>\n                        </Menu.Item>\n                        <Menu.Item key={\"gradePredictor\"} icon={<FundProjectionScreenOutlined />}>\n                            <Link to={'/admin/grade-predictor'}>\n                                Predictor\n              </Link>\n                        </Menu.Item>\n                        <Menu.Item key={\"gradeAnalyzer\"} icon={<DotChartOutlined />}>\n                            <Link to={'/admin/grade-analyzer'}>\n                                Analyzer\n              </Link>\n                        </Menu.Item>\n                    </Menu.SubMenu>\n                    <Menu.Item key={\"dataWizard\"} icon={<CloudUploadOutlined />}>\n                        <Link to={'/admin/data-wizard'}>\n                            Data Wizard\n            </Link>\n                    </Menu.Item>\n                    <Menu.Item key={\"analytics\"} icon={<ClusterOutlined />}>\n                        <Link to={'/admin/analytics'}>\n                            Analytics\n            </Link>\n                    </Menu.Item>\n                    <Menu.Item key={\"notificationCentre\"} icon={<NotificationOutlined />}>\n                        <Link to={'/admin/notification-centre'}>\n                            Notification Centre\n            </Link>\n                    </Menu.Item>\n                    <Menu.Item key={\"settings\"} icon={<ControlOutlined />}>\n                        <Link to={'/admin/settings'}>\n                            Settings\n            </Link>\n                    </Menu.Item>\n                </Menu>\n            </div>\n        )\n    }\n}\n\nexport default connector(AdminMenu);\n","import React, { Component } from \"react\";\nimport { withAdminRole } from \"../../hoc/withAdminRole\";\nimport AdminHeader from \"../../containers/AdminHeader\";\nimport { Redirect } from \"react-router-dom\";\nimport { Col, Row } from \"antd\";\nimport AdminMenu from \"./AdminMenu\";\nimport \"./style.scss\";\n\nclass Admin extends Component<any> {\n\n  render(): React.ReactNode {\n    const { isAdmin, menuKey } = this.props;\n    if (!isAdmin) return (<Redirect to={'/'} />);\n\n    return (\n      <div id={\"admin\"}>\n        <AdminHeader />\n        <Row>\n          <Col xs={4}>\n            <AdminMenu menuKey={menuKey} />\n          </Col>\n          <Col xs={20} id={'wrapper'} className={`${ menuKey !== \"settings\" && \"noOverflow\"}`}>\n            { this.props.children }\n          </Col>\n        </Row>\n      </div>\n    )\n  }\n}\n\nexport default withAdminRole(Admin);","export interface TreeNode {\n  name: string;\n  isExpanded?: boolean;\n  children?: TreeNode[];\n}\n\nexport const defaultMargin = { top: 30, left: 30, right: 30, bottom: 70 };\n\nexport const data: TreeNode = {\n  name: 'Start',\n  children: [\n    {\n      name: \"Home\",\n      children: [\n        {\n          name: \"Quizzes\",\n          children: [\n            {\n              name: \"Home\",\n              children: [\n                { name: \"Perusall\" },\n                { name: \"Quizzes\" }\n              ]\n            }\n          ]\n        }\n      ]\n    },\n    {\n      name: 'Quizzes',\n      children: [\n        { name: 'Perusall' },\n        { name: 'Attendance' },\n        {\n          name: 'C',\n          children: [\n            {\n              name: 'C1',\n            },\n            {\n              name: 'D',\n              children: [\n                {\n                  name: 'D1',\n                },\n                {\n                  name: 'D2',\n                },\n              ],\n            },\n          ],\n        },\n      ],\n    },\n    {\n      name: 'Perusall',\n      children: [\n        { name: 'Attendance' },\n        { name: 'B2' },\n        { name: 'B3' }\n      ],\n    },\n  ],\n};\n","import React, { Component } from \"react\";\nimport { Group } from '@visx/group';\nimport { hierarchy, Tree } from '@visx/hierarchy';\nimport { LinearGradient } from '@visx/gradient';\nimport { ParentSize } from '@visx/responsive';\nimport { data, defaultMargin } from \"./helpers\";\nimport getLinkComponent from \"./linkcomponent\";\n\nexport default class ApplicationAnalytics extends Component {\n  render(): React.ReactNode {\n    const margin = defaultMargin;\n\n    return (\n      <div style={{ width: '100%' }}>\n        <ParentSize>\n          { size => {\n            const width = Math.max(size.width, 400);\n            const height = 500;\n\n            const innerWidth = width - margin.left - margin.right;\n            const innerHeight = height - margin.top - margin.bottom;\n\n            let sizeWidth = innerHeight;\n            let sizeHeight = innerWidth;\n            let origin: { x: number; y: number } = { x: 0, y: 0 };\n\n            const LinkComponent = getLinkComponent({\n              layout: \"cartesian\", linkType: \"diagonal\", orientation: \"horizontal\"\n            });\n\n            return (\n              <svg width={width} height={height}>\n                <LinearGradient id=\"links-gradient\" from=\"#fd9b93\" to=\"#fe6e9e\" />\n                <rect width={width} height={height} rx={14} fill=\"#272b4d\" />\n                <Group top={margin.top} left={margin.left}>\n                  <Tree\n                    root={hierarchy(data, d => (d.isExpanded ? null : d.children))}\n                    size={[sizeWidth, sizeHeight]}\n                    separation={(a, b) => (a.parent === b.parent ? 1 : 0.5) / a.depth}\n                  >\n                    { tree => (\n                      <Group top={origin.y} left={origin.x}>\n                        { tree.links().map((link, i) => {\n                          return (\n                            <LinkComponent\n                              key={i}\n                              data={link}\n                              percent={0.5}\n                              stroke=\"rgb(254,110,158,0.6)\"\n                              strokeWidth=\"10\"\n                              fill=\"none\"\n                            />\n                          )\n                        })}\n\n                        { tree.descendants().map((node, key) => {\n                          const width = 80;\n                          const height = 30;\n\n                          let top: number;\n                          let left: number;\n\n                          top = node.x;\n                          left = node.y;\n\n                          return (\n                            <Group top={top} left={left} key={key}>\n                              {node.depth === 0 && (\n                                <circle\n                                  r={12}\n                                  fill=\"url('#links-gradient')\"\n                                  onClick={() => {\n                                    node.data.isExpanded = !node.data.isExpanded;\n                                    console.log(node);\n                                    this.forceUpdate();\n                                  }}\n                                />\n                              )}\n                              {node.depth !== 0 && (\n                                <rect\n                                  height={height}\n                                  width={width}\n                                  y={-height / 2}\n                                  x={-width / 2}\n                                  fill=\"#272b4d\"\n                                  stroke={node.data.children ? '#03c0dc' : '#26deb0'}\n                                  strokeWidth={1}\n                                  strokeDasharray={node.data.children ? '0' : '2,2'}\n                                  strokeOpacity={node.data.children ? 1 : 0.6}\n                                  rx={node.data.children ? 0 : 10}\n                                  onClick={() => {\n                                    node.data.isExpanded = !node.data.isExpanded;\n                                    console.log(node);\n                                    this.forceUpdate();\n                                  }}\n                                />\n                              )}\n                              <text\n                                dy=\".33em\"\n                                fontSize={9}\n                                fontFamily=\"Arial\"\n                                textAnchor=\"middle\"\n                                style={{ pointerEvents: 'none' }}\n                                fill={node.depth === 0 ? '#71248e' : node.children ? 'white' : '#26deb0'}\n                              >\n                                {node.data.name}\n                              </text>\n                            </Group>\n                          );\n                        })}\n                      </Group>\n                    )}\n                  </Tree>\n                </Group>\n              </svg>\n            )\n          }}\n        </ParentSize>\n      </div>\n    )\n  }\n}","import {\n  LinkHorizontal,\n  LinkVertical,\n  LinkRadial,\n  LinkHorizontalStep,\n  LinkVerticalStep,\n  LinkRadialStep,\n  LinkHorizontalCurve,\n  LinkVerticalCurve,\n  LinkRadialCurve,\n  LinkHorizontalLine,\n  LinkVerticalLine,\n  LinkRadialLine,\n} from '@visx/shape';\n\nexport default function getLinkComponent({\n                                           layout,\n                                           linkType,\n                                           orientation,\n                                         }: {\n  layout: string;\n  linkType: string;\n  orientation: string;\n}): React.ComponentType<any> {\n  let LinkComponent: React.ComponentType<any>;\n\n  if (layout === 'polar') {\n    if (linkType === 'step') {\n      LinkComponent = LinkRadialStep;\n    } else if (linkType === 'curve') {\n      LinkComponent = LinkRadialCurve;\n    } else if (linkType === 'line') {\n      LinkComponent = LinkRadialLine;\n    } else {\n      LinkComponent = LinkRadial;\n    }\n  } else if (orientation === 'vertical') {\n    if (linkType === 'step') {\n      LinkComponent = LinkVerticalStep;\n    } else if (linkType === 'curve') {\n      LinkComponent = LinkVerticalCurve;\n    } else if (linkType === 'line') {\n      LinkComponent = LinkVerticalLine;\n    } else {\n      LinkComponent = LinkVertical;\n    }\n  } else if (linkType === 'step') {\n    LinkComponent = LinkHorizontalStep;\n  } else if (linkType === 'curve') {\n    LinkComponent = LinkHorizontalCurve;\n  } else if (linkType === 'line') {\n    LinkComponent = LinkHorizontalLine;\n  } else {\n    LinkComponent = LinkHorizontal;\n  }\n  return LinkComponent;\n}\n","import React, { Component } from \"react\";\nimport { ParentSize } from '@visx/responsive';\nimport { Arc } from '@visx/shape';\nimport { Group } from '@visx/group';\nimport { Chord, Ribbon } from '@visx/chord';\n// import { scaleOrdinal } from '@visx/scale';\nimport { LinearGradient } from '@visx/gradient';\n\n// const pink = '#ff2fab';\n// const orange = '#ffc62e';\n// const purple = '#dc04ff';\n// const purple2 = '#7324ff';\n// const red = '#d04376';\n// const green = '#52f091';\n// const blue = '#04a6ff';\n// const lime = '#00ddc6';\nconst bg = '#e4e3d8';\n\nconst dataMatrix = [\n  [11975, 5871, 8916, 2868, 4229],\n  [1951, 10048, 2060, 6171, 3021],\n  [8010, 16145, 8090, 8045, 312],\n  [1013, 990, 940, 6907, 9210],\n  [4201, 3992, 3912, 6329, 5302]\n];\n\nfunction descending(a: number, b: number): number {\n  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;\n}\n\n// const color = scaleOrdinal<number, string>({\n//   domain: [0, 1, 2, 3, 4],\n//   range: ['url(#gpinkorange)', 'url(#gpurplered)', 'url(#gpurplegreen)', 'url(#gbluelime)', 'url(#gtest)'],\n// });\n\nexport default class TileTraffic extends Component {\n  render(): React.ReactNode {\n    const colors = [\"blue\", \"red\", \"orange\", \"green\", \"pink\"];\n    let colorCombos: string[][] = [];\n\n    for (let i = 0; i < colors.length - 1; i++) {\n      // This is where you'll capture that last value\n      colorCombos.push([colors[i], colors[i]]);\n      for (let j = i + 1; j < colors.length; j++) {\n        colorCombos.push([colors[i], colors[j]]);\n        colorCombos.push([colors[j], colors[i]]);\n      }\n    }\n\n    return (\n      <div style={{width: '100%'}}>\n        <ParentSize>\n          { (parent) => {\n            const centerSize = 10;\n            const height = ((parent.width || 200)) / 2;\n            const width = ((parent.width || 200));\n\n            const outerRadius = Math.min(width, height) * 0.5 - (centerSize + 10);\n            const innerRadius = outerRadius - centerSize;\n\n            console.log(colorCombos);\n            return (\n              <svg width={width} height={height}>\n                { colorCombos.map(([from, to]) =>\n                  <LinearGradient id={\"g\" + from + to} from={from} to={to} vertical={false} />\n                )}\n\n                <rect width={width} height={height} fill={bg} rx={14} />\n                <Group top={height / 2} left={width / 2}>\n                  <Chord matrix={dataMatrix} padAngle={0.05} sortSubgroups={descending}>\n                    {(master) => (\n                      <g>\n                        { master.chords.groups.map((group, i) => {\n                          return (\n                            <Arc\n                              key={`key-${i}`}\n                              data={group}\n                              innerRadius={innerRadius}\n                              outerRadius={outerRadius}\n                              fill={colors[i]}//color(i)}//color(i)}\n                              onClick={() => {\n                              }}\n                            />\n                          )\n                        })}\n                        { master.chords.map((chord, i) => {\n                          return (\n                            <Ribbon\n                              key={`ribbon-${i}`}\n                              chord={chord}\n                              radius={innerRadius}\n                              fill={`url(#g${colors[chord.source.index]}${colors[chord.target.index]})`}\n                              fillOpacity={0.75}\n                              onClick={() => {\n                                alert(`${chord.source.index}/${chord.target.index}`);\n                              }}\n                            />\n                          );\n                        })}\n                      </g>\n                    )}\n                  </Chord>\n                </Group>\n              </svg>\n            )\n          }}\n        </ParentSize>\n      </div>\n    )\n  }\n}\n","import React, { Component } from \"react\";\nimport { Group } from '@visx/group';\nimport { AxisBottom } from '@visx/axis';\nimport { ParentSize } from '@visx/responsive';\nimport {getDateScale, getTemperatureScale} from \"./helpers\";\nimport moment from \"moment\";\nimport {Select} from \"antd\";\n\n// const purple1 = '#6c5efb';\n// const purple2 = '#c998ff';\nconst purple3 = '#a44afe';\nconst background = '#eaedff';\nconst margin = { top: 40, right: 0, bottom: 0, left: 0 };\n\nconst data = [\n  { date: moment().add(0, \"days\"), \"Quizzes\": \"100\", \"Perusall\": \"83\" },\n  { date: moment().add(1, \"days\"), \"Quizzes\": \"104\", \"Perusall\": \"63\" },\n  { date: moment().add(2, \"days\"), \"Quizzes\": \"140\", \"Perusall\": \"98\" },\n  { date: moment().add(3, \"days\"), \"Quizzes\": \"170\", \"Perusall\": \"112\" },\n  { date: moment().add(4, \"days\"), \"Quizzes\": \"130\", \"Perusall\": \"120\" },\n  { date: moment().add(5, \"days\"), \"Quizzes\": \"120\", \"Perusall\": \"140\" },\n  { date: moment().add(6, \"days\"), \"Quizzes\": \"180\", \"Perusall\": \"195\" },\n]\n\nexport default class TileConversions extends Component {\n  render(): React.ReactNode {\n    return (\n      <div style={{width: '100%'}}>\n        <Select\n          mode=\"multiple\"\n          allowClear\n          style={{ marginBottom: 20, width: 300 }}\n          placeholder=\"Please select\"\n          defaultValue={['quizzes', 'perusall']}\n          onChange={() => {}}\n        >\n          <Select.Option value={'quizzes'}>\n            Quizzes\n          </Select.Option>\n          <Select.Option value={'perusall'}>\n            Perusall\n          </Select.Option>\n        </Select>\n\n        <ParentSize>\n          { (parent) => {\n            const width = parent.width;\n            const height = 500;\n\n            const xMax = width;\n            const yMax = height - margin.top - 100;\n            const keys = Object.keys(data[0]).filter(x => x !== 'date');\n\n            const temperatureTotals = data.reduce((allTotals, currentDate: any) => {\n              const totalTemperature = keys.reduce((dailyTotal, k) => {\n                dailyTotal += Number(currentDate[k]);\n                return dailyTotal;\n              }, 0);\n              allTotals.push(totalTemperature);\n              return allTotals;\n            }, [] as number[]);\n\n            const dateScale = getDateScale(data);\n            const temperatureScale = getTemperatureScale(temperatureTotals);\n            // const colorScale = getColorScale(keys, [purple1, purple2, purple3]);\n\n            dateScale.rangeRound([0, xMax]);\n            temperatureScale.range([yMax, 0]);\n            return (\n              <svg width={width} height={height}>\n                <rect x={0} y={0} width={width} height={height} fill={background} rx={14} />\n\n\n                <Group top={margin.top}>\n\n                </Group>\n                <AxisBottom\n                  top={yMax + margin.top}\n                  scale={dateScale}\n                  tickFormat={(d: any) => d}\n                  stroke={purple3}\n                  tickStroke={purple3}\n                  tickLabelProps={() => ({\n                    fill: purple3,\n                    fontSize: 11,\n                    textAnchor: 'middle',\n                  })}\n                />\n              </svg>\n            )\n          }}\n        </ParentSize>\n      </div>\n    )\n  }\n}","import { scaleBand, scaleLinear, scaleOrdinal } from \"d3-scale\";\n\nconst getDate = (d: any) => d.date.format(\"YYYY-MM-DD\");\n\nexport const getDateScale = (data: any) => {\n  return scaleBand<string>()\n    .domain(data.map((d: any) => getDate(d)))\n    .padding(0.2);\n}\n\nexport const getTemperatureScale = (totals: number[]) => {\n  return scaleLinear<number>()\n    .domain([0, Math.max(...totals)])\n    .nice();\n}\n\nexport const getColorScale = (keys: string[], colors: string[]) => {\n  return scaleOrdinal<string, string>()\n    .domain(keys)\n    .range(colors);\n}","import React, { Component } from \"react\";\nimport Admin from \"../../index\";\nimport { Divider } from \"antd\";\nimport { IProps } from \"./types\";\nimport ApplicationAnalytics from \"../../../../components/analytics/ApplicationAnalytics\";\nimport TileTraffic from \"../../../../components/analytics/TileTraffic\";\nimport TileConversions from \"../../../../components/analytics/TileConversions\";\n\nexport default class Analytics extends Component<IProps> {\n  render(): React.ReactNode {\n    return (\n      <Admin menuKey={\"analytics\"}>\n        <h1>Analytics</h1>\n        <span>Configure the dashboard visible to students.</span>\n\n        <Divider />\n\n        <h2>User interactions</h2>\n        <p>Graph overview of all user interactions.</p>\n        <ApplicationAnalytics />\n\n        <Divider />\n\n        <h2>Tile traffic</h2>\n        <p>Each ribbon shows the traffic volume between all views.</p>\n        <TileTraffic />\n\n        <Divider />\n\n        <h2>Tile conversions</h2>\n        <TileConversions />\n      </Admin>\n    )\n  }\n}"],"sourceRoot":""}