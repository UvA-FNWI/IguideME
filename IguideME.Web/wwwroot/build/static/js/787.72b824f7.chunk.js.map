{"version":3,"file":"static/js/787.72b824f7.chunk.js","mappings":"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","sources":["api/controllers/student.ts","common/Admin/AdminMenu/index.tsx","common/Admin/index.tsx","containers/ManageTileGroups/index.tsx","components/DraggableTile/ActionButtons/index.tsx","components/DraggableTile/ContentType/index.tsx","components/DraggableTile/TileType/index.tsx","components/DraggableTile/index.tsx","components/managers/TileCreateEntries/ExternalDataManager/index.tsx","components/managers/TileCreateEntries/CreationPreview/index.tsx","components/managers/TileCreateEntries/AssignmentManager/helpers.tsx","components/managers/TileCreateEntries/AssignmentManager/QuizzesTutorial/index.tsx","components/managers/TileCreateEntries/AssignmentManager/index.tsx","components/managers/TileCreateEntries/DiscussionManager/helpers.tsx","components/managers/TileCreateEntries/DiscussionManager/index.tsx","components/managers/TileCreateEntries/LearningGoalsManager/GoalEntry/GoalRequirement/index.tsx","components/managers/TileCreateEntries/LearningGoalsManager/GoalEntry/index.tsx","components/managers/TileCreateEntries/LearningGoalsManager/index.tsx","components/managers/TileCreateEntries/index.tsx","common/Admin/sections/Tiles/TileWrapper/EditTileDragger/VisibilityButton/index.tsx","common/Admin/sections/Tiles/TileWrapper/EditTileDragger/index.tsx","common/Admin/sections/Tiles/TileWrapper/helpers.ts","common/Admin/sections/Tiles/TileWrapper/index.tsx","common/Admin/sections/Tiles/index.tsx","containers/AdminHeader/index.tsx"],"sourcesContent":["import { debug } from \"../../config/config\";\nimport Controller from \"../controller\";\nimport {CanvasStudent} from \"../../models/canvas/Student\";\nimport {ConsentData} from \"../../models/app/ConsentData\";\nimport {GoalData} from \"../../models/app/GoalData\";\nimport {MOCK_STUDENTS, MOCK_CONSENTS, MOCK_GOALS} from \"../../mocks/students\";\nimport {delay} from \"../../utils/mockRequest\";\n\nexport default class StudentController extends Controller {\n\n  static getStudents(): Promise<CanvasStudent[]> {\n    if (debug()) return delay(MOCK_STUDENTS);\n\n    return this.client.get(\n      `students`\n    ).then(response => response.data);\n  }\n\n  static getConsents(): Promise<ConsentData[]> {\n    if (debug()) return delay(MOCK_CONSENTS);\n\n    return this.client.get(\n      `consents`\n    ).then(response => response.data);\n\n  }\n  static getGoalgrades(): Promise<GoalData[]> {\n    if (debug()) return delay(MOCK_GOALS);\n\n    return this.client.get(\n      `goal-grades`\n    ).then(response => response.data);\n  }\n}","import React, { Component } from \"react\";\nimport {\n    AppstoreOutlined,\n    ControlOutlined,\n    CloudUploadOutlined,\n    ClusterOutlined,\n    DotChartOutlined,\n    FundProjectionScreenOutlined,\n    LaptopOutlined,\n    TrophyOutlined,\n    NotificationOutlined,\n    DatabaseOutlined,\n    UserOutlined,\n    TeamOutlined\n} from \"@ant-design/icons\";\nimport { Menu } from \"antd\";\nimport { Link } from \"react-router-dom\";\nimport \"./style.scss\";\nimport { RootState } from \"../../../store\";\nimport { connect, ConnectedProps } from \"react-redux\";\n\nconst mapState = (state: RootState) => ({\n    user: state.user\n});\n\nconst connector = connect(mapState)\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\ntype Props = { menuKey: string } & PropsFromRedux;\n\nclass AdminMenu extends Component<Props> {\n\n    render(): React.ReactNode {\n        const { user } = this.props;\n\n        return (\n            <div id={\"adminMenu\"}>\n                <div id={\"user\"}>\n                    <h3>{user ? user.name : \"Loading profile...\"}</h3>\n                    <strong><UserOutlined /> Instructor</strong>\n                </div>\n\n                <Menu selectedKeys={[this.props.menuKey]}>\n                    <Menu.Item key={\"datamart\"} icon={<DatabaseOutlined />}>\n                        <Link to={'/admin'}>\n                            Datamart\n            </Link>\n                    </Menu.Item>\n\n                    <Menu.Item key={\"tiles\"} icon={<AppstoreOutlined />}>\n                        <Link to={'/admin/tiles'}>\n                            Tiles\n            </Link>\n                    </Menu.Item>\n\n                    <Menu.Item key={\"dashboard\"} icon={<LaptopOutlined />}>\n                        <Link to={'/admin/dashboard'}>\n                            Dashboard\n            </Link>\n                    </Menu.Item>\n\n                    <Menu.Item key={\"studentOverview\"} icon={<TeamOutlined />}>\n                        <Link to={'/admin/student-overview'}>\n                            Student Overview\n            </Link>\n                    </Menu.Item>\n                    <Menu.SubMenu key={\"submenu\"} icon={<TrophyOutlined />} title={\"Grades\"}>\n                        <Menu.Item key={\"gradePredictorOld\"} icon={<FundProjectionScreenOutlined />}>\n                            <Link to={'/admin/grade-predictor-old'}>\n                                Old Predictor\n              </Link>\n                        </Menu.Item>\n                        <Menu.Item key={\"gradePredictor\"} icon={<FundProjectionScreenOutlined />}>\n                            <Link to={'/admin/grade-predictor'}>\n                                Predictor\n              </Link>\n                        </Menu.Item>\n                        <Menu.Item key={\"gradeAnalyzer\"} icon={<DotChartOutlined />}>\n                            <Link to={'/admin/grade-analyzer'}>\n                                Analyzer\n              </Link>\n                        </Menu.Item>\n                    </Menu.SubMenu>\n                    <Menu.Item key={\"dataWizard\"} icon={<CloudUploadOutlined />}>\n                        <Link to={'/admin/data-wizard'}>\n                            Data Wizard\n            </Link>\n                    </Menu.Item>\n                    <Menu.Item key={\"analytics\"} icon={<ClusterOutlined />}>\n                        <Link to={'/admin/analytics'}>\n                            Analytics\n            </Link>\n                    </Menu.Item>\n                    <Menu.Item key={\"notificationCentre\"} icon={<NotificationOutlined />}>\n                        <Link to={'/admin/notification-centre'}>\n                            Notification Centre\n            </Link>\n                    </Menu.Item>\n                    <Menu.Item key={\"settings\"} icon={<ControlOutlined />}>\n                        <Link to={'/admin/settings'}>\n                            Settings\n            </Link>\n                    </Menu.Item>\n                </Menu>\n            </div>\n        )\n    }\n}\n\nexport default connector(AdminMenu);\n","import React, { Component } from \"react\";\nimport { withAdminRole } from \"../../hoc/withAdminRole\";\nimport AdminHeader from \"../../containers/AdminHeader\";\nimport { Redirect } from \"react-router-dom\";\nimport { Col, Row } from \"antd\";\nimport AdminMenu from \"./AdminMenu\";\nimport \"./style.scss\";\n\nclass Admin extends Component<any> {\n\n  render(): React.ReactNode {\n    const { isAdmin, menuKey } = this.props;\n    if (!isAdmin) return (<Redirect to={'/'} />);\n\n    return (\n      <div id={\"admin\"}>\n        <AdminHeader />\n        <Row>\n          <Col xs={4}>\n            <AdminMenu menuKey={menuKey} />\n          </Col>\n          <Col xs={20} id={'wrapper'} className={`${ menuKey !== \"settings\" && \"noOverflow\"}`}>\n            { this.props.children }\n          </Col>\n        </Row>\n      </div>\n    )\n  }\n}\n\nexport default withAdminRole(Admin);","import React, { Component } from \"react\";\nimport {Button, Drawer, Input, Space} from \"antd\";\nimport { PlusOutlined } from \"@ant-design/icons\";\nimport { IState } from \"./types\";\nimport {RootState} from \"../../store\";\nimport {TileActions} from \"../../store/actions/tiles\";\nimport \"./style.scss\";\nimport TileController from \"../../api/controllers/tile\";\nimport {connect, ConnectedProps} from \"react-redux\";\n\nconst mapState = (state: RootState) => ({\n  tileGroups: state.tileGroups,\n});\n\nconst mapDispatch = {\n  loadGroups: () => TileActions.loadGroups()\n}\n\nconst connector = connect(mapState, mapDispatch)\ntype PropsFromRedux = ConnectedProps<typeof connector>\n\nclass ManageTileGroups extends Component<PropsFromRedux, IState> {\n\n  state = {\n    text: \"\",\n    drawerOpen: false\n  }\n\n  render(): React.ReactNode {\n    return (\n      <div id={\"manageGroup\"}>\n        <Space direction={\"horizontal\"}>\n          <Button icon={<PlusOutlined />}\n                  className={\"successButton\"}\n                  onClick={() => this.setState({ drawerOpen: true })}\n          >\n            Group\n          </Button>\n        </Space>\n        <Drawer\n          width={400}\n          title={\"Create tile group\"}\n          placement={\"right\"}\n          closable={true}\n          onClose={() => this.setState({ drawerOpen: false })}\n          visible={this.state.drawerOpen}\n          getContainer={false}\n          style={{ position: 'absolute' }}\n        >\n          <p>Provide a title for the group.</p>\n\n          <Space style={{width: \"100%\"}} direction={\"vertical\"}>\n            <Input placeholder={\"Title\"}\n                   value={this.state.text}\n                   onChange={e => this.setState({ text: e.target.value || \"\" })}\n            />\n\n            <Space direction={\"horizontal\"}>\n              <Button type={\"ghost\"}\n                      onClick={() => this.setState({ drawerOpen: false })}>\n                Cancel\n              </Button>\n              <Button className={\"successButton\"}\n                      onClick={() => {\n                        TileController.createTileGroup(\n                          this.state.text,\n                          this.props.tileGroups.length).then(() => {\n                            this.props.loadGroups().then(() => {\n                              this.setState({ drawerOpen: false, text: \"\" });\n                            });\n                        });\n                      }}>\n                Create\n              </Button>\n            </Space>\n          </Space>\n        </Drawer>\n      </div>\n    )\n  }\n}\n\nexport default connector(ManageTileGroups);","import React, { Component } from \"react\";\nimport {Dropdown, Menu, Spin} from \"antd\";\nimport { DeleteOutlined, EditOutlined } from \"@ant-design/icons\";\nimport { IProps, IState } from \"./types\";\nimport {RootState} from \"../../../store\";\nimport {ThunkDispatch} from \"redux-thunk\";\nimport {Tile} from \"../../../models/app/Tile\";\nimport {TileActions} from \"../../../store/actions/tiles\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport TileController from \"../../../api/controllers/tile\";\nimport Swal from \"sweetalert2\";\n\nconst mapState = (state: RootState) => ({\n  tiles: state.tiles,\n});\n\nconst mapDispatch = (dispatch: ThunkDispatch<any, any, any>): any => {\n  return {\n    updateTile: async (tile: Tile) => dispatch(await TileActions.updateTile(tile))\n  };\n};\n\nconst connector = connect(mapState, mapDispatch)\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\ntype Props = IProps & PropsFromRedux;\n\nclass ActionButtons extends Component<Props, IState> {\n\n  state = {\n    loading: false,\n    tile: null\n  }\n\n  componentDidMount(): void {\n    this.setState({ tile: this.props.tile });\n  }\n\n  render(): React.ReactNode {\n    const menu = (\n      <Menu onClick={() => {}}>\n        <Menu.Item key=\"1\" icon={<EditOutlined />} onClick={this.props.editTile}>\n          Edit\n        </Menu.Item>\n        <Menu.Item key=\"2\" icon={<DeleteOutlined />} onClick={() => {\n            Swal.fire({\n              title: 'Do you really want to delete this tile?',\n              showCancelButton: true,\n              confirmButtonText: 'Delete',\n              confirmButtonColor: 'rgb(255, 110, 90)',\n              showLoaderOnConfirm: true,\n              allowOutsideClick: () => !Swal.isLoading()\n            }).then((result) => {\n              if (result.isConfirmed) {\n                this.props.deleteTile(tile!.id).then(() => [\n                  Swal.fire('Task completed!', '', 'success')\n                ]);\n              }\n            })\n          }\n        } danger>\n          Delete\n        </Menu.Item>\n      </Menu>\n    );\n\n    let { tile, loading }: IState = this.state;\n\n    if (!tile) return null;\n    tile = tile as Tile;\n\n\n    return (\n      <div style={{float: 'right'}}>\n        <Dropdown.Button overlay={menu}\n                         className={loading ? \"\" : (tile!.visible ? \"successButtonGroup\" : \"dangerButtonGroup\")}\n                         onClick={() => {\n                           this.setState({ loading: true }, () => {\n                             let t = tile!;\n                             t.visible = !t.visible;\n                             TileController.updateTile(t).then(async newTile => {\n                               await (this.props as any).updateTile(newTile);\n                               this.setState({ tile: t, loading: false });\n                             });\n                           });\n                         }}\n        >\n          { loading ?\n            <Spin size={'small'} /> :\n            (tile!.visible ? \"Visible\" : \"Hidden\")\n          }\n        </Dropdown.Button>\n      </div>\n    );\n  }\n}\n\nexport default connector(ActionButtons);","import React, { Component } from \"react\";\nimport {TileContentTypes} from \"../../../models/app/Tile\";\nimport { FieldBinaryOutlined, AppstoreOutlined, StockOutlined, TrophyOutlined } from \"@ant-design/icons\";\nimport {Space} from \"antd\";\n\nexport default class ContentType extends Component<{ content: TileContentTypes}> {\n\n  getName = () => {\n    switch (this.props.content) {\n      case \"BINARY\":\n        return \"Binary\";\n      case \"ENTRIES\":\n        return \"Entries\";\n      case \"LEARNING_OUTCOMES\":\n        return \"Learning Outcomes\";\n      case \"PREDICTION\":\n        return \"Prediction\";\n    }\n  }\n\n  getIcon = () => {\n    switch(this.props.content) {\n      case \"BINARY\":\n        return <FieldBinaryOutlined />;\n      case \"ENTRIES\":\n        return <AppstoreOutlined />;\n      case \"PREDICTION\":\n        return <StockOutlined />;\n      case \"LEARNING_OUTCOMES\":\n        return <TrophyOutlined />;\n    }\n  }\n\n  render(): React.ReactNode {\n    return (\n      <div id={\"contentType\"}>\n        <Space direction={\"horizontal\"} style={{ width: '100%'}}>\n          { this.getIcon() }\n          <span><b>{ this.getName() }</b></span>\n        </Space>\n      </div>\n    )\n  }\n}","import React, { Component } from \"react\";\nimport {TileTypeTypes} from \"../../../models/app/Tile\";\n\nexport default class TileType extends Component<{ type: TileTypeTypes }> {\n\n  getName = () => {\n    switch (this.props.type) {\n      case \"ASSIGNMENTS\":\n        return \"Assignments\";\n      case \"DISCUSSIONS\":\n        return \"Discussions\";\n      case \"EXTERNAL_DATA\":\n        return \"External Data\";\n      default:\n        return \"N/A\";\n    }\n  }\n\n  render(): React.ReactNode {\n    return (\n      <div id={\"tileType\"}>\n        <span><b>{ this.getName() }</b></span>\n      </div>\n    )\n  }\n}","import React, { Component } from \"react\";\nimport {IProps, IState} from \"./types\";\nimport ActionButtons from \"./ActionButtons\";\nimport {Row, Col, Divider, Tag, Tooltip, Button} from \"antd\";\nimport {BellTwoTone} from \"@ant-design/icons\";\nimport ContentType from \"./ContentType\";\nimport TileType from \"./TileType\";\nimport TileController from \"../../api/controllers/tile\";\nimport {Draggable} from \"react-smooth-dnd\";\nimport \"./style.scss\";\nimport {RootState} from \"../../store\";\nimport {TileActions} from \"../../store/actions/tiles\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport {Tile} from \"../../models/app/Tile\";\nimport {ThunkDispatch} from \"redux-thunk\";\n\nconst mapState = (state: RootState) => ({\n  tiles: state.tiles,\n  tileEntries: state.tileEntries\n});\n\nconst mapDispatch = ( dispatch: ThunkDispatch<any, any, any> ): any => {\n  return {\n    updateTile: async (tile: Tile) => dispatch(await TileActions.updateTile(tile))\n    //signIn: (credentials: LoginCredentials) => dispatch(signIn(credentials))\n  };\n};\n\nconst connector = connect(mapState, mapDispatch)\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\ntype Props = IProps & PropsFromRedux;\n\nclass DraggableTile extends Component<Props, IState> {\n\n  state = {\n    tile: null,\n    entriesLoaded: false,\n    entries: [],\n    updatingNotifications: []\n  }\n\n  componentDidMount(): void {\n    this.setState({tile: this.props.tile});\n    TileController.getTileEntries(this.props.tile.id).then(entries => {\n      this.setState({ entries, entriesLoaded: true });\n    });\n  }\n\n  componentDidUpdate(prevProps: Readonly<IProps>, prevState: Readonly<{}>, snapshot?: any): void {\n    let { tile }: IState = this.state;\n\n    if (tile !== undefined) return;\n\n    tile = tile as Tile;\n\n    if (prevProps.tile.id !== tile!.id) {\n      TileController.getTileEntries(tile!.id).then(entries => {\n        this.setState({ entries, entriesLoaded: true });\n      });\n    }\n  }\n\n  toggleNotifications = async (tile: Tile) => {\n    const { updatingNotifications }: IState = this.state;\n    this.setState({ updatingNotifications: [...updatingNotifications, tile.id]}, () => {\n      tile.notifications = !tile.notifications;\n      TileController.updateTile(tile).then(async t => {\n        (this.props as any).updateTile(t);\n        this.setState({\n          updatingNotifications: updatingNotifications\n            .filter(x => x !== tile.id),\n          tile: t\n        });\n      })\n    });\n  }\n\n  render(): React.ReactNode {\n    let { tile, entriesLoaded, entries, updatingNotifications }: IState = this.state;\n\n    if (!tile) return null;\n    tile = tile as Tile;\n\n    return (\n      <Draggable key={'dragTile' + tile!.id.toString()} className={\"tile\"}>\n        <div>\n          <div className={\"padded\"}>\n            <ActionButtons {...{tile, editTile: this.props.editTile, deleteTile: this.props.deleteTile}} />\n            <h3>{ tile!.title }</h3>\n            <Row gutter={10} style={{ marginTop: 20 }}>\n              <Col xs={12}>\n                <span>Content type</span>\n                <ContentType content={tile!.content} />\n              </Col>\n\n              <Col xs={12} style={{ textAlign: 'right' }}>\n                <span>Tile type</span>\n                <TileType type={tile!.type} />\n              </Col>\n\n              <Col xs={24} style={{ margin: \"20px 0\" }}>\n                <Divider />\n              </Col>\n\n              <Col xs={18}>\n                <div>\n                  { entriesLoaded ?\n                    <span>\n                      <Tag key={'tileTag' + tile!.id.toString()}>\n                        { entries.length }\n                      </Tag>\n                      children\n                    </span> :\n                    <span>Loading entries...</span>\n                  }\n                </div>\n              </Col>\n\n              <Col xs={6}>\n                <Tooltip key={`tooltipTile#${tile!.id}`}\n                         title={<span>Notifications are turned <strong>{ tile!.notifications ? \"on\" : \"off\"}</strong>.</span>}>\n                  <Button type={\"ghost\"}\n                          key={`toggleNotificationsTile#${tile!.id}`}\n                          loading={updatingNotifications.includes(tile!.id)}\n                          style={{ float: 'right' }}\n                          shape=\"circle\"\n                          icon={<BellTwoTone twoToneColor={tile!.notifications ? \"rgb(0, 185, 120)\" : \"rgb(255, 110, 90)\"} />}\n                          onClick={() => this.toggleNotifications(tile as Tile)}\n                  />\n                </Tooltip>\n              </Col>\n            </Row>\n          </div>\n        </div>\n      </Draggable>\n    );\n  }\n}\n\nexport default connector(DraggableTile);","import React, { Component } from 'react';\nimport {Link} from \"react-router-dom\";\nimport \"./style.scss\";\n\nexport default class ExternalDataManager extends Component {\n  render(): React.ReactNode {\n    return (\n      <div id={\"externalDataManager\"}>\n        <h2>Tiles of type external data need no further configuration.</h2>\n        <span>Data can be uploaded via the <Link to={'/admin/data-wizard'}>Data Wizard</Link>!</span>\n        <div id={\"illustration\"} />\n      </div>\n    );\n  }\n}","import React, { Component } from \"react\";\nimport {Col, Row} from \"antd\";\nimport FadeIn from \"react-fade-in\";\nimport {TileContentTypes} from \"../../../../models/app/Tile\";\n\nexport default class CreationPreview extends Component<{ contentType: TileContentTypes }> {\n\n  getTitle = () => {\n    switch (this.props.contentType) {\n      case \"BINARY\":\n        return \"Binary tiles\";\n      case \"ENTRIES\":\n        return \"Entries\";\n      default:\n          return \"\";\n    }\n  }\n\n  getDescription = () => {\n    switch (this.props.contentType) {\n      case \"BINARY\":\n        return \"Binary tiles project data whose unit can take on only two possible states, given by a grade of 0 and 1.\";\n      case \"ENTRIES\":\n        return \"The entries content type is most suitable for tiles containing gradable components\";\n      default:\n        return \"\";\n    }\n  }\n\n  render(): React.ReactNode {\n    const { contentType } = this.props;\n\n    console.log(\"RENDER\", contentType);\n    if (!contentType) {\n      return <span>error?</span>;\n    }\n\n    ////<div id={\"mockRender\"} className={contentType.toLowerCase()} />\n\n    return (\n      <div id={\"preview\"}>\n        <Row gutter={[10, 10]}>\n          <Col xs={24} md={8}>\n            <FadeIn>\n              <div id={\"mockRender\"} className={contentType ? contentType.toLowerCase() : \"\"} />\n            </FadeIn>\n          </Col>\n          <Col xs={24} md={16} id={\"description\"}>\n            <div id={\"descriptionWrapper\"}>\n              <h2>{ this.getTitle() }</h2>\n              <span>{ this.getDescription() }</span>\n            </div>\n          </Col>\n        </Row>\n      </div>\n    )\n  }\n}","import React from \"react\";\nimport {CloseCircleOutlined, CheckCircleOutlined} from \"@ant-design/icons\";\nimport {Button} from \"antd\";\nimport { DeleteOutlined } from \"@ant-design/icons\";\nimport {TileEntry} from \"../../../../models/app/Tile\";\nimport {CanvasAssignment} from \"../../../../models/canvas/Assignment\";\n\nexport const getColumns = (\n  removeAssignment: (entry: TileEntry) => any,\n  canvasAssignments: CanvasAssignment[]) => {\n  return [\n    {\n      title: 'Name',\n      dataIndex: 'title',\n      key: 'title',\n    }, {\n      title: 'On Canvas',\n      dataIndex: 'onCanvas',\n      key: 'onCanvas',\n      render: (text: string, obj: TileEntry) => {\n        const assignment = canvasAssignments.find(c => c.name === obj.title);\n        return assignment !== undefined ?\n          <span className={\"binary success\"}><CheckCircleOutlined /> Yes</span> :\n          <span className={\"binary fail\"}><CloseCircleOutlined /> <b>No</b></span>\n      }\n    }, {\n      title: 'Published',\n      dataIndex: 'published',\n      key: 'published',\n      render: (text: string, obj: TileEntry) => {\n        const assignment = canvasAssignments.find(c => c.name === obj.title);\n        return (assignment && assignment.published) ?\n          <div className={\"binary success\"}><CheckCircleOutlined /> <span>Yes</span></div> :\n          <div className={\"binary fail\"}><CloseCircleOutlined /> <span>No</span></div>\n      }\n    }, {\n      title: 'Action',\n      dataIndex: 'action',\n      key: 'action',\n      render: (_: string, obj: TileEntry) => {\n        return (\n          <Button danger\n                  icon={<DeleteOutlined />}\n                  shape={\"round\"}\n                  type={\"primary\"}\n                  size={\"large\"}\n                  onClick={() => removeAssignment(obj)}\n          />\n        )\n      }\n    }\n  ]\n}","import React, { Component } from \"react\";\nimport {Button, Col, Divider, Modal, Row} from \"antd\";\n\nexport default class QuizzesTutorial extends Component<{ open: boolean, setOpen: (val: boolean) => any }> {\n  render(): React.ReactNode {\n    return (\n      <Modal\n        title={\"Response Canvas quizzes\"}\n        centered\n        closable={true}\n        visible={this.props.open}\n        width={'90%'}\n        onCancel={() => this.props.setOpen(false)}\n        footer={\n          <div>\n            <Button onClick={() => this.props.setOpen(false)}>\n              Close\n            </Button>\n          </div>\n        }\n      >\n        <Row gutter={[10, 10]}>\n          <Col xs={24} md={8}>\n            <h2>Create a quiz</h2>\n            <p>The responsive setup of the quizzes is reliant on a varying points-per-question. This functionality is only available in the \"New Quizzes\" Quiz Engine. Select the \"New Quizzes\" and hit \"Submit\".</p>\n          </Col>\n\n          <Col xs={24} md={16} style={{textAlign: 'center'}}>\n            <img src={'/assets/img/tutorial/quiz-create.jpg'} style={{height: '100%', maxHeight: 400}} alt={''} />\n          </Col>\n\n          <Col xs={24}><Divider /></Col>\n\n          <Col xs={24}>\n            <h2>Quiz details</h2>\n            <p>When you select the Quiz Engine the assignment details must be provided. Be sure to tick the box in front of <i>\"Do not count this assignment towards the final grade\"</i>. When all details are in-place hit the \"Build\" button.</p>\n          </Col>\n\n          <Col xs={24}><Divider /></Col>\n\n          <Col xs={24} md={8}>\n            <h2>Specifying the question type</h2>\n            <p>To add a question to the quiz click the plus-button placed under the instructions field. You will be asked which type of question you want to add. Choose the \"Multiple choice\" question type.</p>\n          </Col>\n\n          <Col xs={24} md={16} style={{textAlign: 'center'}}>\n            <img src={'/assets/img/tutorial/quiz-add-question.jpg'} style={{height: '100%', maxHeight: 300}} alt={''}/>\n          </Col>\n\n          <Col xs={24}><Divider /></Col>\n\n          <Col xs={24} md={8}>\n            <h2>Formulating the question</h2>\n            <p>When you specify the question type you are able to formulate the question. In the right-side figure an example formulation is shown asking the student to specify the time spend on an assignment. Other use-cases may be to poll the reading times on class exercises. Be sure to tick the <i>\"Varying points by answer\"</i> checkbox. Create as many options as you wish and use the assigned points as a measurement of the student's answer. In the example students are rewarded points equivalent to the maximum time of the answer in minutes. Be consistent with the time unit used for the assigned points.</p>\n          </Col>\n\n          <Col xs={24} md={16} style={{textAlign: 'center'}}>\n            <img src={'/assets/img/tutorial/quiz-question.jpg'} style={{height: '100%', maxHeight: 320}} alt={''}/>\n          </Col>\n\n          <Col xs={24}><Divider /></Col>\n\n          <Col xs={24} md={8}>\n            <h2>Quiz Settings</h2>\n            <p>Lastly we wish to hide the obtained points from the students. To do this navigate to the \"Settings\" tab and enable the \"Restrict result view\". Uncheck the box where students are shown their rewarded points.</p>\n          </Col>\n\n          <Col xs={24} md={16} style={{textAlign: 'center'}}>\n            <img src={'/assets/img/tutorial/quiz-settings.jpg'} style={{height: '100%', maxHeight: 320}} alt={''}/>\n          </Col>\n\n          <Col xs={24}><Divider /></Col>\n\n          <Col xs={24}>\n            <h2>We're done!</h2>\n            <p>That's it, students should now be able to take the quiz and IGuideME is able to extract the rewarded points per student.</p>\n          </Col>\n        </Row>\n      </Modal>\n    )\n  }\n}","import React, { Component } from 'react';\nimport {IProps, IState} from \"./types\";\nimport CreatableSelect from 'react-select/creatable';\nimport {Space, Table, Switch, Divider, Alert} from \"antd\";\nimport {QuestionOutlined} from \"@ant-design/icons\";\nimport {getColumns} from \"./helpers\";\nimport QuizzesTutorial from \"./QuizzesTutorial\";\nimport {IManagerProps} from \"../types\";\nimport \"./style.scss\";\nimport {editState, TileEntry} from \"../../../../models/app/Tile\";\n\ntype Props = IManagerProps & IProps;\n\nexport default class AssignmentManager extends Component<Props, IState> {\n\n  state = {\n    tutorialOpen: false,\n  }\n\n  addAssignment = (name: string) => {\n    const { canvasAssignments, tile }: Props = this.props;\n    const assignment = canvasAssignments.find(a => a.name === name);\n\n    const entry: TileEntry = {\n      id: -1,\n      state: editState.new,\n      tile_id: tile ? tile.id : -1,\n      title: !assignment ? name : assignment.name,\n      type: \"ASSIGNMENT\"\n    };\n\n    this.props.addEntry(entry);\n  }\n\n  render(): React.ReactNode {\n    const { activeAssignments, canvasAssignments }: Props = this.props;\n\n    return (\n      <div id={\"assignmentManager\"}>\n        <h2>Select assignments.</h2>\n        <Divider />\n\n        <Space direction={\"vertical\"} style={{width: '100%'}}>\n          <QuizzesTutorial open={this.state.tutorialOpen} setOpen={(val) => this.setState({ tutorialOpen: val })} />\n          <span>\n            <Switch checked={this.props.graphView}\n                    onChange={(val) => this.props.setGraphView(val)}\n                    style={{zIndex: 0}}\n            />\n              &nbsp;\n              <b>Enable graph view. </b>If enabled entries will be visualized using a graph instead of the tiles.\n          </span>\n\n          <Alert message={\n            <span>\n              <QuestionOutlined />\n              &nbsp;\n              <button onClick={() => this.setState({ tutorialOpen: true })} style={{background: \"none\", border: \"none\", padding: \"0!important\", cursor: 'pointer', color: '#069', textDecoration: 'underline'}}>\n                  Create responsive quizzes.\n                </button>\n              {' '}\n              Responsive quizzes are like surveys which can be used to poll the time spent on an assignment.\n            </span>\n          } type=\"info\" />\n\n          <div id={\"assignmentRegistry\"}>\n            <Table columns={getColumns(this.props.removeEntry, canvasAssignments)}\n                   pagination={false}\n                   dataSource={activeAssignments} //.sort((a, b) => a.position - b.position)\n            />\n          </div>\n\n          <div>\n            <CreatableSelect\n              options={canvasAssignments\n                .filter(a => !activeAssignments.map(x => x.title).includes(a.name) )\n                .map(a => ({ label: a.name, value: a.id }))}\n              onCreateOption={(name: string) => this.addAssignment(name)}\n              onChange={(e) => this.addAssignment(e!.label.toString())}\n              value={null}\n            />\n          </div>\n        </Space>\n      </div>\n    );\n  }\n}","import {Button} from \"antd\";\nimport { DeleteOutlined, CheckCircleOutlined, CloseCircleOutlined } from \"@ant-design/icons\";\nimport React from \"react\";\nimport {TileEntry} from \"../../../../models/app/Tile\";\nimport {CanvasDiscussion} from \"../../../../models/canvas/Discussion\";\n\nexport const getColumns = (\n  removeDiscussion: (entry: TileEntry) => any,\n  canvasDiscussions: CanvasDiscussion[]\n) => {\n  return [\n    {\n      title: 'Title',\n      dataIndex: 'title',\n      key: 'title',\n    }, {\n      title: 'On Canvas',\n      dataIndex: 'onCanvas',\n      key: 'onCanvas',\n      render: (text: string, obj: TileEntry) => {\n        const discussion = canvasDiscussions.find(d => d.title === obj.title);\n        return discussion !== undefined ?\n          <span className={\"binary success\"}><CheckCircleOutlined /> Yes</span> :\n          <span className={\"binary fail\"}><CloseCircleOutlined /> <b>No</b></span>\n      }\n    }, {\n      title: 'Posted by',\n      dataIndex: 'posted_by',\n      key: 'posted_by',\n      render: (text: string, obj: TileEntry) => {\n        const discussion = canvasDiscussions.find(d => d.title === obj.title);\n        return discussion ? discussion.posted_by : \"n/a\"\n      }\n    }, {\n      title: 'Posted at',\n      dataIndex: 'posted_at',\n      key: 'posted_at',\n      render: (text: string, obj: TileEntry) => {\n        const discussion = canvasDiscussions.find(d => d.title === obj.title);\n        return discussion ? discussion.posted_at : \"n/a\"\n      }\n    }, {\n      title: 'Action',\n      dataIndex: 'action',\n      key: 'action',\n      render: (_: string, obj: TileEntry) => {\n        return (\n          <Button danger\n            icon={<DeleteOutlined />}\n            shape={\"round\"}\n            type={\"primary\"}\n            size={\"large\"}\n            onClick={() => removeDiscussion(obj)}\n          />\n      )\n      }\n    }\n  ]\n}","import React, { Component } from \"react\";\nimport {Divider, Switch, Table} from \"antd\";\nimport {getColumns} from \"./helpers\";\nimport CreatableSelect from \"react-select/creatable\";\nimport FadeIn from \"react-fade-in\";\nimport {IManagerProps} from \"../types\";\nimport {IProps} from \"./types\";\nimport {editState, TileEntry} from \"../../../../models/app/Tile\";\n\ntype Props = IManagerProps & IProps;\n\nclass DiscussionManager extends Component<Props> {\n\n\n  addDiscussion = (title: string) => {\n    const { canvasDiscussions, tile }: Props = this.props;\n    const assignment = canvasDiscussions.find(d => d.title === title);\n\n    const entry: TileEntry = {\n      id: -1,\n      state: editState.new,\n      tile_id: tile ? tile.id : -1,\n      title: !assignment ? title : assignment.title,\n      type: \"DISCUSSION\"\n    }\n\n    this.props.addEntry(entry);\n  }\n\n  render(): React.ReactNode {\n    const { activeDiscussions, canvasDiscussions, wildcard } = this.props;\n\n    return (\n      <div id={\"discussionManager\"}>\n        <h2>Configure discussion metric.</h2>\n        <Divider />\n        <span>\n          <Switch checked={wildcard}\n                  onChange={(val) => {\n                    this.props.setWildcard(val)\n                  }}\n                  style={{zIndex: 0}}\n          />\n          &nbsp;\n          <strong>Count all user posts.</strong> When enabled all posted submissions will be extracted for all students. If you wish to count the replies to a certain post uncheck this functionality and specify the posts you wish to track the replies of.\n        </span>\n\n        { !wildcard &&\n          <FadeIn>\n            <div id={\"assignmentRegistry\"}>\n              <Table columns={getColumns(this.props.removeEntry, canvasDiscussions)}\n                     pagination={false}\n                     dataSource={activeDiscussions}\n              />\n            </div>\n\n            <div>\n              <CreatableSelect\n                options={canvasDiscussions\n                  .filter(a => !activeDiscussions.map(x => x.title).includes(a.title) )\n                  .map(a => ({ label: a.title, value: a.id }))}\n                onCreateOption={(title: string) => this.addDiscussion(title)}\n                onChange={(e) => this.addDiscussion(e!.label.toString())}\n                value={null}\n              />\n            </div>\n          </FadeIn>\n        }\n      </div>\n    )\n  }\n}\n\nexport default DiscussionManager;","import React, { Component } from \"react\";\nimport {Button, Col, InputNumber, Row} from \"antd\";\nimport {DeleteOutlined} from \"@ant-design/icons\";\nimport Select from \"react-select\";\nimport {IProps} from \"./types\";\nimport Swal from \"sweetalert2\";\nimport {RootState} from \"../../../../../../store\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport TileController from \"../../../../../../api/controllers/tile\";\nimport \"./style.scss\";\nimport { editState } from \"../../../../../../models/app/Tile\";\n\nconst mapState = (state: RootState) => ({\n  tiles: state.tiles,\n  tileEntries: state.tileEntries\n});\n\nconst connector = connect(mapState)\ntype PropsFromRedux = ConnectedProps<typeof connector>\ntype Props = IProps & PropsFromRedux;\n\nclass GoalRequirement extends Component<Props> {\n\n  state = {\n    loading: false,\n    metaKeys: []\n  }\n\n  componentDidMount(): void {\n    const { requirement } = this.props;\n    if (requirement.entry_id !== -1 && requirement.entry_id !== null) {\n      this.loadMetaKeys(requirement.entry_id as number);\n    }\n  }\n\n  componentWillReceiveProps(nextProps: Readonly<Props>, nextContext: any): void {\n    if (nextProps.requirement.entry_id !== this.props.requirement.entry_id &&\n        !isNaN(nextProps.requirement.entry_id as number)) {\n      this.loadMetaKeys(nextProps.requirement.entry_id as number);\n    }\n\n    if (nextProps.requirement.entry_id === -1) {\n      this.setState({\n        loading: false, metaKeys: []\n      });\n    }\n  }\n\n  loadMetaKeys = (id: number) => {\n    this.setState({ loading: true }, () => {\n      TileController.getTileEntriesMetaKeys(id).then(metaKeys => {\n        this.setState({\n          loading: false, metaKeys\n        });\n      });\n    });\n  }\n\n  getExpressionLabel = (expression: string | null) => {\n    switch (expression) {\n      case \"lte\": return \"≤ (less than)\";\n      case \"gte\": return \"≥ (greater than)\";\n      case \"e\": return \"= (equal to)\";\n      default: return \"\";\n    }\n  }\n\n  getMetaKeyLabel = (key: string) => {\n    switch (key) {\n      case \"grade\": return \"Grade (default)\";\n      default: return key;\n    }\n  }\n\n  render(): React.ReactNode {\n    let { requirement, tiles, tileEntries } = this.props;\n\n    let entryOptions: {label: string, value: number | string }[] = tileEntries\n      .filter(e => e.tile_id === requirement.tile_id)\n      .map(e => ({ label: e.title, value: e.id }));\n\n    const targetTile = tiles.find(t => t.id === requirement.tile_id);\n    if (targetTile && targetTile.content === \"BINARY\") {\n      entryOptions = [\n        { value: 'count', label: 'COUNT (success)' },\n        ...entryOptions\n      ];\n    }\n\n    if (requirement.state === editState.removed) {\n      return null;\n    }\n\n    return (\n      <div className={\"goalRequirement\"}>\n        <Row gutter={[10, 10]}>\n          <Col xs={3} md={2}>\n            <Button shape={\"circle\"}\n                    danger\n                    onClick={() => {\n                      Swal.fire({\n                        icon: 'warning',\n                        title: 'Do you really want to delete this requirement?',\n                        showCancelButton: true,\n                        confirmButtonText: 'Delete',\n                        showLoaderOnConfirm: true,\n                        allowOutsideClick: true\n                      }).then((result) => {\n                        if (result.isConfirmed) {\n                          requirement.state = editState.removed;\n                          this.props.updateRequirement(requirement);\n                          this.setState({requirement});\n                        }\n                      });\n                    }}\n                    icon={<DeleteOutlined />}/>\n          </Col>\n          <Col xs={21} md={8}>\n            Tile\n            <Select value={{\n                      value: requirement.tile_id,\n                      label: tiles.find(t => t.id === requirement.tile_id)?.title || \"Choose tile\"\n                    }}\n                    options={tiles.map(t => ({ value: t.id, label: t.title }))}\n                    onChange={(e) => {\n                      if (!e) return;\n\n                      requirement.tile_id = e.value;\n                      requirement.entry_id = -1;\n                      this.props.updateRequirement(requirement);\n                      this.setState({requirement});\n                    }}\n            />\n          </Col>\n          <Col xs={24} md={8}>\n            Entry\n            <Select value={{\n                      value: requirement.entry_id,\n                      label: requirement.entry_id === \"count\" ?\n                        \"COUNT (success)\" :\n                        (tileEntries.find(e => e.id === requirement.entry_id)?.title || \"Choose entry\")\n                    }}\n                    isDisabled={requirement.tile_id === -1}\n                    onChange={(e) => {\n                      if (!e) return;\n\n                      requirement.entry_id = e.value;\n                      this.props.updateRequirement(requirement);\n                      this.setState({requirement});\n\n                    }}\n                    options={entryOptions} />\n            <br />\n            Meta\n            <Select isLoading={this.state.loading}\n                    value={{ value: requirement.meta_key || \"\", label: this.getMetaKeyLabel(requirement.meta_key || \"\") }}\n                    onChange={e => {\n                      if (!e) return;\n                      requirement.meta_key = e.value;\n                      this.props.updateRequirement(requirement);\n                      this.setState({requirement});\n                    }}\n                    isDisabled={requirement.entry_id === -1 || requirement.entry_id === \"count\"}\n                    options={[\n                      { value: 'grade', label: 'Grade (default)' },\n                      ...this.state.metaKeys.map(k => ({\n                        value: k, label: k\n                      }))\n                    ]} />\n          </Col>\n          <Col xs={24} md={3}>\n            Expression\n            <Select isDisabled={requirement.entry_id === -1}\n                    value={requirement.expression ? { label: this.getExpressionLabel(requirement.expression), value: requirement.expression } : undefined}\n                    onChange={e => {\n                      if (!e) return;\n\n                      requirement.expression = e.value;\n                      this.props.updateRequirement(requirement);\n                      this.setState({requirement});\n                    }}\n                    options={[\n                      { value: 'lte', label: '≤ (less than)' },\n                      { value: 'e', label: '= (equal to)' },\n                      { value: 'gte', label: '≥ (greater than)' }\n                    ]}\n            />\n          </Col>\n          <Col xs={24} md={3}>\n            <br />\n            <InputNumber step={.5}\n                         size={\"large\"}\n                         disabled={requirement.expression === null}\n                         value={requirement.value}\n                         onChange={value => {\n                          requirement.value = Number(value);\n                          this.props.updateRequirement(requirement);\n                          this.setState({requirement});\n                        }}\n            />\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default connector(GoalRequirement);","import React, { Component } from \"react\";\nimport {Alert, Button, Divider, Input, Space} from \"antd\";\nimport {DeleteOutlined, PlusOutlined} from \"@ant-design/icons\";\nimport GoalRequirement from \"./GoalRequirement\";\nimport {GoalRequirement as GoalRequirementModel} from \"../../../../../models/app/LearningGoal\";\nimport {editState} from \"../../../../../models/app/Tile\";\nimport {IProps} from \"./types\";\nimport {LearningGoal} from \"../../../../../models/app/LearningGoal\";\nimport Swal from \"sweetalert2\";\nimport \"./style.scss\";\n\nexport default class GoalEntry extends Component<IProps> {\n\n  componentDidMount(): void {\n    this._initialize(this.props.goal);\n  }\n\n  componentWillReceiveProps(nextProps: Readonly<IProps>, nextContext: any): void {\n    this._initialize(nextProps.goal);\n  }\n\n  _initialize = (goal: LearningGoal) => {\n    this.setState({ goal });\n  }\n\n  addNewRequirement = () => {\n    const {goal, tile} = this.props;\n    goal.requirements = [{\n      id: -1,\n      state: editState.new,\n      expression: null,\n      goal_id: goal.id,\n      tile_id: tile ? tile.id : -1,\n      entry_id: -1,\n      meta_key: \"grade\",\n      value: 0\n    }, ...goal.requirements];\n    this.props.updateGoal(goal);\n  }\n\n  updateRequirement = (requirement: GoalRequirementModel) => {\n    if ((requirement.state !== editState.new) && (requirement.state !== editState.removed)) {\n      requirement.state = editState.updated;\n    }\n    this.props.updateGoal(this.props.goal);\n    this.setState({goal: this.props.goal});\n  }\n\n  render(): React.ReactNode {\n    let goal = this.props.goal;\n\n    if (goal.state === editState.removed) {\n      return null;\n    }\n\n    return (\n      <div className={\"goalEntry\"} >\n        <div className={\"title\"}>\n          <span><b>Title</b></span>\n          <Input value={goal.title}\n                 size={\"large\"}\n                 onChange={e => {\n                   goal.title = e.target.value;\n                   this.props.updateGoal(goal);\n                 }}\n          />\n        </div>\n\n        <div className={\"actions\"}>\n          <Space direction={\"horizontal\"}>\n            <Button shape={\"round\"}\n                    danger\n                    onClick={() => {\n                      Swal.fire({\n                        icon: 'warning',\n                        title: 'Do you really want to delete this goal?',\n                        text: `Goal: ${goal.title} will be deleted on save`,\n                        showCancelButton: true,\n                        confirmButtonText: 'Delete',\n                        showLoaderOnConfirm: true,\n                        allowOutsideClick: true\n                      }).then((result) => {\n                        if (result.isConfirmed) {\n                          goal.state = editState.removed;\n                          this.setState({goal});\n                        }\n                      });\n                    }}\n                    icon={<DeleteOutlined />}>\n              Delete goal\n            </Button>\n\n            <Button shape={\"round\"}\n                    onClick={this.addNewRequirement}\n                    icon={<PlusOutlined />}>\n              Requirement\n            </Button>\n          </Space>\n        </div>\n\n        <Divider />\n        <span><b>Requirements</b></span>\n\n        { goal.requirements.map(r => {\n          return (\n            <GoalRequirement updateRequirement={this.updateRequirement}\n                             requirement={r} />\n          );\n        })}\n\n        { goal.requirements.length === 0 &&\n          <Alert message=\"Goal doesn't have a requirement\" type=\"warning\" showIcon />\n        }\n      </div>\n    );\n  }\n}","import React, { Component } from \"react\";\nimport {Button, Divider} from \"antd\";\nimport {PlusOutlined} from \"@ant-design/icons\";\nimport GoalEntry from \"./GoalEntry\";\nimport {IProps, IState} from \"./types\";\nimport {LearningGoal} from \"../../../../models/app/LearningGoal\";\nimport { editState } from \"../../../../models/app/Tile\";\n\nexport default class LearningGoalsManager extends Component<IProps, IState> {\n\n  addNewGoal = () => {\n    const { tile, goals } = this.props;\n\n    this.props.setGoals([\n      { id: -1,\n        state: editState.new,\n        tile_id: tile ? tile.id : -1,\n        title: \"\",\n        requirements: []\n      },\n      ...goals\n    ]);\n  }\n\n  updateGoal = (goal: LearningGoal) => {\n    if ((goal.state !== editState.new) && (goal.state !== editState.removed)) {\n      goal.state = editState.updated;\n    }\n    this.props.setGoals(this.props.goals);\n  }\n\n  render(): React.ReactNode {\n    const { tile, goals } = this.props;\n\n    return (\n      <div id={\"learningGoalsManager\"}>\n        <h2>Construct learning goals.</h2>\n        <Button shape={\"round\"}\n                icon={<PlusOutlined />}\n                onClick={this.addNewGoal}\n        >\n          Goal\n        </Button>\n        <Divider />\n\n        { goals.map(goal => {\n          return (\n            <GoalEntry tile={tile}\n                       goal={goal}\n                       updateGoal={this.updateGoal}\n            />\n          )\n        })}\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport {IProps, IState} from \"./types\";\nimport ExternalDataManager from \"./ExternalDataManager\";\nimport CreationPreview from \"./CreationPreview\";\nimport AssignmentManager from \"./AssignmentManager\";\nimport TileController from \"../../../api/controllers/tile\";\nimport {Tile, TileEntry} from \"../../../models/app/Tile\";\nimport {RootState} from \"../../../store\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport Loading from \"../../utils/Loading\";\nimport DiscussionManager from \"./DiscussionManager\";\nimport {message} from \"antd\";\nimport LearningGoalsManager from \"./LearningGoalsManager\";\nimport \"./style.scss\";\n\nconst mapState = (state: RootState) => ({\n  assignments: state.assignments,\n  discussions: state.discussions\n});\n\nconst connector = connect(mapState)\ntype PropsFromRedux = ConnectedProps<typeof connector>\ntype Props = IProps & PropsFromRedux;\n\nclass TileCreateEntries extends Component<Props, IState> {\n\n  state = {\n    activeGoals: [],\n    activeEntries: [],\n    loading: false\n  }\n\n  componentDidMount(): void {\n    if (this.props.tile) {\n      this.setState({loading: true}, () => {\n        this._initializeTile(this.props.tile!);\n      });\n    }\n  }\n\n  componentWillReceiveProps(nextProps: Readonly<Props>, nextContext: any): void {\n    if (\n          (nextProps.tile?.id !== this.props.tile?.id) ||\n          (nextProps.contentType !== this.props.contentType) ||\n          (nextProps.tileType !== this.props.tileType)\n        ) {\n      if (nextProps.tile) this._initializeTile(nextProps.tile);\n      else this.setState({ activeEntries: [], activeGoals: [] });\n    }\n  }\n\n  _initializeTile = (tile: Tile) => {\n    if (tile.content === \"LEARNING_OUTCOMES\") {\n      TileController.getTileGoals(tile.id).then(goals => {\n        this.setState({ activeGoals: goals, loading: false }, () => {\n          this.props.updateGoals(goals);\n        });\n      });\n    } else {\n      TileController.getTileEntries(tile.id).then(entries => {\n        this.setState({ activeEntries: entries, loading: false }, () => {\n          this.props.updateEntries(entries);\n        });\n      });\n    }\n  }\n\n  addEntry = (entryRegistry: TileEntry) => {\n    if (this.state.activeEntries.find((x: TileEntry) => x.title === entryRegistry.title)) {\n      message.error(\"Entry is already registered!\");\n      console.error(\"Entry is already registered!\");\n      return;\n    }\n\n    this.setState(\n      { activeEntries: [...this.state.activeEntries, entryRegistry] },\n      () => {\n        this.props.updateEntries(this.state.activeEntries);\n      }\n    );\n  }\n\n  removeEntry = (entryRegistry: TileEntry) => {\n    if (!this.state.activeEntries.find((x: TileEntry) => x.title === entryRegistry.title)) {\n      message.error(\"Entry does not exist!\");\n      console.error(\"Entry is already registered!\");\n      return;\n    }\n\n    this.setState(\n      { activeEntries: this.state.activeEntries.filter((e: TileEntry) =>\n          e.title !== entryRegistry.title)\n      }, () => {\n        this.props.updateEntries(this.state.activeEntries);\n      }\n    );\n  }\n\n  render(): React.ReactNode {\n    const { activeEntries, loading, activeGoals }: IState = this.state;\n    const { tile, contentType, tileType, graphView, setGraphView } = this.props;\n\n    console.log(\"discussions\", this.props.discussions)\n\n    if (loading) return <Loading small={true} />\n\n    if (contentType && (contentType === \"LEARNING_OUTCOMES\")) {\n      return <LearningGoalsManager tile={tile}\n                                   setGoals={goals => {\n                                     this.setState({ activeGoals: goals });\n                                     this.props.updateGoals(goals)\n                                   }}\n                                   goals={activeGoals}\n                                   />\n    } else if (contentType && (contentType === \"PREDICTION\")) {\n\n    } else if (contentType && !tileType) {\n      return (<CreationPreview contentType={contentType} />);\n    }\n\n    if (!contentType || !tileType) return null;\n\n    switch (tileType!) {\n      case \"ASSIGNMENTS\":\n        return (<AssignmentManager tile={tile}\n                                   addEntry={this.addEntry}\n                                   removeEntry={this.removeEntry}\n                                   graphView={graphView}\n                                   setGraphView={setGraphView}\n                                   activeAssignments={activeEntries}\n                                   canvasAssignments={this.props.assignments} />);\n      case \"DISCUSSIONS\":\n        return (<DiscussionManager tile={tile}\n                                   addEntry={this.addEntry}\n                                   removeEntry={this.removeEntry}\n                                   wildcard={this.props.wildcard}\n                                   setWildcard={this.props.setWildcard}\n                                   activeDiscussions={activeEntries}\n                                   canvasDiscussions={this.props.discussions} />);\n      case \"EXTERNAL_DATA\":\n        return (<ExternalDataManager />);\n      default:\n        return null;\n    }\n  }\n}\n\nexport default connector(TileCreateEntries);","import React, { Component } from \"react\";\nimport {IProps} from \"./types\";\nimport {Button} from \"antd\";\n\nexport default class VisibilityButton extends Component<IProps> {\n  render(): React.ReactNode {\n    const { visible, setVisibility } = this.props;\n\n    return (\n      <div>\n        <Button size={\"large\"}\n                className={visible ? \"successButton\" : \"dangerButton\"}\n                onClick={() => setVisibility(!visible)}\n        >\n          { visible ? \"Visible\" : \"Hidden\" }\n        </Button>\n      </div>\n    )\n  }\n}","import React, { Component } from \"react\";\nimport {Col, Drawer, Input, Row, Statistic, Divider, Button} from \"antd\";\nimport {SaveOutlined} from \"@ant-design/icons\";\nimport {IProps, IState} from \"./types\";\nimport Select from \"react-select\";\nimport TileCreateEntries from \"../../../../../../components/managers/TileCreateEntries\";\nimport {editState, Tile, TileContentTypes, TileEntry, TileTypeTypes} from \"../../../../../../models/app/Tile\";\nimport VisibilityButton from \"./VisibilityButton\";\nimport {RootState} from \"../../../../../../store\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport TileController from \"../../../../../../api/controllers/tile\";\nimport {TileActions} from \"../../../../../../store/actions/tiles\";\n\nconst mapState = (state: RootState) => ({\n  tileEntries: state.tileEntries,\n  tileGoals: state.tileGoals\n});\n\nconst mapDispatch = {\n  loadTiles: () => TileActions.loadTiles(),\n  loadEntries: () => TileActions.loadTileEntries(),\n  loadTileGoals: () => TileActions.loadTileGoals()\n}\n\nconst connector = connect(mapState, mapDispatch)\ntype PropsFromRedux = ConnectedProps<typeof connector>\n\ntype Props = IProps & PropsFromRedux;\n\nclass EditTileDragger extends Component<Props, IState> {\n\n  state = {\n    updating: false,\n    title: \"\",\n    contentType: { label: undefined, value: undefined },\n    tileType: { label: undefined, value: undefined },\n    visible: true,\n    wildcard: false,\n    entries: [],\n    goals: [],\n    graphView: false,\n  }\n\n  componentWillReceiveProps(nextProps: Readonly<Props>, nextContext: any): void {\n    if (nextProps.tile !== undefined && nextProps.tile.id !== this.props.tile?.id) {\n      const { tile } = nextProps;\n\n      if (tile) {\n        this.setState({\n          title: tile.title,\n          contentType: { label: tile.content, value: tile.content },\n          tileType: { label: tile.type!, value: tile.type },\n          visible: tile.visible,\n          graphView: tile.graph_view\n        });\n      }\n    } else if (nextProps.tile === undefined) {\n      this.setState({\n        title: \"\",\n        contentType: { label: undefined, value: undefined },\n        tileType: { label: undefined, value: undefined },\n        visible: false,\n        graphView: false\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<{}>, snapshot?: any): void {\n    if (!prevProps.isOpen && this.props.isOpen) {\n      window.scrollTo(0, 0);\n    }\n  }\n\n  create = async () => {\n    const { entries, title, visible, contentType, tileType, wildcard, goals, graphView }: IState = this.state;\n    const { tileGroup } = this.props;\n\n    const newTile: Tile = {\n      id: -1,\n      group_id: tileGroup.id,\n      title,\n      position: -1,\n      visible,\n      content: contentType.value as TileContentTypes,\n      type: tileType.value as TileTypeTypes,\n      notifications: false,\n      graph_view: graphView,\n      wildcard\n    }\n\n    TileController.createTile(newTile).then(async tile => {\n      if (['ASSIGNMENTS', 'DISCUSSIONS'].includes(tile.type || \"\")) {\n        await this.createEntries(entries.map(e => {\n          e.tile_id = tile.id;\n          return e;\n        }));\n      } else if (tile.content === \"LEARNING_OUTCOMES\") {\n        for (let i = 0; i < goals.length; i++) {\n          goals[i].tile_id = tile.id;\n          let response = await TileController.createTileGoal(goals[i]);\n          console.log(\"goal\", response)\n        }\n      }\n\n      this.props.loadTiles().then(() => {\n        this.props.loadEntries().then(() => {\n          this.props.loadTileGoals().then(() => {\n            this.setState({ updating: false }, () => {\n              this.props.setOpen(false);\n            });\n          });\n        });\n      });\n    });\n  }\n\n  save = async () => {\n    const { entries, goals, graphView, wildcard, title }: IState = this.state;\n    const { tileEntries, tile }: Props = this.props;\n\n    tile!.title = title;\n    tile!.graph_view = graphView;\n    tile!.wildcard = wildcard;\n\n    const patchedTile = await TileController.updateTile(tile!)\n    this.setState({ updating: true }, async () => {\n      let removedEntries = tileEntries.filter(\n        e => e.tile_id === ( tile ? tile.id : -1 )\n      ).filter(\n        e => !entries.map(_e => _e.title).includes(e.title));\n\n      let newEntries = entries.filter(e => e.id === -1);\n\n      if (tile!.type === 'ASSIGNMENTS' || tile!.type === 'DISCUSSIONS' ) {\n        removedEntries = tileEntries.filter(\n          e => e.tile_id === patchedTile.id\n        ).filter(\n          e => !entries.map(_e => _e.title).includes(e.title));\n\n        newEntries = entries.filter(e => e.id === -1);\n\n      }\n      else if (tile!.content === \"LEARNING_OUTCOMES\") {\n        for (let i = 0; i < goals.length; i++) {\n          if (goals[i].state != null) {\n            switch (goals[i].state) {\n              case editState.new:\n                goals[i].state = editState.unchanged;\n                await TileController.createTileGoal(goals[i]);\n                break;\n              case editState.updated:\n                goals[i].state = editState.unchanged;\n                await TileController.updateTileGoal(goals[i]);\n                break;\n              case editState.removed:\n                goals[i].state = editState.unchanged;\n                await TileController.deleteTileGoal(goals[i].id);\n                break;\n              case editState.unchanged:\n                break;\n            }\n          }\n        }\n      }\n\n      await this.deleteEntries(removedEntries);\n      await this.createEntries(newEntries);\n\n      this.props.loadTiles().then(() => {\n        this.props.loadEntries().then(() => {\n          this.props.loadTileGoals().then(() => {\n            this.setState({ updating: false }, () => {\n              this.props.setOpen(false);\n            });\n          });\n        });\n      });\n    });\n  }\n\n  createEntries = async (entries: TileEntry[]) => {\n    for (const entry of entries) {\n      await TileController.createTileEntry(entry);\n    }\n  }\n\n  deleteEntries = async (entries: TileEntry[]) => {\n    for (const entry of entries) {\n      await TileController.deleteTileEntry(entry.id);\n    }\n  }\n\n  render(): React.ReactNode {\n    const { tileGroup, tiles, tile } = this.props;\n    const { title, contentType, tileType, visible }: IState = this.state;\n\n    return (\n      <Drawer\n        width={'100%'}\n        destroyOnClose={true}\n        title={tile === undefined ? \"Create new tile\" : \"Edit \" + tile.title}\n        placement={\"right\"}\n        closable={true}\n        onClose={() => this.props.setOpen(false)}\n        visible={this.props.isOpen}\n        getContainer={false}\n        style={{ position: 'absolute' }}\n      >\n        <Row gutter={[10, 25]} style={{marginBottom: 10}}>\n          <Col xs={24}>\n            <Row gutter={50}>\n              <Col>\n                <Statistic\n                  title={\"Tile Group\"}\n                  value={tileGroup.title}\n                />\n              </Col>\n              <Col>\n                <Statistic\n                  title={\"Children\"}\n                  value={tiles.filter(t => t.group_id === tileGroup.id).length}\n                  suffix={\"tiles\"}\n                />\n              </Col>\n              <Col>\n                <Statistic\n                  title={\"Manage\"}\n                  valueRender={() => (\n                    <Button type=\"primary\"\n                            shape=\"round\"\n                            loading={this.state.updating}\n                            onClick={() => this.props.tile === undefined ? this.create() : this.save()}\n                            icon={<SaveOutlined />}>\n                      { this.props.tile === undefined ? \"Create\" : \"Save\" }\n                    </Button>)\n                  }\n                />\n              </Col>\n            </Row>\n\n            <Divider />\n            <h2>Tile Configuration</h2>\n          </Col>\n\n          <Col xs={12}>\n            <span>Title</span>\n            <Input size={\"large\"}\n                   placeholder={\"Specify\"}\n                   value={title}\n                   onChange={e => this.setState({ title: e.target.value })}/>\n          </Col>\n          <Col xs={12}>\n            <span>Visibility</span>\n            <br />\n            <VisibilityButton visible={visible}\n                              setVisibility={visible => this.setState({ visible })}\n            />\n          </Col>\n\n          <Col xs={12}>\n            <span>Content type</span>\n            <Select value={{label: contentType.label as string, value: contentType.value as string}}\n                    style={{zIndex: 100}}\n                    options={[\n                      { label: 'Binary', value: 'BINARY'},\n                      { label: 'Entries', value: 'ENTRIES' },\n                      { label: 'Prediction', value: 'PREDICTION' },\n                      { label: 'Learning Outcome', value: 'LEARNING_OUTCOMES' }\n                    ]}\n                    isClearable={true}\n                    onChange={e => {\n                      if (!e) {\n                        this.setState({\n                          contentType: {label: undefined, value: undefined},\n                          tileType: {label: undefined, value: undefined}\n                        });\n                      } else {\n                        this.setState({\n                          contentType: {\n                            label: e!.label,\n                            value: e!.value as TileContentTypes\n                          },\n                          tileType: {label: undefined, value: undefined}\n                        });\n                      }\n                    }\n                  }\n            />\n          </Col>\n\n          <Col xs={12}>\n            <span>Tile type</span>\n            { ((contentType.value === \"LEARNING_OUTCOMES\") || (contentType.value === \"PREDICTION\")) ?\n              <h3>N/A</h3> :\n              <Select value={{label: tileType.label as string, value: tileType.value as string}}\n                      isDisabled={!contentType}\n                      isClearable={true}\n                      style={{zIndex: 100}}\n                      options={[\n                        { label: 'Assignments', value: 'ASSIGNMENTS'},\n                        { label: 'Discussions', value: 'DISCUSSIONS', isDisabled: (contentType ? contentType!.value : \"\") !== \"ENTRIES\" },\n                        { label: 'External Data', value: 'EXTERNAL_DATA' }\n                      ]}\n                      onChange={e => this.setState({ tileType: e ? {\n                          label: e.label,\n                          value: e.value as TileTypeTypes\n                        } : { label: undefined, value: undefined } })\n                      }\n                      placeholder={\n                        contentType ? \"Select type\" : \"Specify content first\"\n                      }\n              />\n            }\n          </Col>\n        </Row>\n\n        <TileCreateEntries tile={tile}\n                           graphView={this.state.graphView}\n                           setGraphView={(graphView) => this.setState({ graphView })}\n                           wildcard={this.state.wildcard}\n                           setWildcard={wildcard => this.setState({ wildcard })}\n                           updateEntries={(entries) => this.setState({ entries })}\n                           updateGoals={(goals) => this.setState({ goals })}\n                           contentType={this.state.contentType.value}\n                           tileType={this.state.tileType.value}\n        />\n      </Drawer>\n    )\n  }\n}\n\nexport default connector(EditTileDragger);","import {Tile, TileGroup} from \"../../../../../models/app/Tile\";\n\nexport const getStyle = (group: TileGroup, tiles: Tile[]) => {\n\n  if (tiles.filter((tile: Tile) => tile.group_id === group.id).length === 0) {\n    return {\n      width: '100%',\n      minHeight: 200,\n      border: \"2px dotted #EAEAEA\",\n      borderRadius: 5,\n    }\n  }\n\n  return {}\n}\n\nexport const handleDrop = async (group: TileGroup,\n                                 evt: { removedIndex: number | null, addedIndex: number | null, payload?: Tile },\n                                 tiles: Tile[]): Promise<Tile[]> => {\n  const { addedIndex, payload, removedIndex } = evt;\n  void payload; // discard while keeping eslint happy\n\n  let tilesInGroup: Tile[] = JSON.parse(JSON.stringify(getTilesInGroup(tiles, group.id)));\n\n  if (removedIndex !== null && addedIndex !== null) {\n    const dragged = tilesInGroup[removedIndex - 1];\n    tilesInGroup.splice(addedIndex, 0, dragged);\n\n    if (removedIndex < addedIndex)\n      tilesInGroup = tilesInGroup.filter((t, i) => i !== removedIndex - 1);\n    else\n      tilesInGroup = tilesInGroup.filter((t, i) => i !== removedIndex);\n\n    for (let i = 0; i < tilesInGroup.length; i ++) {\n      tilesInGroup[i].position = i + 1;\n    }\n\n    tiles = [\n      ...tiles.filter(t => !tilesInGroup.map(x => x.id).includes(t.id)),\n      ...tilesInGroup\n    ];\n\n    return Promise.resolve(tiles);\n  } else {\n    return Promise.resolve(tiles);\n  }\n}\n\nexport const getTilesInGroup = (tiles: Tile[], groupId: number) => {\n  return tiles.filter(\n    (tile: Tile) => tile.group_id === groupId)\n    .sort(\n      (a: Tile, b: Tile) => a.position - b.position\n    );\n}","import React, { Component } from \"react\";\nimport { IProps, IState } from \"./types\";\nimport {Button, Space} from \"antd\";\nimport { PlusOutlined, DeleteOutlined } from \"@ant-design/icons\";\nimport DraggableTile from \"../../../../../components/DraggableTile\";\nimport EditTileDragger from \"./EditTileDragger\";\nimport {Container} from \"react-smooth-dnd\";\nimport {getStyle, getTilesInGroup, handleDrop} from \"./helpers\";\nimport {Tile} from \"../../../../../models/app/Tile\";\nimport \"./style.scss\";\nimport Swal from \"sweetalert2\";\nimport TileController from \"../../../../../api/controllers/tile\";\nimport {RootState} from \"../../../../../store\";\nimport {TileActions} from \"../../../../../store/actions/tiles\";\nimport {connect, ConnectedProps} from \"react-redux\";\n\nconst mapState = (state: RootState) => ({\n  tileGroups: state.tileGroups,\n});\n\nconst mapDispatch = {\n  loadGroups: () => TileActions.loadGroups(),\n  loadTiles: () => TileActions.loadTiles()\n}\n\nconst connector = connect(mapState, mapDispatch)\ntype PropsFromRedux = ConnectedProps<typeof connector>\n\ntype Props = IProps & PropsFromRedux;\n\nclass TileWrapper extends Component<Props, IState> {\n\n  state = {\n    updating: [],\n    editTile: undefined,\n    isDraggerOpen: false\n  }\n\n  deleteTile = async (id: number) => {\n    TileController.deleteTile(id).then(() => {\n      this.props.loadGroups().then(() => {\n        this.props.loadTiles().then(() => {\n          this.setState({isDraggerOpen: false});\n        });\n      });\n    });\n  }\n\n\n  render(): React.ReactNode {\n    const { editTile, isDraggerOpen, updating }: IState = this.state;\n    const { group, tiles, updateTiles } = this.props;\n    const historicTiles: Tile[] = JSON.parse(JSON.stringify(tiles));\n\n    return (\n      <div className={\"tileWrapper\"} key={\"group-\" + group.id.toString()}>\n        <h2>{ group.title }</h2>\n        <div className={\"tileContainer\"}>\n          <EditTileDragger\n            tile={editTile}\n            tiles={tiles}\n            tileGroup={group}\n            isOpen={isDraggerOpen}\n            setOpen={(isDraggerOpen) => this.setState({ isDraggerOpen })}\n            updateTiles={updateTiles}\n          />\n\n          <Container groupName={`primary`}\n                     key={\"containerGroup\" + group.id.toString()}\n                     style={{...getStyle(group, tiles)}}\n                     getChildPayload={i => getTilesInGroup(tiles, group.id)[i]}\n                     orientation={\"horizontal\"}\n                     dragClass={'dragged'}\n                     onDrop={e => {\n                       handleDrop(group, e, tiles).then(async (newTiles: Tile[]) => {\n                         if (newTiles.map(t => {\n                           const target = historicTiles.find(_t => _t.id === t.id);\n                           if (!target) return false;\n                           return (target.group_id !== t.group_id || target.position !== t.position);\n                         }).some(x => x)) {\n                           this.setState({ updating: [...updating, group.id] }, async () => {\n                             const changedTiles = newTiles.filter(t => {\n                               const target = historicTiles.find(ht => ht.id === t.id);\n                               if (!target) return true;\n\n                               return target.position !== t.position || target.group_id !== t.group_id;\n                             });\n\n                             for (const tile of changedTiles) {\n                               await TileController.updateTile(tile);\n                             }\n\n                             TileController.getTiles().then(async fetchedTiles => {\n                               await updateTiles(fetchedTiles);\n\n                               this.setState({ updating: updating.filter(x => x !== group.id)});\n                             })\n                           });\n                         }\n                       })\n                     }}>\n            <div className={\"updateOverlay \" + (updating.includes(group.id) ? \"active\" : \"\")}>\n              <div className={\"overlayBackground\"} />\n              <h1>Saving changes...</h1>\n            </div>\n            { tiles.sort((a, b) => a.position - b.position).map(t => {\n              return (\n                <DraggableTile key={\"dragMem\" + t.id.toString()} {...{\n                  tile: t, editTile: () => this.setState({editTile: t, isDraggerOpen: true}), deleteTile: this.deleteTile\n                }} />\n              );\n            })}\n          </Container>\n\n          <br />\n\n          <Space direction={\"horizontal\"}>\n            <Button type={\"link\"}\n                    onClick={() => this.setState({\n                      isDraggerOpen: true,\n                      editTile: undefined,\n                    })}\n                    icon={<PlusOutlined />}>\n              Create Tile\n            </Button>\n            <Button type={\"link\"}\n                    danger={true}\n                    onClick={() => {\n                      Swal.fire({\n                        title: 'Do you really want to delete this group?',\n                        text: 'All tiles within this group will be deleted as a result.',\n                        showCancelButton: true,\n                        confirmButtonText: 'Delete',\n                        confirmButtonColor: 'rgb(255, 110, 90)',\n                        showLoaderOnConfirm: true,\n                        allowOutsideClick: () => !Swal.isLoading()\n                      }).then((result) => {\n                        if (result.isConfirmed) {\n                          TileController.deleteTileGroup(group.id).then(() => {\n                            this.props.loadGroups().then(() => {\n                              Swal.fire('Task completed!', '', 'success');\n                            });\n                          });\n                        }\n                      });\n                    }}\n                    icon={<DeleteOutlined />}>\n              Delete Group\n            </Button>\n          </Space>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default connector(TileWrapper);","import React, { Component } from \"react\";\nimport Admin from \"../../index\";\nimport ManageTileGroups from \"../../../../containers/ManageTileGroups\";\nimport { Divider } from \"antd\";\nimport TileWrapper from \"./TileWrapper\";\nimport {Tile, TileGroup} from \"../../../../models/app/Tile\";\nimport \"./style.scss\";\nimport {RootState} from \"../../../../store\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport {TileActions} from \"../../../../store/actions/tiles\";\nimport {DataMartActions} from \"../../../../store/actions/datamart\";\nimport {getTilesInGroup} from \"./TileWrapper/helpers\";\n\nconst mapState = (state: RootState) => ({\n  tiles: state.tiles,\n  tileGroups: state.tileGroups,\n});\n\nconst mapDispatch = {\n  loadAssignments: () => DataMartActions.loadAssignments(),\n  loadDiscussions: () => DataMartActions.loadDiscussions(),\n  updateTiles: (tiles: Tile[]) => TileActions.updateTiles(tiles)\n}\n\nconst connector = connect(mapState, mapDispatch)\ntype PropsFromRedux = ConnectedProps<typeof connector>\n\nclass Tiles extends Component<PropsFromRedux> {\n\n  componentDidMount(): void {\n    this.props.loadDiscussions();\n    this.props.loadAssignments();\n  }\n\n  render(): React.ReactNode {\n    const { tiles, tileGroups } = this.props;\n\n    return (\n      <Admin menuKey={\"tiles\"}>\n        <div id={\"adminTiles\"}>\n          <ManageTileGroups />\n          <h1>Tiles</h1>\n          <p>The overview shows all groups with their respective tiles. Drag around tiles to re-arrange them or create new ones!</p>\n          <Divider />\n\n          { tileGroups.map((group: TileGroup) => (\n            <TileWrapper group={group}\n                         updateTiles={this.props.updateTiles}\n                         tiles={getTilesInGroup(tiles, group.id)}\n            />\n          ))}\n        </div>\n      </Admin>\n    )\n  }\n}\n\nexport default connector(Tiles);","import React, { Component } from \"react\";\nimport Select from \"react-select\";\nimport {Button, Tooltip} from \"antd\";\nimport {SyncOutlined} from \"@ant-design/icons\";\nimport { Link } from \"react-router-dom\";\nimport {IProps, IState} from \"./types\";\nimport StudentController from \"../../api/controllers/student\";\nimport {CanvasStudent} from \"../../models/canvas/Student\";\nimport {debug} from \"../../config/config\";\nimport {RootState} from \"../../store\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport \"./style.scss\";\n\nconst mapState = (state: RootState) => ({\n  course: state.course,\n  user: state.user\n});\n\nconst connector = connect(mapState);\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\ntype Props = IProps & PropsFromRedux;\n\nclass AdminHeader extends Component<Props, IState> {\n\n  state = {\n    loaded: false,\n    students: []\n  }\n\n  componentDidMount(): void {\n    const { studentPickView } = this.props;\n\n    if (studentPickView) {\n      StudentController.getStudents().then(students => this.setState({ students, loaded: true }));\n    }\n\n    this.setState({ loaded: true });\n  }\n\n  renderInner(): React.ReactNode {\n    if (this.props.studentPickView) {\n      const { students, loaded } = this.state;\n      return (\n        <Select id={\"studentPicker\"}\n                isLoading={!loaded}\n                options={students.sort(\n                  (a: CanvasStudent, b: CanvasStudent) => a.name.localeCompare(b.name)\n                ).map((s: CanvasStudent) => ({ label: s.name, value: s.login_id}))}\n                placeholder={\"Choose a student\"}\n                onChange={(e) => this.props.setStudent!(\n                  e ? students.find((s: CanvasStudent) => s.login_id === e!.value)! : null\n                )}\n                isClearable={true}\n                styles={{\n                  control: (provided, state) => ({\n                    ...provided,\n                    backgroundColor: 'transparent',\n                    color: 'white',\n                    border: '1px solid white'\n                  }),\n                  singleValue: (provided, state) => {\n                    return {...provided, color: 'white'};\n                  }\n                }}\n        />\n      );\n    }\n\n    return (\n      <div id={\"inner\"}>\n        <h2>{ this.props.course ? this.props.course.course_name : \"Loading course...\" }</h2>\n      </div>\n    );\n  }\n\n  render(): React.ReactNode {\n    return (\n      <React.Fragment>\n        <div id={\"adminHeader\"}>\n          { this.props.studentPickView ?\n            <Link to={'/admin'} style={{ float: 'right' }}>\n              <h3>Admin Panel</h3>\n            </Link> :\n            <div style={{float: 'right', padding: 20}}>\n              <Tooltip title={\"Reload data\"}>\n                <Button id={\"reload\"}\n                        shape=\"circle\"\n                        style={{backgroundColor: 'rgba(255, 255, 255, 0.5)', color: 'white'}}\n                        icon={<SyncOutlined />} />\n              </Tooltip>\n            </div>\n          }\n\n          <div id={\"navbarContent\"}>\n            <div id={\"brand\"}>\n              <Link to={'/'}>\n                <h1>IGuideME</h1>\n              </Link>\n            </div>\n\n            { this.renderInner() }\n          </div>\n        </div>\n        { debug() &&\n          (<div id={\"debugNotice\"}>\n            Application is running in <strong>demo</strong> mode. Changes will not be saved!\n          </div>)\n        }\n      </React.Fragment>\n    );\n  }\n}\n\nexport default connector(AdminHeader);"],"names":["StudentController","debug","delay","MOCK_STUDENTS","this","client","get","then","response","data","MOCK_CONSENTS","MOCK_GOALS","Controller","connector","connect","state","user","AdminMenu","props","id","name","UserOutlined","selectedKeys","menuKey","icon","DatabaseOutlined","to","AppstoreOutlined","LaptopOutlined","TeamOutlined","TrophyOutlined","title","FundProjectionScreenOutlined","DotChartOutlined","CloudUploadOutlined","ClusterOutlined","NotificationOutlined","ControlOutlined","Component","Admin","isAdmin","AdminHeader","xs","className","children","withAdminRole","mapDispatch","loadGroups","TileActions","tileGroups","ManageTileGroups","text","drawerOpen","direction","PlusOutlined","onClick","setState","width","placement","closable","onClose","visible","getContainer","style","position","placeholder","value","onChange","e","target","type","TileController","length","tiles","dispatch","updateTile","tile","ActionButtons","loading","menu","EditOutlined","editTile","DeleteOutlined","Swal","showCancelButton","confirmButtonText","confirmButtonColor","showLoaderOnConfirm","allowOutsideClick","result","isConfirmed","deleteTile","danger","float","overlay","t","newTile","size","ContentType","getName","content","getIcon","FieldBinaryOutlined","StockOutlined","TileType","tileEntries","DraggableTile","entriesLoaded","entries","updatingNotifications","toggleNotifications","notifications","filter","x","prevProps","prevState","snapshot","undefined","Draggable","gutter","marginTop","textAlign","margin","toString","includes","shape","BellTwoTone","twoToneColor","ExternalDataManager","CreationPreview","getTitle","contentType","getDescription","console","log","md","toLowerCase","getColumns","removeAssignment","canvasAssignments","dataIndex","key","render","obj","find","c","CheckCircleOutlined","CloseCircleOutlined","assignment","published","_","QuizzesTutorial","centered","open","onCancel","setOpen","footer","src","height","maxHeight","alt","AssignmentManager","tutorialOpen","addAssignment","a","entry","editState","tile_id","addEntry","activeAssignments","val","checked","graphView","setGraphView","zIndex","message","QuestionOutlined","background","border","padding","cursor","color","textDecoration","columns","removeEntry","pagination","dataSource","options","map","label","onCreateOption","removeDiscussion","canvasDiscussions","d","discussion","posted_by","posted_at","DiscussionManager","addDiscussion","activeDiscussions","wildcard","setWildcard","GoalRequirement","metaKeys","loadMetaKeys","getExpressionLabel","expression","getMetaKeyLabel","requirement","entry_id","nextProps","nextContext","isNaN","entryOptions","targetTile","updateRequirement","isDisabled","isLoading","meta_key","k","step","disabled","Number","GoalEntry","_initialize","goal","addNewRequirement","requirements","goal_id","updateGoal","r","showIcon","LearningGoalsManager","addNewGoal","goals","setGoals","assignments","discussions","TileCreateEntries","activeGoals","activeEntries","_initializeTile","updateGoals","updateEntries","entryRegistry","error","tileType","Loading","small","VisibilityButton","setVisibility","loadTiles","loadEntries","loadTileGoals","tileGoals","EditTileDragger","updating","create","tileGroup","group_id","graph_view","createEntries","i","save","patchedTile","removedEntries","_e","newEntries","deleteEntries","isOpen","window","scrollTo","destroyOnClose","marginBottom","suffix","valueRender","SaveOutlined","isClearable","getStyle","group","minHeight","borderRadius","handleDrop","evt","addedIndex","payload","removedIndex","tilesInGroup","JSON","parse","stringify","getTilesInGroup","dragged","splice","Promise","resolve","groupId","sort","b","TileWrapper","isDraggerOpen","updateTiles","historicTiles","Container","groupName","getChildPayload","orientation","dragClass","onDrop","newTiles","_t","some","changedTiles","ht","fetchedTiles","loadAssignments","DataMartActions","loadDiscussions","Tiles","course","loaded","students","studentPickView","localeCompare","s","login_id","setStudent","styles","control","provided","backgroundColor","singleValue","course_name","SyncOutlined","renderInner"],"sourceRoot":""}