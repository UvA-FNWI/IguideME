{"version":3,"sources":["components/settings/RequireConsent/ConsentEditor/index.tsx","components/settings/RequireConsent/index.tsx","components/settings/AcceptList/index.tsx","components/settings/PeerGroups/index.tsx","common/Admin/sections/Settings/index.tsx","api/controllers/student.ts","containers/AdminHeader/index.tsx","common/Admin/AdminMenu/index.tsx","common/Admin/index.tsx"],"names":["toolbarPlugin","createToolbarPlugin","linkifyPlugin","createLinkifyPlugin","Toolbar","mapDispatch","loadCourse","CourseActions","connector","connect","state","course","ConsentEditor","doneLoading","editorState","undefined","initialState","hasChanged","saving","isUpToDate","currentState","stateToHTML","getCurrentContent","toString","trim","updateState","newState","setState","save","props","text","AppController","updateConsent","require_consent","then","message","success","this","setTimeout","EditorState","createWithContent","stateFromHTML","standardConsent","id","externalProps","Fragment","type","disabled","onClick","showIcon","className","onChange","plugins","Loading","small","Component","RequireConsent","loading","toggleConsentRequirement","title","checkedChildren","CheckOutlined","unCheckedChildren","CloseOutlined","checked","AcceptList","loaded","students","enabled","accepted","isAccepted","loginId","includes","StudentController","getStudents","DataMartController","getAcceptList","acceptList","filter","x","map","student_login_id","accept_list","val","updateAcceptList","e","length","Math","round","Swal","fire","input","inputAttributes","autocapitalize","showCancelButton","confirmButtonText","showLoaderOnConfirm","preConfirm","percentage","_p","parseInt","showValidationMessage","allowOutsideClick","isLoading","result","isConfirmed","value","n","ceil","_a","sort","random","slice","s","login_id","createAcceptList","list","style","opacity","a","b","name","localeCompare","student","xs","md","lg","xl","PeerGroups","size","inputSize","inputEnabled","buttonText","updatePeerGroups","personalized","updateCoursePeerGroup","personalized_peers","min_size","getCoursePeerGroups","direction","min","Settings","Admin","menuKey","width","debug","delay","MOCK_STUDENTS","client","get","response","data","MOCK_CONSENTS","MOCK_GOALS","Controller","user","AdminHeader","studentPickView","options","label","placeholder","setStudent","find","isClearable","styles","control","provided","backgroundColor","color","border","singleValue","course_name","to","float","padding","shape","icon","renderInner","AdminMenu","UserOutlined","selectedKeys","Item","key","DatabaseOutlined","AppstoreOutlined","LaptopOutlined","TeamOutlined","SubMenu","TrophyOutlined","FundProjectionScreenOutlined","DotChartOutlined","CloudUploadOutlined","ClusterOutlined","NotificationOutlined","ControlOutlined","isAdmin","children","withAdminRole"],"mappings":"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","file":"static/js/20.d0a75127.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { IState } from \"./types\";\nimport { EditorState } from 'draft-js';\n// @ts-ignore plugin does not support TypeScript\nimport createToolbarPlugin from 'draft-js-static-toolbar-plugin';\n// @ts-ignore plugin does not support TypeScript\nimport createLinkifyPlugin from 'draft-js-linkify-plugin';\nimport Editor from 'draft-js-plugins-editor';\nimport {\n  ItalicButton,\n  BoldButton,\n  UnderlineButton,\n  CodeButton,\n  HeadlineOneButton,\n  HeadlineTwoButton,\n  HeadlineThreeButton,\n  UnorderedListButton,\n  OrderedListButton,\n  BlockquoteButton,\n  CodeBlockButton,\n} from 'draft-js-buttons';\nimport 'draft-js/dist/Draft.css';\nimport 'draft-js-static-toolbar-plugin/lib/plugin.css';\nimport \"./style.scss\";\nimport { stateToHTML } from \"draft-js-export-html\";\nimport { stateFromHTML } from \"draft-js-import-html\";\nimport { standardConsent } from \"./template\";\nimport {Alert, Button, message} from \"antd\";\nimport Loading from \"../../../utils/Loading\";\nimport {RootState} from \"../../../../store\";\nimport {CourseActions} from \"../../../../store/actions/course\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport AppController from \"../../../../api/controllers/app\";\n\nconst toolbarPlugin = createToolbarPlugin();\nconst linkifyPlugin = createLinkifyPlugin();\nconst { Toolbar } = toolbarPlugin;\n\nconst mapState = (state: RootState) => ({\n  course: state.course,\n});\n\nconst mapDispatch = {\n  loadCourse: () => CourseActions.loadCourse()\n}\n\nconst connector = connect(mapState, mapDispatch)\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nclass ConsentEditor extends Component<PropsFromRedux, IState> {\n\n  state = {\n    doneLoading: false,\n    editorState: undefined,\n    initialState: undefined,\n    hasChanged: false,\n    saving: false\n  }\n\n  componentDidMount(): void {\n    const { course }: PropsFromRedux = this.props;\n\n    // const editorState = course ? (course.text ? course.text : undefined) : undefined;\n\n    setTimeout(() => {\n      this.setState({\n        doneLoading: true,\n        editorState: EditorState.createWithContent(stateFromHTML(course ? (course.text ? course.text : standardConsent) : standardConsent)),\n        initialState: stateToHTML(stateFromHTML(course ? (course.text ? course.text : \"\") : \"\")),\n        hasChanged: false\n      });\n    }, 300);\n  }\n\n  isUpToDate = () => {\n    if (!this.state.editorState || !this.state.doneLoading) return false;\n    const currentState: EditorState = this.state.editorState!;\n    return (stateToHTML(currentState.getCurrentContent()).toString().trim() === this.state.initialState)\n  }\n\n  updateState = (newState: EditorState) => {\n    this.setState({ editorState: newState, hasChanged: true });\n  }\n\n  save = () => {\n    const { course } = this.props;\n    this.setState({ saving: true }, () => {\n      const currentState: EditorState = this.state.editorState!;\n      const text = stateToHTML(currentState.getCurrentContent());\n\n      AppController.updateConsent(course!.require_consent, text).then(() => {\n        this.props.loadCourse().then(() => {\n          this.setState({\n            saving: false,\n            initialState: text\n          }, () => message.success(\"Informed consent saved!\"));\n        });\n      });\n    });\n  }\n\n  render(): React.ReactNode {\n    if (!this.state.doneLoading) {\n      return <Loading small={true} />\n    }\n\n    return (\n      <div id={\"consentEditor\"}>\n        <div id={\"editorToolbar\"}>\n          <Toolbar>\n            {\n              (externalProps: any) => (\n                <React.Fragment>\n                  <BoldButton {...externalProps} />\n                  <ItalicButton {...externalProps} />\n                  <UnderlineButton {...externalProps} />\n                  <CodeButton {...externalProps} />\n                  <UnorderedListButton {...externalProps} />\n                  <HeadlineOneButton {...externalProps} />\n                  <HeadlineTwoButton {...externalProps} />\n                  <HeadlineThreeButton {...externalProps} />\n                  <OrderedListButton {...externalProps} />\n                  <BlockquoteButton {...externalProps} />\n                  <CodeBlockButton {...externalProps} />\n                  <Button\n                    id={\"save\"}\n                    type={\"link\"}\n                    disabled={this.isUpToDate() || this.state.saving}\n                    onClick={this.save}\n                  >\n                    { this.state.saving ? \"Saving\" : \"Save\" }\n                  </Button>\n                </React.Fragment>\n              )\n            }\n          </Toolbar>\n\n          { !this.state.initialState &&\n          <Alert\n            message={\"Consent can not be given because the informed consent is undefined. Provide the\" +\n            \" informed consent below\"}\n            type={\"error\"} showIcon />\n          }\n        </div>\n\n        <div id={\"contentWrapper\"}\n             className={`${this.isUpToDate() && \"up-to-date\"} ${this.state.saving && \"saving\"}`}>\n          <Editor\n            editorState={this.state.editorState!}\n            onChange={this.updateState}\n            plugins={[toolbarPlugin, linkifyPlugin]}\n          />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default connector(ConsentEditor);","import React, { Component } from \"react\";\nimport {Divider, Switch, Tooltip} from \"antd\";\nimport {CheckOutlined, CloseOutlined} from \"@ant-design/icons\";\nimport ConsentEditor from \"./ConsentEditor\";\nimport FadeIn from \"react-fade-in\";\nimport {RootState} from \"../../../store\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport AppController from \"../../../api/controllers/app\";\nimport Loading from \"../../utils/Loading\";\nimport {IState} from \"./types\";\nimport {CourseActions} from \"../../../store/actions/course\";\n\nconst mapState = (state: RootState) => ({\n  course: state.course,\n});\n\nconst mapDispatch = {\n  loadCourse: () => CourseActions.loadCourse()\n}\n\nconst connector = connect(mapState, mapDispatch)\ntype PropsFromRedux = ConnectedProps<typeof connector>\n\nclass RequireConsent extends Component<PropsFromRedux, IState> {\n\n  state = {\n    loading: false\n  }\n\n  toggleConsentRequirement = () => {\n    const { course } = this.props;\n\n    if (!course) return;\n\n    this.setState({ loading: true }, () => {\n      AppController.updateConsent(!course.require_consent, course.text).then(() => {\n        this.props.loadCourse().then(() => {\n          this.setState({ loading: false });\n        });\n      });\n    });\n  }\n\n  render(): React.ReactNode {\n    const { course } = this.props;\n    if (!course) return <Loading small={true} />;\n\n    return (\n      <div id={\"informedConsent\"}>\n        <h2>Informed Consent</h2>\n        <div className={\"primaryContainer\"}>\n          <span>\n            <Tooltip title={\"Consent is mandatory!\"}>\n              <Switch\n                // consent is enforced\n                checkedChildren={<CheckOutlined />}\n                unCheckedChildren={<CloseOutlined />}\n                onClick={this.toggleConsentRequirement}\n                checked={course.require_consent || true}\n                disabled={true}\n                loading={this.state.loading}\n              />\n            </Tooltip>\n            &nbsp;\n            When checked students are required to explicitly accept the informed consent. Students that did not grant\n              consent won't be able to use the application and their data will be excluded.\n          </span>\n\n          <Divider />\n\n          { course.require_consent &&\n            <FadeIn>\n              <ConsentEditor />\n            </FadeIn>\n          }\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default connector(RequireConsent);","import React, { Component } from \"react\";\nimport StudentController from \"../../../api/controllers/student\";\nimport {Button, Col, Divider, Row, Space, Switch} from \"antd\";\nimport {CheckOutlined, CloseOutlined} from \"@ant-design/icons\";\nimport {IProps, IState} from \"./types\";\nimport Loading from \"../../utils/Loading\";\nimport {CanvasStudent} from \"../../../models/canvas/Student\";\nimport \"./style.scss\";\nimport Swal from \"sweetalert2\";\nimport {RootState} from \"../../../store\";\nimport {CourseActions} from \"../../../store/actions/course\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport DataMartController from \"../../../api/controllers/datamart\";\nimport AppController from \"../../../api/controllers/app\";\n\nconst mapState = (state: RootState) => ({\n  course: state.course,\n});\n\nconst mapDispatch = {\n  loadCourse: () => CourseActions.loadCourse()\n}\n\nconst connector = connect(mapState, mapDispatch)\ntype PropsFromRedux = ConnectedProps<typeof connector>\n\nclass AcceptList extends Component<PropsFromRedux & IProps, IState> {\n\n  state = {\n    loaded: false,\n    students: [],\n    enabled: false,\n    accepted: []\n  }\n\n  componentDidMount(): void {\n    StudentController.getStudents().then(students => this.setState({ students, loaded: true }));\n\n    DataMartController.getAcceptList().then(acceptList => {\n      this.setState({ accepted: acceptList.filter(x => x.accepted).map(x => x.student_login_id) });\n    });\n\n    const { course } = this.props;\n    if (course) {\n      this.setState({ enabled: course.accept_list });\n    }\n  }\n\n  isAccepted = (loginId: string) => {\n    return (this.state.accepted as string[]).includes(loginId);\n  }\n\n  render(): React.ReactNode {\n    const { loaded, students, enabled, accepted }: IState = this.state;\n\n    if (!loaded) {\n      return (\n        <div id={\"acceptList\"}>\n          <h2>Accept List</h2>\n          <div className={\"primaryContainer\"}>\n            <Loading small={true} />\n          </div>\n        </div>\n      )\n    }\n\n    return (\n      <div id={\"acceptList\"}>\n        <h2>Accept List</h2>\n\n        <div className={\"primaryContainer\"}>\n          <span>\n            <Switch\n              checkedChildren={<CheckOutlined />}\n              unCheckedChildren={<CloseOutlined />}\n              checked={enabled}\n              onChange={val => {\n                AppController.updateAcceptList(val).then(e =>\n                  this.setState({ enabled: e }, () => this.props.loadCourse()));\n              }}\n            />\n            &nbsp;\n            If enabled only the students with explicit access may use the application. When disabled all enrolled students are able to use the application.\n          </span>\n\n          <Divider />\n\n          <span>\n            Accepted: { accepted.length } / { students.length } <small>({Math.round((accepted.length / students.length) * 100)}%)</small>\n          </span>\n\n          <br />\n\n          <Space>\n            <Button disabled={!enabled}>Select all</Button>\n            <Button disabled={!enabled}>Deselect all</Button>\n            <Button disabled={!enabled}\n                    onClick={() => {\n                      Swal.fire({\n                        title: 'Percentage of students to accept',\n                        input: 'number',\n                        inputAttributes: {\n                          autocapitalize: 'off'\n                        },\n                        showCancelButton: true,\n                        confirmButtonText: 'Randomize',\n                        showLoaderOnConfirm: true,\n                        preConfirm: (percentage) => {\n                          const _p = parseInt(percentage);\n\n                          if (_p < 10) {\n                            return Swal.showValidationMessage(\n                              `The acceptance percentage must be above 10%!`\n                            )\n                          }\n\n                          if (_p > 100) {\n                            return Swal.showValidationMessage(\n                              `Percentages can't exceed 100%.`\n                            )\n                          }\n                        },\n                        allowOutsideClick: () => !Swal.isLoading()\n                      }).then((result) => {\n                        if (result.isConfirmed) {\n                          const percentage = parseInt(result.value as unknown as string);\n                          const n = Math.ceil(students.length * (percentage / 100));\n                          const _a = students.sort(() => 0.5 - Math.random()).slice(0, n);\n                          this.setState({ accepted: _a.map((s: CanvasStudent) => s.login_id) });\n\n                          Swal.fire('Task completed!', '', 'success')\n                        }\n                      })\n                    }}\n            >\n              Random assign\n            </Button>\n            <Button className={\"successButtonStyle\"}\n                    disabled={!enabled}\n                    onClick={() => {\n                      DataMartController.createAcceptList(students.map(s => {\n                        return {\n                          student_login_id: s.login_id,\n                          accepted: accepted.includes(s.login_id)\n                        }\n                      })).then(list => {\n                        this.setState({\n                          accepted: list.filter(x => x.accepted).map(x => x.student_login_id)\n                        });\n                        Swal.fire('Configuration saved!', '', 'success')\n                      })\n                    }}\n            >\n              Save\n            </Button>\n          </Space>\n\n          <Divider />\n\n          <div style={{ opacity: enabled ? 1 : 0.5}}>\n            <Row>\n              { students.sort((a, b) => a.name.localeCompare(b.name)).map((student: CanvasStudent) => (\n                <Col xs={12} md={8} lg={6} xl={4}>\n                  <div className={`student ${this.isAccepted(student.login_id) && \"accepted\"}`}\n                       onClick={() => {\n                         this.isAccepted(student.login_id) ?\n                           this.setState({ accepted: accepted.filter(s => s !== student.login_id) }) :\n                           this.setState({ accepted: [...accepted, student.login_id] })\n                       }}\n                  >\n                    <span>{ student.name }</span>\n                    <br />\n                    <small>{ student.login_id }</small>\n                  </div>\n                </Col>\n              ))}\n            </Row>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default connector(AcceptList);","import React, { Component } from \"react\";\nimport {Button, InputNumber, Space, Switch} from \"antd\";\nimport {CheckOutlined, CloseOutlined} from \"@ant-design/icons\";\nimport {RootState} from \"../../../store\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport AppController from \"../../../api/controllers/app\";\nimport {IState} from \"./types\";\nimport {CourseActions} from \"../../../store/actions/course\";\n\nconst mapState = (state: RootState) => ({\n  course: state.course,\n});\n\nconst mapDispatch = {\n  loadCourse: () => CourseActions.loadCourse()\n}\n\nconst connector = connect(mapState, mapDispatch)\ntype PropsFromRedux = ConnectedProps<typeof connector>\n\nclass PeerGroups extends Component<PropsFromRedux, IState> {\n\n  state = {\n    loading: true,\n    enabled: false,\n    size: 0,\n    inputSize: 0,\n    inputEnabled: false,\n    buttonText: \"Save\"\n  }\n\n  componentDidMount(): void {\n    this.setState({ loading: true }, () => {\n      AppController.getCoursePeerGroups().then(result => {\n        this.setState({\n          loading: false,\n          enabled: result.personalized_peers,\n          inputEnabled: result.personalized_peers,\n          size: result.min_size,\n          inputSize: result.min_size\n        })\n      });\n    });\n  }\n\n  updatePeerGroups = (personalized: boolean = false) => {\n    this.setState({ loading: true }, () => {\n      AppController.updateCoursePeerGroup(\n        this.state.inputSize,\n        personalized ? true : this.state.inputEnabled\n      ).then(result => {\n        this.setState({\n          enabled: result.personalized_peers,\n          inputEnabled: result.personalized_peers,\n          size: result.min_size,\n          inputSize: result.min_size,\n          buttonText: \"Saved\"\n        }, () => {\n          setTimeout(() => this.setState({ buttonText: \"Save\", loading: false }), 1000)\n        });\n      });\n    });\n  }\n\n  render(): React.ReactNode {\n    return (\n      <div id={\"peerGroups\"}>\n        <h2>Peer Groups</h2>\n        <div className={\"primaryContainer\"}>\n          <Space direction={\"vertical\"}>\n            <div>\n              <span>\n                <Switch\n                  checkedChildren={<CheckOutlined />}\n                  unCheckedChildren={<CloseOutlined />}\n                  onClick={() => {\n                    this.updatePeerGroups(!this.state.inputEnabled);\n                    this.setState({ inputEnabled: !this.state.inputEnabled });\n                  }}\n                  checked={this.state.inputEnabled}\n                  loading={this.state.loading}\n                />\n                &nbsp;\n                Enable personalized peer groups.\n              </span>\n            </div>\n\n            <div>\n              Minimum group size: &nbsp;\n              <InputNumber min={2}\n                           size={\"large\"}\n                           value={this.state.inputSize}\n                           onChange={val => this.setState({ inputSize: val as number })}\n                           disabled={!this.state.enabled || this.state.loading} />\n            </div>\n\n            <Button className={\"successButtonStyle\"}\n                    onClick={() => this.updatePeerGroups()}\n                    loading={this.state.loading}\n                    disabled={this.state.loading}>\n              { this.state.buttonText }\n            </Button>\n          </Space>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default connector(PeerGroups);","import React, { Component } from \"react\";\nimport Admin from \"../../index\";\nimport {Divider, Space} from \"antd\";\nimport RequireConsent from \"../../../../components/settings/RequireConsent\";\nimport AcceptList from \"../../../../components/settings/AcceptList\";\nimport PeerGroups from \"../../../../components/settings/PeerGroups\";\n\nexport default class Settings extends Component {\n  render(): React.ReactNode {\n    return (\n      <Admin menuKey={\"settings\"}>\n        <h1>Settings</h1>\n        <Divider />\n\n        <Space direction={\"vertical\"} style={{width: '100%'}}>\n          <RequireConsent />\n          <AcceptList />\n          <PeerGroups />\n        </Space>\n      </Admin>\n    )\n  }\n}","import { debug } from \"../../config/config\";\nimport Controller from \"../controller\";\nimport {CanvasStudent} from \"../../models/canvas/Student\";\nimport {ConsentData} from \"../../models/app/ConsentData\";\nimport {GoalData} from \"../../models/app/GoalData\";\nimport {MOCK_STUDENTS, MOCK_CONSENTS, MOCK_GOALS} from \"../../mocks/students\";\nimport {delay} from \"../../utils/mockRequest\";\n\nexport default class StudentController extends Controller {\n\n  static getStudents(): Promise<CanvasStudent[]> {\n    if (debug()) return delay(MOCK_STUDENTS);\n\n    return this.client.get(\n      `students`\n    ).then(response => response.data);\n  }\n\n  static getConsents(): Promise<ConsentData[]> {\n    if (debug()) return delay(MOCK_CONSENTS);\n\n    return this.client.get(\n      `consents`\n    ).then(response => response.data);\n\n  }\n  static getGoalgrades(): Promise<GoalData[]> {\n    if (debug()) return delay(MOCK_GOALS);\n\n    return this.client.get(\n      `goal-grades`\n    ).then(response => response.data);\n  }\n}","import React, { Component } from \"react\";\nimport Select from \"react-select\";\nimport {Button, Tooltip} from \"antd\";\nimport {SyncOutlined} from \"@ant-design/icons\";\nimport { Link } from \"react-router-dom\";\nimport {IProps, IState} from \"./types\";\nimport StudentController from \"../../api/controllers/student\";\nimport {CanvasStudent} from \"../../models/canvas/Student\";\nimport {debug} from \"../../config/config\";\nimport {RootState} from \"../../store\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport \"./style.scss\";\n\nconst mapState = (state: RootState) => ({\n  course: state.course,\n  user: state.user\n});\n\nconst connector = connect(mapState);\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\ntype Props = IProps & PropsFromRedux;\n\nclass AdminHeader extends Component<Props, IState> {\n\n  state = {\n    loaded: false,\n    students: []\n  }\n\n  componentDidMount(): void {\n    const { studentPickView } = this.props;\n\n    if (studentPickView) {\n      StudentController.getStudents().then(students => this.setState({ students, loaded: true }));\n    }\n\n    this.setState({ loaded: true });\n  }\n\n  renderInner(): React.ReactNode {\n    if (this.props.studentPickView) {\n      const { students, loaded } = this.state;\n      return (\n        <Select id={\"studentPicker\"}\n                isLoading={!loaded}\n                options={students.sort(\n                  (a: CanvasStudent, b: CanvasStudent) => a.name.localeCompare(b.name)\n                ).map((s: CanvasStudent) => ({ label: s.name, value: s.login_id}))}\n                placeholder={\"Choose a student\"}\n                onChange={(e) => this.props.setStudent!(\n                  e ? students.find((s: CanvasStudent) => s.login_id === e!.value)! : null\n                )}\n                isClearable={true}\n                styles={{\n                  control: (provided, state) => ({\n                    ...provided,\n                    backgroundColor: 'transparent',\n                    color: 'white',\n                    border: '1px solid white'\n                  }),\n                  singleValue: (provided, state) => {\n                    return {...provided, color: 'white'};\n                  }\n                }}\n        />\n      );\n    }\n\n    return (\n      <div id={\"inner\"}>\n        <h2>{ this.props.course ? this.props.course.course_name : \"Loading course...\" }</h2>\n      </div>\n    );\n  }\n\n  render(): React.ReactNode {\n    return (\n      <React.Fragment>\n        <div id={\"adminHeader\"}>\n          { this.props.studentPickView ?\n            <Link to={'/admin'} style={{ float: 'right' }}>\n              <h3>Admin Panel</h3>\n            </Link> :\n            <div style={{float: 'right', padding: 20}}>\n              <Tooltip title={\"Reload data\"}>\n                <Button id={\"reload\"}\n                        shape=\"circle\"\n                        style={{backgroundColor: 'rgba(255, 255, 255, 0.5)', color: 'white'}}\n                        icon={<SyncOutlined />} />\n              </Tooltip>\n            </div>\n          }\n\n          <div id={\"navbarContent\"}>\n            <div id={\"brand\"}>\n              <Link to={'/'}>\n                <h1>IGuideME</h1>\n              </Link>\n            </div>\n\n            { this.renderInner() }\n          </div>\n        </div>\n        { debug() &&\n          (<div id={\"debugNotice\"}>\n            Application is running in <strong>demo</strong> mode. Changes will not be saved!\n          </div>)\n        }\n      </React.Fragment>\n    );\n  }\n}\n\nexport default connector(AdminHeader);","import React, { Component } from \"react\";\nimport {\n  AppstoreOutlined,\n  ControlOutlined,\n  CloudUploadOutlined,\n  ClusterOutlined,\n  DotChartOutlined,\n  FundProjectionScreenOutlined,\n  LaptopOutlined,\n  TrophyOutlined,\n  NotificationOutlined,\n  DatabaseOutlined,\n  UserOutlined,\n  TeamOutlined } from \"@ant-design/icons\";\nimport { Menu } from \"antd\";\nimport {Link} from \"react-router-dom\";\nimport \"./style.scss\";\nimport {RootState} from \"../../../store\";\nimport {connect, ConnectedProps} from \"react-redux\";\n\nconst mapState = (state: RootState) => ({\n  user: state.user\n});\n\nconst connector = connect(mapState)\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\ntype Props = { menuKey: string } & PropsFromRedux;\n\nclass AdminMenu extends Component<Props> {\n\n  render(): React.ReactNode {\n    const { user } = this.props;\n\n    return (\n      <div id={\"adminMenu\"}>\n        <div id={\"user\"}>\n          <h3>{ user ? user.name : \"Loading profile...\" }</h3>\n          <strong><UserOutlined /> Instructor</strong>\n        </div>\n\n        <Menu selectedKeys={[ this.props.menuKey ]}>\n          <Menu.Item key={\"datamart\"} icon={<DatabaseOutlined />}>\n            <Link to={'/admin'}>\n              Datamart\n            </Link>\n          </Menu.Item>\n\n          <Menu.Item key={\"tiles\"} icon={<AppstoreOutlined />}>\n            <Link to={'/admin/tiles'}>\n              Tiles\n            </Link>\n          </Menu.Item>\n\n          <Menu.Item key={\"dashboard\"} icon={<LaptopOutlined />}>\n            <Link to={'/admin/dashboard'}>\n              Dashboard\n            </Link>\n          </Menu.Item>\n\n          <Menu.Item key={\"studentOverview\"} icon={<TeamOutlined />}>\n            <Link to={'/admin/student-overview'}>\n              Student Overview\n            </Link>\n          </Menu.Item>\n          <Menu.SubMenu key={\"submenu\"} icon={<TrophyOutlined />} title={\"Grades\"}>\n            <Menu.Item key={\"gradePredictor\"} icon={<FundProjectionScreenOutlined />}>\n              <Link to={'/admin/grade-predictor'}>\n                Predictor\n              </Link>\n            </Menu.Item>\n            <Menu.Item key={\"gradeAnalyzer\"} icon={<DotChartOutlined />}>\n              <Link to={'/admin/grade-analyzer'}>\n                Analyzer\n              </Link>\n            </Menu.Item>\n          </Menu.SubMenu>\n          <Menu.Item key={\"dataWizard\"} icon={<CloudUploadOutlined />}>\n            <Link to={'/admin/data-wizard'}>\n              Data Wizard\n            </Link>\n          </Menu.Item>\n          <Menu.Item key={\"analytics\"} icon={<ClusterOutlined />}>\n            <Link to={'/admin/analytics'}>\n              Analytics\n            </Link>\n          </Menu.Item>\n          <Menu.Item key={\"notificationCentre\"} icon={<NotificationOutlined />}>\n            {/* <Link to={'/admin/notification-centre'}> */}\n            <Link to={'/admin'}>\n              Notification Centre\n            </Link>\n          </Menu.Item>\n          <Menu.Item key={\"settings\"} icon={<ControlOutlined />}>\n            <Link to={'/admin/settings'}>\n              Settings\n            </Link>\n          </Menu.Item>\n        </Menu>\n      </div>\n    )\n  }\n}\n\nexport default connector(AdminMenu);","import React, { Component } from \"react\";\nimport { withAdminRole } from \"../../hoc/withAdminRole\";\nimport AdminHeader from \"../../containers/AdminHeader\";\nimport { Redirect } from \"react-router-dom\";\nimport { Col, Row } from \"antd\";\nimport AdminMenu from \"./AdminMenu\";\nimport \"./style.scss\";\n\nclass Admin extends Component<any> {\n\n  render(): React.ReactNode {\n    const { isAdmin, menuKey } = this.props;\n    if (!isAdmin) return (<Redirect to={'/'} />);\n\n    return (\n      <div id={\"admin\"}>\n        <AdminHeader />\n        <Row>\n          <Col xs={4}>\n            <AdminMenu menuKey={menuKey} />\n          </Col>\n          <Col xs={20} id={'wrapper'} className={`${ menuKey !== \"settings\" && \"noOverflow\"}`}>\n            { this.props.children }\n          </Col>\n        </Row>\n      </div>\n    )\n  }\n}\n\nexport default withAdminRole(Admin);"],"sourceRoot":""}