{"version":3,"sources":["components/visuals/GradeScatter/helpers.ts","components/visuals/GradeScatter/index.tsx","common/Admin/sections/grades/GradeAnalyzer/helpers.ts","common/Admin/sections/grades/GradeAnalyzer/EntrySelect/index.tsx","components/visuals/GradesOverviewBar/GradeDistribution/index.tsx","components/visuals/GradesOverviewBar/index.tsx","common/Admin/sections/grades/GradeAnalyzer/index.tsx","api/controllers/student.ts","containers/AdminHeader/index.tsx","common/Admin/AdminMenu/index.tsx","common/Admin/index.tsx","components/visuals/GradesOverviewBar/helpers.ts","components/visuals/GradesOverviewBar/GradeBar/index.tsx"],"names":["createScatterData","mergedData","datasets","label","fill","backgroundColor","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","data","map","p","x","grade1","y","grade2","name","user_login_id","borderWidth","getScatterOptions","maintainAspectRatio","legend","display","tooltips","callbacks","tooltipItem","datasetIndex","index","scales","yAxes","scaleLabel","labelString","ticks","suggestedMin","Math","min","suggestedMax","max","xAxes","GradeScatter","this","props","style","width","height","padding","margin","textAlign","options","Component","getGradeEntryOptions","tiles","entries","tile","tileEntries","filter","e","tile_id","id","title","value","EntrySelect","span","isLoading","onChange","setEntryOne","undefined","setEntryTwo","compute","require","GradeDistribution","grades","className","size","round","mean","g","length","GradesOverviewBar","binary","GradeBar","createLineData","getLineOptions","GradeAnalyzer","state","entryOne","entryTwo","allSubmissions","submissionsOne","submissionsTwo","allEntries","update","TileController","getEntrySubmissions","then","setState","getTiles","a","getTileEntries","push","getAllSubmissions","stack1","stack2","users","Set","s","Array","from","u","find","grade","mergeData","Admin","menuKey","gutter","xs","md","pcorr","d","parseFloat","chi","type","TabPane","tab","key","StudentController","debug","delay","MOCK_STUDENTS","client","get","response","Controller","connector","connect","course","user","AdminHeader","loaded","students","studentPickView","getStudents","sort","b","localeCompare","login_id","placeholder","setStudent","isClearable","styles","control","provided","color","border","singleValue","course_name","Fragment","to","float","shape","icon","renderInner","AdminMenu","UserOutlined","selectedKeys","Item","DatabaseOutlined","AppstoreOutlined","LaptopOutlined","TeamOutlined","SubMenu","TrophyOutlined","FundProjectionScreenOutlined","DotChartOutlined","CloudUploadOutlined","ClusterOutlined","NotificationOutlined","ControlOutlined","isAdmin","children","withAdminRole","labels","toString","borderColor","createBarData","floor","gridLines","getBarOptions","withLegend","stacked","defaultProps"],"mappings":"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","file":"static/js/20.fe8ba4ec.chunk.js","sourcesContent":["import { ChartData } from \"react-chartjs-2\";\nimport {MergedData} from \"./types\";\n\nexport const createScatterData = (mergedData: MergedData[]) => {\n  return {\n    datasets: [\n      {\n        label: 'Quiz 1 vs. Quiz 2',\n        fill: true,\n        backgroundColor: 'rgba(90, 50, 255, 0.4)',\n        pointBorderColor: 'rgb(90, 50, 255)',\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 2,\n        pointHoverRadius: 8,\n        pointHoverBackgroundColor: 'rgb(90, 50, 255)',\n        pointHoverBorderColor: 'rgba(90, 50, 255, 0.8)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 5,\n        pointHitRadius: 7,\n        data: mergedData.map((p: any) => ({ x: p.grade1, y: p.grade2, name: p.user_login_id })),\n        borderWidth: 4\n      }\n    ]\n  }\n}\n\nexport const getScatterOptions = (mergedData: MergedData[]) => {\n  return {\n    maintainAspectRatio: false,\n    legend: {\n      display: false\n    },\n    tooltips: {\n      callbacks: {\n        label: (tooltipItem: any, data: ChartData<any>) => {\n          return data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index].name;\n        }\n      }\n    },\n    scales: {\n      yAxes: [{\n        scaleLabel: {\n          display: true,\n          labelString: 'Quiz 1'\n        },\n        ticks: {\n          suggestedMin: Math.min(...mergedData.map((p: any) => p.grade1)),\n          suggestedMax: Math.max(...mergedData.map((p: any) => p.grade1)),\n        }\n      }],\n      xAxes: [{\n        scaleLabel: {\n          display: true,\n          labelString: 'Quiz 2'\n        },\n        ticks: {\n          suggestedMin: Math.min(...mergedData.map((p: any) => p.grade2)),\n          suggestedMax: Math.max(...mergedData.map((p: any) => p.grade2)),\n        }\n      }]\n    }\n  }\n}","import React, { Component } from \"react\";\nimport { Scatter } from \"react-chartjs-2\";\nimport { createScatterData, getScatterOptions } from \"./helpers\";\nimport { IProps } from \"./types\";\n\nexport default class GradeScatter extends Component<IProps> {\n\n  render(): React.ReactNode {\n    const { mergedData }: IProps = this.props;\n\n    return (\n      <div style={{\n        width: '100%', height: '30vw', padding: 20, margin: '0 auto', textAlign: 'center'\n      }}>\n        <Scatter data={createScatterData(mergedData)} options={getScatterOptions(mergedData)} />\n      </div>\n    );\n  }\n}","import {Tile, TileEntry, TileEntrySubmission} from \"../../../../../models/app/Tile\";\n\nexport const getGradeEntryOptions = (tiles: Tile[], entries: TileEntry[]) => {\n\n  return tiles.map(tile => {\n    const tileEntries = entries.filter(e => e.tile_id === tile.id);\n\n    return {\n      label: tile.title,\n      options: tileEntries.map(e => ({\n        label: e.title, value: e.id\n      }))\n    }\n  });\n}\n\nexport const mergeData = (stack1: TileEntrySubmission[], stack2: TileEntrySubmission[]) => {\n  const users = new Set([...stack1.map(s => s.user_login_id), ...stack2.map(s => s.user_login_id)]);\n\n  return Array.from(users).filter(u => (\n    stack1.find(s => s.user_login_id === u) &&\n      stack2.find(s => s.user_login_id === u)\n    )\n  ).map(u => ({\n    user_login_id: u,\n    grade1: stack1.find(s => s.user_login_id === u)!.grade,\n    grade2: stack2.find(s => s.user_login_id === u)!.grade\n  }));\n}","import React, { Component } from \"react\";\nimport {Col, Row} from \"antd\";\nimport Select from \"react-select\";\nimport { getGradeEntryOptions } from \"../helpers\";\nimport { IProps } from \"./types\";\n\nexport default class EntrySelect extends Component<IProps> {\n\n  render(): React.ReactNode {\n    const { tiles, entries } = this.props;\n    return (\n      <Row style={{width: '100%'}}>\n        <Col span={10}>\n          <Select isLoading={true}\n                  options={getGradeEntryOptions(tiles, entries)}\n                  onChange={(e: any) => this.props.setEntryOne(e ? e.value : undefined)}\n          />\n        </Col>\n        <Col span={4} style={{textAlign: 'center'}}>\n          vs\n        </Col>\n        <Col span={10}>\n          <Select options={getGradeEntryOptions(tiles, entries)}\n                  onChange={(e: any) => this.props.setEntryTwo(e ? e.value : undefined)}\n          />\n        </Col>\n      </Row>\n\n    )\n  }\n}","import React, { Component } from \"react\";\nimport { Space } from \"antd\";\nimport \"./style.scss\";\n\nconst compute = require( 'compute.io' );\n\nexport default class GradeDistribution extends Component<{ grades: number[] }> {\n  render(): React.ReactNode {\n    const { grades } = this.props;\n    return (\n      <div className={\"gradeDistribution\"}>\n        <Space size={20}>\n          <div className={\"item\"}>\n            <h3>{ Math.min(...grades)}</h3>\n            Minimum\n          </div>\n\n          <div className={\"item avg\"}>\n            <h3>{ Math.round(compute.mean(grades) * 100) / 100 }</h3>\n            Average\n          </div>\n\n          <div className={\"item\"}>\n            <h3>{ Math.max(...grades)}</h3>\n            Maximum\n          </div>\n\n          <div className={\"item\"}>\n            <h3>{ Math.round((grades.filter(g => g >= 5.5).length / grades.length) * 10000) / 100 }%</h3>\n            Pass Rate\n          </div>\n        </Space>\n      </div>\n    )\n  }\n}","import React, { Component } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { createLineData, getLineOptions} from \"./helpers\";\nimport GradeDistribution from \"./GradeDistribution\";\nimport GradeBar from \"./GradeBar\";\n\nexport default class GradesOverviewBar extends Component<{\n  binary: boolean,\n  title: string,\n  grades: number[],\n}> {\n\n  render(): React.ReactNode {\n    const { binary, grades, title } = this.props;\n\n    return (\n        <div>\n          <h2>{ title }</h2>\n          <GradeDistribution grades={grades} />\n          <GradeBar height={150} binary={binary} grades={grades} />\n          <div style={{ height: 150 }}>\n            <Line data={createLineData(grades)} options={getLineOptions()} />\n          </div>\n      </div>\n    )\n  }\n}","import React, { Component } from \"react\";\nimport Admin from \"../../../index\";\nimport {Divider, Row, Col, Statistic, Tabs} from \"antd\";\nimport GradeScatter from \"../../../../../components/visuals/GradeScatter\";\nimport EntrySelect from \"./EntrySelect\";\nimport GradeBar from \"../../../../../components/visuals/GradesOverviewBar\";\nimport { IProps, IState } from \"./types\";\nimport TileController from \"../../../../../api/controllers/tile\";\nimport {mergeData} from \"./helpers\";\nimport {TileEntry, TileEntrySubmission} from \"../../../../../models/app/Tile\";\n\nconst compute = require( 'compute.io' );\n\nexport default class GradeAnalyzer extends Component<IProps, IState> {\n\n  state = {\n    tiles: [],\n    entryOne: undefined, entryTwo: undefined,\n    allSubmissions: [], submissionsOne: [], submissionsTwo: [], allEntries: []\n  }\n\n  componentDidMount(): void {\n    TileController.getTiles().then(async tiles => {\n      let allEntries: TileEntry[] = [];\n\n      for (const tile of tiles) {\n        await TileController.getTileEntries(tile.id).then(entries => allEntries.push(...entries));\n      }\n\n      TileController.getAllSubmissions().then(allSubmissions =>\n        this.setState({ allSubmissions, allEntries, tiles })\n      );\n    });\n  }\n\n  update = () => {\n    const { entryOne, entryTwo } = this.state;\n\n    if (!entryOne || !entryTwo) {\n      return;\n    }\n\n    TileController.getEntrySubmissions(entryOne!).then((submissionsOne) => {\n      TileController.getEntrySubmissions(entryTwo!).then((submissionsTwo) => {\n        this.setState({ submissionsOne, submissionsTwo });\n      });\n    });\n  }\n\n  render(): React.ReactNode {\n    const {\n      entryOne,\n      entryTwo,\n      submissionsOne,\n      submissionsTwo,\n      allSubmissions,\n      allEntries,\n      tiles\n    }: IState = this.state;\n\n    const data = mergeData(submissionsOne, submissionsTwo);\n\n    return (\n      <Admin menuKey={\"gradeAnalyzer\"}>\n        <h1>Grade Analyzer</h1>\n        <Divider />\n\n        <EntrySelect\n          setEntryOne={(id) => this.setState({ entryOne: id }, () => this.update())}\n          setEntryTwo={(id) => this.setState({ entryTwo: id }, () => this.update())}\n          tiles={tiles}\n          entries={allEntries}\n        />\n\n        <Divider />\n\n        { (data.length > 0) ?\n          <Row gutter={[50, 10]}>\n            <Col xs={24} md={24}>\n              <div className={\"primaryContainer\"}>\n                <Row>\n                  <Col xs={24}>\n                    <Row gutter={10}>\n                      <Col>\n                        <Statistic\n                          title={\"Correlation\"}\n                          value={Math.round(compute.pcorr(\n                            data.map(d => parseFloat(d.grade1)),\n                            data.map(d => parseFloat(d.grade2))\n                          )[0][1] * 1000) / 1000}\n                        />\n                      </Col>\n                      <Col>\n                        <Statistic\n                          title={\"Chi-square dist.\"}\n                          value={compute.chi}\n                        />\n                      </Col>\n                      <Col>\n                        <Statistic\n                          title={\"Sample size\"}\n                          value={data.length}\n                        />\n                      </Col>\n                    </Row>\n                  </Col>\n\n                  <Col xs={24}>\n                    <Tabs type=\"card\">\n                      <Tabs.TabPane tab={\"Grade correlation\"} key=\"1\">\n                        <GradeScatter mergedData={data} />\n                      </Tabs.TabPane>\n                      <Tabs.TabPane tab={\"Statistics\"} key=\"2\">\n                        <Row gutter={[50, 10]}>\n                          <Col xs={24} md={12}>\n                            <GradeBar binary={false}\n                                      title={allEntries.find(e => e.id === entryOne)?.title || \"\"}\n                                      grades={submissionsOne.map((s: TileEntrySubmission) => parseFloat(s.grade))} />\n                          </Col>\n\n                          <Col xs={24} md={12}>\n                            <GradeBar binary={false}\n                                      title={allEntries.find(e => e.id === entryTwo)?.title || \"\"}\n                                      grades={submissionsTwo.map((s: TileEntrySubmission) => parseFloat(s.grade))} />\n                          </Col>\n                        </Row>\n                      </Tabs.TabPane>\n                    </Tabs>\n                  </Col>\n                </Row>\n              </div>\n            </Col>\n          </Row> : <span>Waiting for selection</span>\n        }\n      </Admin>\n    )\n  }\n}","import { debug } from \"../../config/config\";\nimport Controller from \"../controller\";\nimport {CanvasStudent} from \"../../models/canvas/Student\";\nimport {MOCK_STUDENTS} from \"../../mocks/students\";\nimport {delay} from \"../../utils/mockRequest\";\n\nexport default class StudentController extends Controller {\n\n  static getStudents(): Promise<CanvasStudent[]> {\n    if (debug()) return delay(MOCK_STUDENTS);\n\n    return this.client.get(\n      `students`\n    ).then(response => response.data);\n  }\n}","import React, { Component } from \"react\";\nimport Select from \"react-select\";\nimport {Button, Tooltip} from \"antd\";\nimport {SyncOutlined} from \"@ant-design/icons\";\nimport { Link } from \"react-router-dom\";\nimport {IProps, IState} from \"./types\";\nimport StudentController from \"../../api/controllers/student\";\nimport {CanvasStudent} from \"../../models/canvas/Student\";\nimport {debug} from \"../../config/config\";\nimport {RootState} from \"../../store\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport \"./style.scss\";\n\nconst mapState = (state: RootState) => ({\n  course: state.course,\n  user: state.user\n});\n\nconst connector = connect(mapState);\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\ntype Props = IProps & PropsFromRedux;\n\nclass AdminHeader extends Component<Props, IState> {\n\n  state = {\n    loaded: false,\n    students: []\n  }\n\n  componentDidMount(): void {\n    const { studentPickView } = this.props;\n\n    if (studentPickView) {\n      StudentController.getStudents().then(students => this.setState({ students, loaded: true }));\n    }\n\n    this.setState({ loaded: true });\n  }\n\n  renderInner(): React.ReactNode {\n    if (this.props.studentPickView) {\n      const { students, loaded } = this.state;\n      return (\n        <Select id={\"studentPicker\"}\n                isLoading={!loaded}\n                options={students.sort(\n                  (a: CanvasStudent, b: CanvasStudent) => a.name.localeCompare(b.name)\n                ).map((s: CanvasStudent) => ({ label: s.name, value: s.login_id}))}\n                placeholder={\"Choose a student\"}\n                onChange={(e) => this.props.setStudent!(\n                  e ? students.find((s: CanvasStudent) => s.login_id === e!.value)! : null\n                )}\n                isClearable={true}\n                styles={{\n                  control: (provided, state) => ({\n                    ...provided,\n                    backgroundColor: 'transparent',\n                    color: 'white',\n                    border: '1px solid white'\n                  }),\n                  singleValue: (provided, state) => {\n                    return {...provided, color: 'white'};\n                  }\n                }}\n        />\n      );\n    }\n\n    return (\n      <div id={\"inner\"}>\n        <h2>{ this.props.course ? this.props.course.course_name : \"Loading course...\" }</h2>\n      </div>\n    );\n  }\n\n  render(): React.ReactNode {\n    return (\n      <React.Fragment>\n        <div id={\"adminHeader\"}>\n          { this.props.studentPickView ?\n            <Link to={'/admin'} style={{ float: 'right' }}>\n              <h3>Admin Panel</h3>\n            </Link> :\n            <div style={{float: 'right', padding: 20}}>\n              <Tooltip title={\"Reload data\"}>\n                <Button id={\"reload\"}\n                        shape=\"circle\"\n                        style={{backgroundColor: 'rgba(255, 255, 255, 0.5)', color: 'white'}}\n                        icon={<SyncOutlined />} />\n              </Tooltip>\n            </div>\n          }\n\n          <div id={\"navbarContent\"}>\n            <div id={\"brand\"}>\n              <Link to={'/'}>\n                <h1>IGuideME</h1>\n              </Link>\n            </div>\n\n            { this.renderInner() }\n          </div>\n        </div>\n        { debug() &&\n          (<div id={\"debugNotice\"}>\n            Application is running in <strong>demo</strong> mode. Changes will not be saved!\n          </div>)\n        }\n      </React.Fragment>\n    );\n  }\n}\n\nexport default connector(AdminHeader);","import React, { Component } from \"react\";\nimport {\n  AppstoreOutlined,\n  ControlOutlined,\n  CloudUploadOutlined,\n  ClusterOutlined,\n  DotChartOutlined,\n  FundProjectionScreenOutlined,\n  LaptopOutlined,\n  TrophyOutlined,\n  NotificationOutlined,\n  DatabaseOutlined,\n  UserOutlined,\n  TeamOutlined } from \"@ant-design/icons\";\nimport { Menu } from \"antd\";\nimport {Link} from \"react-router-dom\";\nimport \"./style.scss\";\nimport {RootState} from \"../../../store\";\nimport {connect, ConnectedProps} from \"react-redux\";\n\nconst mapState = (state: RootState) => ({\n  user: state.user\n});\n\nconst connector = connect(mapState)\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\ntype Props = { menuKey: string } & PropsFromRedux;\n\nclass AdminMenu extends Component<Props> {\n\n  render(): React.ReactNode {\n    const { user } = this.props;\n\n    return (\n      <div id={\"adminMenu\"}>\n        <div id={\"user\"}>\n          <h3>{ user ? user.name : \"Loading profile...\" }</h3>\n          <strong><UserOutlined /> Instructor</strong>\n        </div>\n\n        <Menu selectedKeys={[ this.props.menuKey ]}>\n          <Menu.Item key={\"datamart\"} icon={<DatabaseOutlined />}>\n            <Link to={'/admin'}>\n              Datamart\n            </Link>\n          </Menu.Item>\n\n          <Menu.Item key={\"tiles\"} icon={<AppstoreOutlined />}>\n            <Link to={'/admin/tiles'}>\n              Tiles\n            </Link>\n          </Menu.Item>\n\n          <Menu.Item key={\"dashboard\"} icon={<LaptopOutlined />}>\n            <Link to={'/admin/dashboard'}>\n              Dashboard\n            </Link>\n          </Menu.Item>\n\n          <Menu.Item key={\"studentOverview\"} icon={<TeamOutlined />}>\n            <Link to={'/admin/student-overview'}>\n              Student Overview\n            </Link>\n          </Menu.Item>\n          <Menu.SubMenu key={\"submenu\"} icon={<TrophyOutlined />} title={\"Grades\"}>\n            <Menu.Item key={\"gradePredictor\"} icon={<FundProjectionScreenOutlined />}>\n              <Link to={'/admin/grade-predictor'}>\n                Predictor\n              </Link>\n            </Menu.Item>\n            <Menu.Item key={\"gradeAnalyzer\"} icon={<DotChartOutlined />}>\n              <Link to={'/admin/grade-analyzer'}>\n                Analyzer\n              </Link>\n            </Menu.Item>\n          </Menu.SubMenu>\n          <Menu.Item key={\"dataWizard\"} icon={<CloudUploadOutlined />}>\n            <Link to={'/admin/data-wizard'}>\n              Data Wizard\n            </Link>\n          </Menu.Item>\n          <Menu.Item key={\"analytics\"} icon={<ClusterOutlined />}>\n            <Link to={'/admin/analytics'}>\n              Analytics\n            </Link>\n          </Menu.Item>\n          <Menu.Item key={\"notificationCentre\"} icon={<NotificationOutlined />}>\n            <Link to={'/notification-centre'}>\n              Notification Centre\n            </Link>\n          </Menu.Item>\n          <Menu.Item key={\"settings\"} icon={<ControlOutlined />}>\n            <Link to={'/admin/settings'}>\n              Settings\n            </Link>\n          </Menu.Item>\n        </Menu>\n      </div>\n    )\n  }\n}\n\nexport default connector(AdminMenu);","import React, { Component } from \"react\";\nimport { withAdminRole } from \"../../hoc/withAdminRole\";\nimport AdminHeader from \"../../containers/AdminHeader\";\nimport { Redirect } from \"react-router-dom\";\nimport { Col, Row } from \"antd\";\nimport AdminMenu from \"./AdminMenu\";\nimport \"./style.scss\";\n\nclass Admin extends Component<any> {\n\n  render(): React.ReactNode {\n    const { isAdmin, menuKey } = this.props;\n    if (!isAdmin) return (<Redirect to={'/'} />);\n\n    return (\n      <div id={\"admin\"}>\n        <AdminHeader />\n        <Row>\n          <Col xs={4}>\n            <AdminMenu menuKey={menuKey} />\n          </Col>\n          <Col xs={20} id={'wrapper'} className={`${ menuKey !== \"settings\" && \"noOverflow\"}`}>\n            { this.props.children }\n          </Col>\n        </Row>\n      </div>\n    )\n  }\n}\n\nexport default withAdminRole(Admin);","export const createLineData = (grades: number[]) => {\n  return {\n    labels: grades.sort((a, b) =>\n      a - b).map(s => s.toString()),\n    datasets: [\n      {\n        label: \"Grades\",\n        borderColor: \"rgb(90, 50, 255)\",\n        backgroundColor: \"rgba(90, 50, 255, 0.4)\",\n        pointRadius: 0,\n        data: grades.sort((a, b) =>\n          a - b)\n      }\n    ]\n  }\n}\n\nexport const createBarData = (grades: number[], binary: boolean) => {\n  return {\n    labels: binary ? ['0', '1'] : ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10'],\n    datasets: [{\n      label: \"Failed\",\n      backgroundColor: \"rgb(255,110,90)\",\n      data: binary ?\n        [\n          grades.filter(s => s === 0).length,\n          0,\n        ] : [\n        grades.filter(s => Math.floor(s) === 0).length,\n        grades.filter(s => Math.floor(s) === 1).length,\n        grades.filter(s => Math.floor(s) === 2).length,\n        grades.filter(s => Math.floor(s) === 3).length,\n        grades.filter(s => Math.floor(s) === 4).length,\n        grades.filter(s => Math.floor(s) === 5 && s < 5.5).length,\n        0,\n        0,\n        0,\n        0,\n        0\n      ]\n    }, {\n      label: \"Passed\",\n      backgroundColor: \"rgb(0, 185, 125)\",\n      data: binary ?\n        [\n          0,\n          grades.filter(s => s === 1).length,\n        ] : [\n        0,\n        0,\n        0,\n        0,\n        0,\n        grades.filter(s => Math.floor(s) === 5 && s >= 5.5).length,\n        grades.filter(s => Math.floor(s) === 6).length,\n        grades.filter(s => Math.floor(s) === 7).length,\n        grades.filter(s => Math.floor(s) === 8).length,\n        grades.filter(s => Math.floor(s) === 9).length,\n        grades.filter(s => Math.floor(s) === 10).length,\n      ]\n    }]\n  }\n}\n\nexport const getLineOptions = () => {\n  return {\n    maintainAspectRatio: false,\n    legend: {\n      display: false\n    },\n    scales: {\n      xAxes: [{\n        gridLines : {\n          display : false\n        },\n        ticks: {\n          display: false\n        }\n      }],\n      yAxes: [{\n        scaleLabel: {\n          display: true,\n          labelString: 'Grade'\n        }\n      }]\n    }\n  }\n}\n\nexport const getBarOptions = (withLegend: boolean) => {\n  return {\n    maintainAspectRatio: false,\n    legend: {\n      display: false\n    },\n    scales: {\n      xAxes: [{\n        gridLines : {\n          display : false\n        },\n        scaleLabel: {\n          display: withLegend,\n          labelString: 'Grade'\n        },\n        stacked: true,\n      }],\n      yAxes: [{\n        scaleLabel: {\n          display: withLegend,\n          labelString: '# of students'\n        },\n        stacked: true\n      }]\n    }\n  }\n}","import React, { Component } from \"react\";\nimport {createBarData, getBarOptions} from \"../helpers\";\nimport {Bar} from \"react-chartjs-2\";\n\nexport default class GradeBar extends Component<{\n  grades: number[],\n  binary: boolean,\n  height: number,\n  withLegend: boolean\n}> {\n\n  static defaultProps = {\n    height: 300,\n    withLegend: true\n  }\n\n  render(): React.ReactNode {\n    const { grades, binary, height, withLegend } = this.props;\n\n    return (\n      <div>\n        <Bar height={height} data={createBarData(grades, binary)} options={getBarOptions(withLegend)} />\n      </div>\n    );\n  }\n}"],"sourceRoot":""}