{"version":3,"file":"static/js/935.93ded491.chunk.js","mappings":"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","sources":["api/controllers/student.ts","common/Admin/AdminMenu/index.tsx","common/Admin/index.tsx","common/Admin/sections/grades/GradePredictorOld/ConfigureModel/steps/DataSourceUpload/DemoAnimation/index.tsx","common/Admin/sections/grades/GradePredictorOld/ConfigureModel/steps/DataSourceUpload/index.tsx","utils/validators.ts","common/Admin/sections/grades/GradePredictorOld/ConfigureModel/helpers.ts","common/Admin/sections/grades/GradePredictorOld/ConfigureModel/steps/Relationships/RelationMapper/helpers.ts","common/Admin/sections/grades/GradePredictorOld/ConfigureModel/steps/Relationships/RelationMapper/index.tsx","common/Admin/sections/grades/GradePredictorOld/ConfigureModel/steps/Relationships/index.tsx","common/Admin/sections/grades/GradePredictorOld/ConfigureModel/steps/TrainModels/helpers.ts","common/Admin/sections/grades/GradePredictorOld/ConfigureModel/steps/TrainModels/index.tsx","common/Admin/sections/grades/GradePredictorOld/ConfigureModel/steps/UploadOverview/index.tsx","common/Admin/sections/grades/GradePredictorOld/ConfigureModel/index.tsx","common/Admin/sections/grades/GradePredictorOld/ModelResults/index.tsx","common/Admin/sections/grades/GradePredictorOld/index.tsx","containers/AdminHeader/index.tsx"],"sourcesContent":["import { debug } from \"../../config/config\";\nimport Controller from \"../controller\";\nimport {CanvasStudent} from \"../../models/canvas/Student\";\nimport {ConsentData} from \"../../models/app/ConsentData\";\nimport {GoalData} from \"../../models/app/GoalData\";\nimport {MOCK_STUDENTS, MOCK_CONSENTS, MOCK_GOALS} from \"../../mocks/students\";\nimport {delay} from \"../../utils/mockRequest\";\n\nexport default class StudentController extends Controller {\n\n  static getStudents(): Promise<CanvasStudent[]> {\n    if (debug()) return delay(MOCK_STUDENTS);\n\n    return this.client.get(\n      `students`\n    ).then(response => response.data);\n  }\n\n  static getConsents(): Promise<ConsentData[]> {\n    if (debug()) return delay(MOCK_CONSENTS);\n\n    return this.client.get(\n      `consents`\n    ).then(response => response.data);\n\n  }\n  static getGoalgrades(): Promise<GoalData[]> {\n    if (debug()) return delay(MOCK_GOALS);\n\n    return this.client.get(\n      `goal-grades`\n    ).then(response => response.data);\n  }\n}","import React, { Component } from \"react\";\nimport {\n    AppstoreOutlined,\n    ControlOutlined,\n    CloudUploadOutlined,\n    ClusterOutlined,\n    DotChartOutlined,\n    FundProjectionScreenOutlined,\n    LaptopOutlined,\n    TrophyOutlined,\n    NotificationOutlined,\n    DatabaseOutlined,\n    UserOutlined,\n    TeamOutlined\n} from \"@ant-design/icons\";\nimport { Menu } from \"antd\";\nimport { Link } from \"react-router-dom\";\nimport \"./style.scss\";\nimport { RootState } from \"../../../store\";\nimport { connect, ConnectedProps } from \"react-redux\";\n\nconst mapState = (state: RootState) => ({\n    user: state.user\n});\n\nconst connector = connect(mapState)\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\ntype Props = { menuKey: string } & PropsFromRedux;\n\nclass AdminMenu extends Component<Props> {\n\n    render(): React.ReactNode {\n        const { user } = this.props;\n\n        return (\n            <div id={\"adminMenu\"}>\n                <div id={\"user\"}>\n                    <h3>{user ? user.name : \"Loading profile...\"}</h3>\n                    <strong><UserOutlined /> Instructor</strong>\n                </div>\n\n                <Menu selectedKeys={[this.props.menuKey]}>\n                    <Menu.Item key={\"datamart\"} icon={<DatabaseOutlined />}>\n                        <Link to={'/admin'}>\n                            Datamart\n            </Link>\n                    </Menu.Item>\n\n                    <Menu.Item key={\"tiles\"} icon={<AppstoreOutlined />}>\n                        <Link to={'/admin/tiles'}>\n                            Tiles\n            </Link>\n                    </Menu.Item>\n\n                    <Menu.Item key={\"dashboard\"} icon={<LaptopOutlined />}>\n                        <Link to={'/admin/dashboard'}>\n                            Dashboard\n            </Link>\n                    </Menu.Item>\n\n                    <Menu.Item key={\"studentOverview\"} icon={<TeamOutlined />}>\n                        <Link to={'/admin/student-overview'}>\n                            Student Overview\n            </Link>\n                    </Menu.Item>\n                    <Menu.SubMenu key={\"submenu\"} icon={<TrophyOutlined />} title={\"Grades\"}>\n                        <Menu.Item key={\"gradePredictorOld\"} icon={<FundProjectionScreenOutlined />}>\n                            <Link to={'/admin/grade-predictor-old'}>\n                                Old Predictor\n              </Link>\n                        </Menu.Item>\n                        <Menu.Item key={\"gradePredictor\"} icon={<FundProjectionScreenOutlined />}>\n                            <Link to={'/admin/grade-predictor'}>\n                                Predictor\n              </Link>\n                        </Menu.Item>\n                        <Menu.Item key={\"gradeAnalyzer\"} icon={<DotChartOutlined />}>\n                            <Link to={'/admin/grade-analyzer'}>\n                                Analyzer\n              </Link>\n                        </Menu.Item>\n                    </Menu.SubMenu>\n                    <Menu.Item key={\"dataWizard\"} icon={<CloudUploadOutlined />}>\n                        <Link to={'/admin/data-wizard'}>\n                            Data Wizard\n            </Link>\n                    </Menu.Item>\n                    <Menu.Item key={\"analytics\"} icon={<ClusterOutlined />}>\n                        <Link to={'/admin/analytics'}>\n                            Analytics\n            </Link>\n                    </Menu.Item>\n                    <Menu.Item key={\"notificationCentre\"} icon={<NotificationOutlined />}>\n                        <Link to={'/admin/notification-centre'}>\n                            Notification Centre\n            </Link>\n                    </Menu.Item>\n                    <Menu.Item key={\"settings\"} icon={<ControlOutlined />}>\n                        <Link to={'/admin/settings'}>\n                            Settings\n            </Link>\n                    </Menu.Item>\n                </Menu>\n            </div>\n        )\n    }\n}\n\nexport default connector(AdminMenu);\n","import React, { Component } from \"react\";\nimport { withAdminRole } from \"../../hoc/withAdminRole\";\nimport AdminHeader from \"../../containers/AdminHeader\";\nimport { Redirect } from \"react-router-dom\";\nimport { Col, Row } from \"antd\";\nimport AdminMenu from \"./AdminMenu\";\nimport \"./style.scss\";\n\nclass Admin extends Component<any> {\n\n  render(): React.ReactNode {\n    const { isAdmin, menuKey } = this.props;\n    if (!isAdmin) return (<Redirect to={'/'} />);\n\n    return (\n      <div id={\"admin\"}>\n        <AdminHeader />\n        <Row>\n          <Col xs={4}>\n            <AdminMenu menuKey={menuKey} />\n          </Col>\n          <Col xs={20} id={'wrapper'} className={`${ menuKey !== \"settings\" && \"noOverflow\"}`}>\n            { this.props.children }\n          </Col>\n        </Row>\n      </div>\n    )\n  }\n}\n\nexport default withAdminRole(Admin);","import React, { Component } from \"react\";\nimport \"./style.scss\";\n\nexport default class DemoAnimation extends Component {\n\n  state = {\n    offset: -2\n  }\n\n  componentDidMount(): void {\n    setTimeout(() => {\n      this.setState({ offset: 300 });\n    }, 500)\n  }\n\n  render(): React.ReactNode {\n    const { offset } = this.state;\n\n    return (\n      <div id={\"demoAnimation\"}>\n        <div id={\"spreadsheet\"}>\n          <div id={\"wallpaper\"} />\n          <svg width={400} height={300}>\n            <rect x={0} y={0} width={400} height={300} fill={\"transparent\"} />\n            <rect x={0} y={offset} width={400} height={3} fill={'rgba(255, 0, 0, 0.75)'} />\n          </svg>\n        </div>\n      </div>\n    )\n  }\n}","import React, { Component } from \"react\";\nimport CSVReader from \"react-csv-reader\";\nimport { Alert, Col, Divider, message, Row } from \"antd\";\nimport \"./style.scss\";\nimport { validateExternalUploadSchema } from \"../../../../../../../../utils/validators\";\nimport DemoAnimation from \"./DemoAnimation\";\n\ntype IProps = {\n    setData: (data: any[]) => any;\n}\n\nexport default class DataSourceUpload extends Component<IProps> {\n    render(): React.ReactNode {\n        return (\n            <div>\n                <Row>\n                    <Col xs={24} md={14}>\n                        <h2>Step 1. Historic data</h2>\n                        <Divider />\n                        <p>To train the predictive models historic course data is required. If you do not have historic course data available you are unable to create a predictive model, be sure to save this year's data for next year! Please provide the data in a <strong>CSV</strong> format. The data must adhere to the simple principle that each column corresponds to a unique gradable component (i.e. a quiz or exam), and each row represents a student. There must be a column named <i>final_grade</i> specifying the final grade of the student for the course.</p>\n\n                        <Alert message={\"The models are trained on the data source from your local browser. This means that the data source will never be uploaded to our service. Only the computed model states will be stored by the application.\"} />\n\n                        <div id={\"dataSourceUpload\"}>\n                            <label style={{ height: 'fit-content' }}>\n                                Upload data source\n                              <CSVReader\n                                    inputId={'CSVReader'}\n                                    inputStyle={{ display: 'none' }}\n                                    onFileLoaded={(records) => {\n                                        if (!validateExternalUploadSchema(records))\n                                            return message.error(\"Invalid data schema!\");\n\n                                        this.props.setData(records);\n                                    }}\n                                    onError={() => message.error(\"Invalid data source!\")}\n                                    parserOptions={{\n                                        header: true,\n                                        dynamicTyping: true,\n                                        skipEmptyLines: true,\n                                        transformHeader: (header: any) =>\n                                            header\n                                                .toLowerCase()\n                                                .replace(/\\W/g, '_')\n                                    }}\n                                />\n                            </label>\n                        </div>\n                    </Col>\n                    <Col xs={0} md={10}>\n                        <DemoAnimation />\n                    </Col>\n                </Row>\n            </div>\n        )\n    }\n}\n","export const validateExternalUploadSchema = (records: any[]) => {\n  return records.every(row => {\n    const rowKeys = Object.keys(row).map(s => s.toLowerCase());\n    return ['final_grade'].every(k => rowKeys.includes(k));\n  });\n}","export const steps = [\n  {\n    title: 'Upload source',\n    content: 'First-content',\n  },\n  {\n    title: 'Configure relationships',\n    content: 'Second-content',\n  },\n  {\n    title: 'Train models',\n    content: 'Last-content',\n  },\n  {\n    title: 'Done!',\n    content: 'Last-content',\n  },\n]","import {Tile, TileEntry} from \"../../../../../../../../../models/app/Tile\";\n\nexport const getTileOptions = (tile: Tile, entries: TileEntry[]) => {\n  if (tile.content === \"BINARY\") {\n    return {\n      label: tile.title, value: tile.id\n    }\n  }\n\n  return {\n    label: tile.title, value: tile.id,\n    children: entries.filter(e => e.tile_id === tile.id).map(e => ({\n      label: e.title, value: e.id\n    }))\n  }\n}\n\nexport const getOptions = (tiles: Tile[], entries: TileEntry[]) => {\n  return tiles\n    .filter(t => (t.content !== \"PREDICTION\") && (t.content !== \"LEARNING_OUTCOMES\"))\n    .map(t => getTileOptions(t, entries))\n}","import React, { Component } from \"react\";\nimport {Badge, Cascader, Col, Row, Select} from \"antd\";\nimport {RootState} from \"../../../../../../../../../store\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport {getOptions} from \"./helpers\";\nimport {RelationshipRegistry} from \"../../../../../../../../../models/app/GradePredictor\";\nimport \"./style.scss\";\nimport TileController from \"../../../../../../../../../api/controllers/tile\";\n\ntype IProps = {\n  _key: string;\n  data: any[];\n  registry: RelationshipRegistry | undefined;\n  setEntry: (key: string, tile_id: number, entry_id: number) => any;\n  setMetaKey: (key: string, entry_id: number, meta_key: string) => any;\n}\n\nconst mapState = (state: RootState) => ({\n  tiles: state.tiles,\n  tileEntries: state.tileEntries,\n});\n\nconst connector = connect(mapState)\ntype PropsFromRedux = ConnectedProps<typeof connector>\ntype Props = IProps & PropsFromRedux;\n\nclass RelationMapper extends Component<Props> {\n\n  state = {\n    loading: false,\n    metaKeys: []\n  }\n\n  componentDidMount(): void {\n    this.loadMetaKeys(this.props);\n  }\n\n  componentWillReceiveProps(nextProps: Readonly<Props>, nextContext: any): void {\n    if (nextProps.registry?.entry_id !== this.props.registry?.entry_id) {\n      this.loadMetaKeys(nextProps);\n    }\n  }\n\n  loadMetaKeys = ({ registry }: Props) => {\n    if (!registry) return;\n    if (!registry.entry_id) return;\n\n    this.setState({ loading: true }, () => {\n      TileController.getTileEntriesMetaKeys(registry.entry_id).then(metaKeys => {\n        this.setState({ metaKeys, loading: false });\n      });\n    });\n  }\n\n  getValue = () => {\n    const { registry } = this.props;\n    if (!registry) return undefined;\n\n    if (registry.entry_id < 0) {\n      return [registry.tile_id];\n    }\n    return [registry.tile_id, registry.entry_id];\n  }\n\n  isValidKey = (key: string) => {\n    const { data } = this.props;\n    if (data.length === 0) return false;\n\n    return data.filter(row => row[key]).every(row => {\n      return /^[1-9]\\d{0,2}(\\.\\d{3})*(,\\d+)?$/.test(row[key]);\n    })\n  }\n\n  render(): React.ReactNode {\n    const { registry, tiles, tileEntries, _key } = this.props;\n    const { loading, metaKeys } = this.state;\n\n    return (\n      <div className={\"relationship\"}>\n        <Row gutter={[10, 20]}>\n          <Col xs={12}>\n            <span>Source key</span>\n            <h3><strong>{ _key }</strong></h3>\n          </Col>\n          <Col xs={12}>\n            <span>Tile Entry</span>\n            <br />\n            <Cascader options={getOptions(tiles, tileEntries)}\n                      value={this.getValue()}\n                      disabled={!this.isValidKey(_key)}\n                      style={{width: '100%'}}\n                      onChange={(val, _) => {\n                        if (val.length === 2) {\n                          this.props.setEntry(_key, val[0] as number, val[1] as number);\n                        } else if (val.length === 1) {\n                          this.props.setEntry(_key, val[0] as number, -1);\n                        }\n                      }}\n                      size={\"large\"}\n                      placeholder={\"Select tile entry\"} />\n          </Col>\n          <Col xs={12}>\n            <span>Status</span>\n            <br/>\n            <Badge status={this.isValidKey(_key) ? \"success\" : \"error\"}\n                   text={this.isValidKey(_key) ?\n                       \"Data suitable for model\" :\n                       \"Non-numeric data!\"} />\n          </Col>\n          <Col xs={12}>\n            <span>Meta property</span>\n            <br />\n            <Select disabled={(registry?.tile_id ?\n                      tiles.find(t => t.id === registry.tile_id)!.type !== \"EXTERNAL_DATA\" : true)}\n                    style={{width: '100%'}}\n                    defaultValue={registry ? registry.meta_key : \"grade\"}\n                    loading={loading}\n                    value={registry ? registry.meta_key : undefined}\n                    size={\"large\"}\n                    onChange={(val, _) => {\n                      // input should be disabled if registry does not exist\n                      if (registry) {\n                        this.props.setMetaKey(registry?.source_key, registry?.entry_id, val);\n                      }\n                    }}\n                    options={[\n                      { value: 'grade', label: 'Grade (default)' },\n                      ...metaKeys.map(k => ({ value: k, label: k }))\n            ]} />\n          </Col>\n        </Row>\n      </div>\n    )\n  }\n}\n\nexport default connector(RelationMapper);","import React, { Component } from \"react\";\nimport RelationMapper from \"./RelationMapper\";\nimport { RelationshipRegistry } from \"../../../../../../../../models/app/GradePredictor\";\nimport { Button, Divider } from \"antd\";\n\ntype IProps = {\n    data: any[];\n    registry: RelationshipRegistry[];\n    setRegistry: (data: RelationshipRegistry[]) => any;\n    nextStep: () => any;\n}\n\nexport default class Relationships extends Component<IProps> {\n\n    getKeysFromSource = () => {\n        const { data } = this.props;\n        let keys = new Set(...data.map(x => Object.keys(x)));\n        keys.delete(\"final_grade\");\n\n        return Array.from(keys).filter(k => k.length > 0);\n    }\n\n    setEntry = (source_key: string, tile_id: number, entry_id: number) => {\n        let registry: RelationshipRegistry[] = JSON.parse(JSON.stringify(this.props.registry));\n        const idx = registry.findIndex(r => r.source_key === source_key);\n\n        if (idx >= 0) {\n            registry[idx].tile_id = tile_id;\n            registry[idx].entry_id = entry_id;\n            registry[idx].meta_key = \"grade\";\n            this.props.setRegistry(registry);\n        } else {\n            this.props.setRegistry([...registry, {\n                tile_id, entry_id, source_key, meta_key: \"grade\"\n            }])\n        }\n    }\n\n    setMetaKey = (source_key: string, entry_id: number, meta_key: string) => {\n        let registry: RelationshipRegistry[] =\n            JSON.parse(JSON.stringify(this.props.registry));\n        const idx = registry.findIndex(r => r.source_key === source_key && r.entry_id === entry_id);\n\n        if (idx >= 0) {\n            registry[idx].meta_key = meta_key;\n            this.props.setRegistry(registry);\n        }\n    }\n\n    render(): React.ReactNode {\n        const { registry, data } = this.props;\n        return (\n            <div id={\"relationships\"}>\n                <h2>Step 2. Establish relationships</h2>\n                { this.getKeysFromSource().sort().map(k =>\n                    <div>\n                        <RelationMapper registry={registry.find(r => r.source_key === k)}\n                            setEntry={this.setEntry}\n                            setMetaKey={this.setMetaKey}\n                            _key={k}\n                            data={data}\n                        />\n                    </div>\n                )}\n                <Divider />\n\n                { registry.length < 4 &&\n                    <div style={{ padding: '10px 0' }}>\n                        <strong>You must provide at least four components!</strong>\n                    </div>\n                }\n\n                <Button onClick={this.props.nextStep} disabled={registry.length < 4}>\n                    Train models\n        </Button>\n            </div>\n        )\n    }\n}\n","import {RelationshipRegistry} from \"../../../../../../../../models/app/GradePredictor\";\nimport MLR from \"ml-regression-multivariate-linear\";\n\nconst compute = require( 'compute.io' );\n\nexport const getRegistryCombinations = (registry: RelationshipRegistry[]): RelationshipRegistry[][] => {\n\n  let results = [];\n  const n = registry.length;\n\n  for (let r = 3; r <= n; r ++) {\n    let a: number[] = [];\n\n    for (let i = 0; i < r; i++) {\n      a[i] = i;\n    }\n\n    let i = r - 1;\n    while (a[0] < n - r + 1) {\n      while (i > 0 && a[i] === n - r + i) i--;\n\n      results.push(JSON.parse(JSON.stringify(a.map(idx => registry[idx]))));\n      a[i]++;\n\n      while (i < r - 1) {\n        a[i + 1] = a[i] + 1;\n        i++;\n      }\n    }\n  }\n\n  return results;\n}\n\nexport const splitData = (data: number[][], testSize: number = 0.2) => {\n  const X: any[] = data.map(r => r.slice(0, r.length - 1));\n  const X_t = X;\n  const y = data.map(r => r[r.length - 1]);\n  //console.log(data, X, data.map(r => r[r.length - 1]));\n  const splitIdx = Math.round((1 - testSize) * data.length);\n  const xTest = X_t.slice(splitIdx, data.length);\n  const xTrain = X_t.slice(0, splitIdx);\n  const yTest = y.slice(splitIdx, data.length);\n  const yTrain = y.slice(0, splitIdx);\n  return [xTrain, xTest, yTrain, yTest]\n}\n\nexport const trainLinearModel = async ( xTrain: number[][],\n                                        yTrain: number[],\n                                        xTest: number[][],\n                                        yTest: number[]): Promise<{ model: MLR, mse: number }> => {\n  const model = new MLR(xTrain, yTrain.map(x => [x]));\n\n  let errors: number[] = [];\n  xTest.forEach((x, i) => {\n    errors.push(Math.pow(model.predict(x)[0] - yTest[i], 2));\n  })\n\n  // compute Mean Square Error\n  const mse = Math.round(compute.mean(errors) * 1000) / 1000;\n  return Promise.resolve({ model, mse });\n}\n\n\nexport const createCollectionKey = (registry: RelationshipRegistry[]) => {\n  const key = registry.map(r => {\n    if (r.entry_id > 0) {\n      return `${r.tile_id}-${r.entry_id}`;\n    }\n\n    return r.tile_id;\n  }).sort();\n\n  return key.join('#');\n}","import React, { Component } from 'react';\nimport { Button, Col, Divider, Row, Spin } from \"antd\";\nimport { IProps } from \"./types\";\nimport { createCollectionKey, getRegistryCombinations, splitData, trainLinearModel } from \"./helpers\";\nimport { PredictiveModel } from \"../../../../../../../../models/app/PredictiveModel\";\n\nexport default class TrainModels extends Component<IProps> {\n\n    state = {\n        isTraining: false\n    }\n\n    _getValueFromData = (key: string, row: any) => {\n        const column = row[key];\n        if (!column)\n            return NaN;\n\n        if (typeof column == 'number')\n            return column;\n\n        return parseFloat(column.replace(/,/, '.'));\n    }\n\n    trainModels = () => {\n        this.setState({ isTraining: true }, async () => {\n            setTimeout(async () => {\n                const { registry, data } = this.props;\n                let combinations = getRegistryCombinations(registry);\n                console.log(\"COMBINATIONS\", combinations);\n                console.log(\"registry\", registry);\n                let models: PredictiveModel[] = [];\n\n                for (const combination of combinations) {\n                    // last column is the y output....\n                    const trainData = data.map(row =>\n                        [...combination.map(c => this._getValueFromData(c.source_key, row)),\n                        this._getValueFromData('final_grade', row)\n                        ]\n                    ).filter(row => row.every(x => !Number.isNaN(x)));\n\n                    const [xTrain, xTest, yTrain, yTest] = splitData(trainData);\n\n                    await trainLinearModel(xTrain, yTrain, xTest, yTest).then(({ model, mse }) => {\n\n                        const predModel: PredictiveModel = {\n                            id: -1,\n                            course_id: -1,\n                            entry_collection: createCollectionKey(combination),\n                            mse,\n                            theta: [\n                                ...combination.map((c, i) => ({\n                                    tile_id: c.tile_id,\n                                    entry_id: c.entry_id,\n                                    intercept: false,\n                                    meta_key: c.meta_key,\n                                    value: model.weights[i][0]\n                                })),\n                                {\n                                    tile_id: null,\n                                    entry_id: null,\n                                    intercept: true,\n                                    meta_key: \"grade\",\n                                    value: model.weights[model.weights.length - 1][0]\n                                }\n                            ]\n                        }\n                        models.push(predModel);\n                    });\n                }\n\n                this.props.setModels(models);\n            }, 200);\n        });\n    }\n\n    render(): React.ReactNode {\n        const { isTraining } = this.state;\n        return (\n            <div id={\"trainModels\"}>\n                <h2>Step 3. Training the models</h2>\n\n                <Divider />\n\n                <Row gutter={[10, 10]}>\n                    <Col xs={24}>\n                        {isTraining &&\n                            <div style={{ textAlign: 'center', padding: '20px 0' }}>\n                                <Spin />\n                                <h3>Training models...</h3>\n                            </div>\n                        }\n\n                        {!isTraining &&\n                            <div style={{ textAlign: 'center', padding: '20px 0' }}>\n                                <div style={{\n                                    background: 'url(/assets/img/illustrations/train_models.svg)',\n                                    marginBottom: 30,\n                                    height: 200,\n                                    width: '100%',\n                                    backgroundSize: 'contain',\n                                    backgroundPosition: 'center',\n                                    backgroundRepeat: 'no-repeat'\n                                }} />\n                                <Button\n                                    type={\"primary\"}\n                                    size={\"large\"}\n                                    onClick={() => this.trainModels()}>\n                                    Start Training\n                                </Button>\n                            </div>\n                        }\n                    </Col>\n                </Row>\n            </div>\n        )\n    }\n}\n","import React, { Component } from \"react\";\nimport { Button, Result } from \"antd\";\nimport { PredictiveModel } from \"../../../../../../../../models/app/PredictiveModel\";\n\ntype IProps = {\n    models: PredictiveModel[];\n    closePanel: () => any;\n}\n\nexport default class UploadOverview extends Component<IProps> {\n    render(): React.ReactNode {\n        const { models, closePanel } = this.props;\n\n        return (\n            <div id={\"uploadOverview\"}>\n                <Result\n                    status=\"success\"\n                    title=\"Predictive models configured!\"\n                    subTitle={`In total ${models.length} models were trained, the equivalent of every possible submission combination with a minimum size of three. You can view a summary by closing this panel.`}\n                    extra={\n                        <Button onClick={closePanel}>\n                            Close\n                        </Button>\n                    }\n                />\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport DataSourceUpload from \"./steps/DataSourceUpload\";\nimport { Alert, Button, message, Steps } from \"antd\";\nimport { steps } from \"./helpers\";\nimport Relationships from \"./steps/Relationships\";\nimport TrainModels from \"./steps/TrainModels\";\nimport UploadOverview from \"./steps/UploadOverview\";\nimport { PredictiveModel } from \"../../../../../../models/app/PredictiveModel\";\nimport \"./style.scss\";\nimport DataMartController from \"../../../../../../api/controllers/datamart\";\nimport Loading from \"../../../../../../components/utils/Loading\";\n\nexport default class ConfigureModel extends Component<{ setModels: (models: PredictiveModel[]) => any }> {\n\n    state = {\n        currentStep: 0,\n        data: [],\n        registry: [],\n        models: [],\n        loaded: false\n    };\n\n    componentDidMount(): void {\n        DataMartController.getModels().then(models => {\n            this.setState({ models, loaded: true });\n        });\n    }\n\n    setData = (data: any[]) => {\n        this.setState({ data, currentStep: 1 });\n    }\n\n    setModels = (models: PredictiveModel[]) => {\n        let modelsCopy = JSON.parse(JSON.stringify(models));\n        DataMartController.deleteModels().then(async () => {\n            while (modelsCopy.length > 0) {\n                message.loading({\n                    content: `Upload progression: ${Math.round(((models.length - modelsCopy.length) / models.length) * 100)}%`,\n                    key: 'uploadProgress'\n                });\n                // const batch = modelsCopy.splice(0, 50);\n                /* await DataMartController.uploadModels(batch); */\n            }\n\n            const newModels = await DataMartController.getModels();\n            message.success({ content: 'Upload complete!', key: 'uploadProgress', duration: 2 });\n            this.setState({ currentStep: 3, models: newModels });\n        });\n    }\n\n    renderStep = () => {\n        const { currentStep, data, registry, models } = this.state;\n        switch (currentStep) {\n            default:\n            case 0:\n                return <DataSourceUpload\n                    setData={this.setData} />;\n            case 1:\n                return <Relationships\n                    setRegistry={registry => {\n                        // TODO: remove\n                        //localStorage.setItem(\"data\", JSON.stringify(data));\n                        //localStorage.setItem(\"registry\", JSON.stringify(registry));\n                        this.setState({ registry })\n                    }}\n                    registry={registry}\n                    data={data}\n                    nextStep={this.nextStep} />;\n            case 2:\n                return <TrainModels\n                    data={data}\n                    registry={registry}\n                    setModels={this.setModels} />;\n            case 3:\n                return <UploadOverview\n                    models={models}\n                    closePanel={() => this.props.setModels(models)} />;\n        }\n    }\n\n    nextStep = () => {\n        const { currentStep } = this.state;\n        this.setState({ currentStep: Math.min(steps.length - 1, currentStep + 1) });\n    }\n\n    previousStep = () => {\n        const { currentStep } = this.state;\n        if (currentStep <= 0)\n            return;\n        this.setState({ currentStep: Math.max(0, currentStep - 1) });\n    }\n\n    render(): React.ReactNode {\n        const { currentStep, loaded } = this.state;\n\n        if (!loaded) return <Loading small={true} />\n\n        return (\n            <div id={\"configureModel\"}>\n                <Alert\n                    message=\"Notice\"\n                    description=\"Do not close this view whilst configuring or training models!\"\n                    type=\"warning\"\n                    showIcon closable\n                    style={{ marginBottom: 10 }}\n                />\n\n                <Steps current={currentStep}>\n                    {steps.map(s => <Steps.Step key={s.title} title={s.title} />)}\n                </Steps>\n                <div className=\"stepsContent\">\n                    {this.renderStep()}\n                </div>\n                <div className=\"stepsAction\">\n                    {currentStep < steps.length - 1 && (\n                        <Button\n                            type=\"primary\"\n                            onClick={this.nextStep}>\n                            Next\n                        </Button>\n                    )}\n                    {currentStep === steps.length - 1 && (\n                        <Button\n                            type=\"primary\"\n                            onClick={() => message.success('Processing complete!')}>\n                            Done\n                        </Button>\n                    )}\n                    {currentStep > 0 && (\n                        <Button\n                            style={{ margin: '0 8px' }}\n                            onClick={this.previousStep}>\n                            Previous\n                        </Button>\n                    )}\n                </div>\n            </div>\n        )\n    }\n}\n","import React, {Component} from 'react';\nimport { Group } from '@vx/group';\nimport { BoxPlot } from '@vx/stats';\nimport { LinearGradient } from '@vx/gradient';\nimport { scaleBand, scaleLinear } from '@vx/scale';\nimport { withTooltip, Tooltip, defaultStyles as defaultTooltipStyles } from '@vx/tooltip';\nimport { PatternLines } from '@vx/pattern';\nimport {PredictiveModel} from \"../../../../../../models/app/PredictiveModel\";\n\nconst compute = require( 'compute.io' );\n\n// accessors\nconst quantile = (arr: number[], q: number) => {\n  const sorted = arr.sort();\n  const pos = (sorted.length - 1) * q;\n  const base = Math.floor(pos);\n  const rest = pos - base;\n  if (sorted[base + 1] !== undefined) {\n    return sorted[base] + rest * (sorted[base + 1] - sorted[base]);\n  } else {\n    return sorted[base];\n  }\n};\n\nconst _round = (num: number) => num; //Math.round((num * 1000)) / 1000;\nconst thetas = (model: PredictiveModel) => model.entry_collection.split('#').length + 1;\nconst min = (models: PredictiveModel[]) => _round(Math.min(...models.map(m => m.mse)));\nconst max = (models: PredictiveModel[]) => _round(Math.max(...models.map(m => m.mse)));\nconst median = (models: PredictiveModel[]) => compute.median(models.map(m => _round(m.mse)));\nconst firstQuartile = (models: PredictiveModel[]) => quantile(models.map(m => _round(m.mse)), .25);\nconst thirdQuartile = (models: PredictiveModel[]) => quantile(models.map(m => _round(m.mse)), .75);\n\ninterface TooltipData {\n  name?: string;\n  min?: number;\n  median?: number;\n  max?: number;\n  firstQuartile?: number;\n  thirdQuartile?: number;\n}\n\nclass ModelResults extends Component<any, TooltipData> {\n\n  render(): React.ReactNode {\n    const {\n      models,\n      width,\n      height,\n      tooltipOpen,\n      tooltipLeft,\n      tooltipTop,\n      tooltipData,\n      showTooltip,\n      hideTooltip,\n    } = this.props;\n\n    // bounds\n    const xMax = width;\n    const yMax = height - 120;\n\n    // scales\n    const xScale = scaleBand<string>({\n      range: [0, xMax],\n      round: true,\n      domain: models.map(thetas),\n      padding: 0.4,\n    });\n\n    const allValues = models.map((m: PredictiveModel) => Math.round((m.mse * 1000)) / 1000)\n\n    const minYValue = Math.min(...allValues);\n    const maxYValue = Math.max(...allValues);\n\n    const yScale = scaleLinear<number>({\n      range: [yMax, 0],\n      round: true,\n      domain: [minYValue, maxYValue],\n    });\n\n    const boxWidth = xScale.bandwidth();\n    const constrainedWidth = Math.min(40, boxWidth);\n\n    const groupBy = (items: PredictiveModel[]) => items.reduce(\n      (result: any, item) => ({\n        ...result,\n        [thetas(item)]: [\n          ...(result[thetas(item)] || []),\n          item,\n        ],\n      }),\n      {},\n    );\n\n    const groupedModels: PredictiveModel[][] = Object.values(groupBy(models));\n\n    return width < 10 ? null : (\n      <div style={{ position: 'relative' }}>\n        <h4>Mean Square Error</h4>\n        <svg width={width} height={height}>\n          <LinearGradient id=\"statsplot\" to=\"#8b6ce7\" from=\"#87f2d4\" />\n          <rect x={0} y={0} width={width} height={height} fill=\"url(#statsplot)\" rx={14} />\n          <PatternLines\n            id=\"hViolinLines\"\n            height={3}\n            width={3}\n            stroke=\"#ced4da\"\n            strokeWidth={1}\n            //fill=\"rgba(0,0,0,0.3)\"\n            orientation={['horizontal']}\n          />\n          <Group top={40}>\n            {groupedModels.map((d: PredictiveModel[], i: number) => (\n              <g key={i}>\n                <BoxPlot\n                  min={Math.max(min(d), 0.001)}\n                  max={max(d)}\n                  left={xScale(thetas(d[0]).toString())! + 0.3 * constrainedWidth}\n                  firstQuartile={Math.max(firstQuartile(d), 0.001)}\n                  thirdQuartile={thirdQuartile(d)}\n                  median={median(d)}\n                  boxWidth={constrainedWidth * 0.4}\n                  fill=\"#FFFFFF\"\n                  fillOpacity={0.3}\n                  stroke=\"#FFFFFF\"\n                  strokeWidth={2}\n                  valueScale={yScale}\n                  //outliers={outliers(d)}\n                  boxProps={{\n                    onMouseOver: () => {\n                      showTooltip({\n                        tooltipTop: yScale(median(d))! + 40,\n                        tooltipLeft: xScale(thetas(d[0]).toString())! + constrainedWidth + 5,\n                        tooltipData: {\n                          max: max(d),\n                          median: median(d),\n                          min: min(d),\n                          firstQuartile: firstQuartile(d),\n                          thirdQuartile: thirdQuartile(d),\n                          models: d.length.toString(),\n                          name: `${thetas(d[0])} gradable components`,\n                        },\n                      });\n                    },\n                    onMouseLeave: () => {\n                      hideTooltip();\n                    },\n                  }}\n                />\n              </g>\n            ))}\n          </Group>\n        </svg>\n\n        {tooltipOpen && tooltipData && (\n          <Tooltip\n            top={tooltipTop}\n            left={tooltipLeft}\n            style={{ ...defaultTooltipStyles, backgroundColor: '#283238', color: 'white' }}\n          >\n            <div>\n              <strong>{tooltipData.name}</strong>\n            </div>\n            <div style={{ marginTop: '5px', fontSize: '12px' }}>\n              {<div>max: {_round(tooltipData.max)}</div>}\n              {<div>third quartile: {_round(tooltipData.thirdQuartile)}</div>}\n              {<div>median: {_round(tooltipData.median)}</div>}\n              {<div>first quartile: {_round(tooltipData.firstQuartile)}</div>}\n              {<div>min: {_round(tooltipData.min).toString()}</div>}\n              {<div>models: {_round(tooltipData.models)}</div>}\n            </div>\n          </Tooltip>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default withTooltip(ModelResults);","import React, { Component } from \"react\";\nimport Admin from \"../../../index\";\nimport { Divider } from \"antd\";\nimport { IProps, IState } from \"./types\";\nimport ConfigureModel from \"./ConfigureModel\";\nimport Loading from \"../../../../../components/utils/Loading\";\nimport ModelResults from \"./ModelResults\";\nimport { ParentSize } from '@visx/responsive';\nimport DataMartController from \"../../../../../api/controllers/datamart\";\n\nexport default class GradePredictorOld extends Component<IProps, IState> {\n\n    state = {\n        loaded: false,\n        models: [],\n        isConfiguringModel: false\n    }\n\n    componentDidMount(): void {\n        DataMartController.getModels().then(models => {\n            this.setState({ models, loaded: true });\n        });\n    }\n\n    render(): React.ReactNode {\n        const { models, loaded, isConfiguringModel } = this.state;\n\n        if (!loaded)\n            return <Loading small={false} />;\n\n        return <Admin menuKey={\"gradePredictorOld\"}>\n            <h1>Grade Predictor</h1>\n            <span onClick={() => this.setState({ isConfiguringModel: true })}>\n                Configure a predictive model\n            </span>\n\n            <Divider />\n\n            {(!isConfiguringModel && models.length > 0) &&\n                <ParentSize>\n                    {parent =>\n                        <ModelResults\n                            models={models}\n                            width={parent.width}\n                            height={500} />}\n                </ParentSize>\n            }\n            {(isConfiguringModel || models.length === 0) &&\n                <ConfigureModel setModels={(models) => this.setState({ models, isConfiguringModel: false })} />\n            }\n        </Admin>\n    }\n}\n","import React, { Component } from \"react\";\nimport Select from \"react-select\";\nimport {Button, Tooltip} from \"antd\";\nimport {SyncOutlined} from \"@ant-design/icons\";\nimport { Link } from \"react-router-dom\";\nimport {IProps, IState} from \"./types\";\nimport StudentController from \"../../api/controllers/student\";\nimport {CanvasStudent} from \"../../models/canvas/Student\";\nimport {debug} from \"../../config/config\";\nimport {RootState} from \"../../store\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport \"./style.scss\";\n\nconst mapState = (state: RootState) => ({\n  course: state.course,\n  user: state.user\n});\n\nconst connector = connect(mapState);\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\ntype Props = IProps & PropsFromRedux;\n\nclass AdminHeader extends Component<Props, IState> {\n\n  state = {\n    loaded: false,\n    students: []\n  }\n\n  componentDidMount(): void {\n    const { studentPickView } = this.props;\n\n    if (studentPickView) {\n      StudentController.getStudents().then(students => this.setState({ students, loaded: true }));\n    }\n\n    this.setState({ loaded: true });\n  }\n\n  renderInner(): React.ReactNode {\n    if (this.props.studentPickView) {\n      const { students, loaded } = this.state;\n      return (\n        <Select id={\"studentPicker\"}\n                isLoading={!loaded}\n                options={students.sort(\n                  (a: CanvasStudent, b: CanvasStudent) => a.name.localeCompare(b.name)\n                ).map((s: CanvasStudent) => ({ label: s.name, value: s.login_id}))}\n                placeholder={\"Choose a student\"}\n                onChange={(e) => this.props.setStudent!(\n                  e ? students.find((s: CanvasStudent) => s.login_id === e!.value)! : null\n                )}\n                isClearable={true}\n                styles={{\n                  control: (provided, state) => ({\n                    ...provided,\n                    backgroundColor: 'transparent',\n                    color: 'white',\n                    border: '1px solid white'\n                  }),\n                  singleValue: (provided, state) => {\n                    return {...provided, color: 'white'};\n                  }\n                }}\n        />\n      );\n    }\n\n    return (\n      <div id={\"inner\"}>\n        <h2>{ this.props.course ? this.props.course.course_name : \"Loading course...\" }</h2>\n      </div>\n    );\n  }\n\n  render(): React.ReactNode {\n    return (\n      <React.Fragment>\n        <div id={\"adminHeader\"}>\n          { this.props.studentPickView ?\n            <Link to={'/admin'} style={{ float: 'right' }}>\n              <h3>Admin Panel</h3>\n            </Link> :\n            <div style={{float: 'right', padding: 20}}>\n              <Tooltip title={\"Reload data\"}>\n                <Button id={\"reload\"}\n                        shape=\"circle\"\n                        style={{backgroundColor: 'rgba(255, 255, 255, 0.5)', color: 'white'}}\n                        icon={<SyncOutlined />} />\n              </Tooltip>\n            </div>\n          }\n\n          <div id={\"navbarContent\"}>\n            <div id={\"brand\"}>\n              <Link to={'/'}>\n                <h1>IGuideME</h1>\n              </Link>\n            </div>\n\n            { this.renderInner() }\n          </div>\n        </div>\n        { debug() &&\n          (<div id={\"debugNotice\"}>\n            Application is running in <strong>demo</strong> mode. Changes will not be saved!\n          </div>)\n        }\n      </React.Fragment>\n    );\n  }\n}\n\nexport default connector(AdminHeader);"],"names":["StudentController","debug","delay","MOCK_STUDENTS","this","client","get","then","response","data","MOCK_CONSENTS","MOCK_GOALS","Controller","connector","connect","state","user","AdminMenu","props","id","name","UserOutlined","selectedKeys","menuKey","icon","DatabaseOutlined","to","AppstoreOutlined","LaptopOutlined","TeamOutlined","TrophyOutlined","title","FundProjectionScreenOutlined","DotChartOutlined","CloudUploadOutlined","ClusterOutlined","NotificationOutlined","ControlOutlined","Component","Admin","isAdmin","AdminHeader","xs","className","children","withAdminRole","DemoAnimation","offset","setTimeout","setState","width","height","x","y","fill","DataSourceUpload","md","message","style","inputId","inputStyle","display","onFileLoaded","records","every","row","rowKeys","Object","keys","map","s","toLowerCase","k","includes","validateExternalUploadSchema","setData","onError","parserOptions","header","dynamicTyping","skipEmptyLines","transformHeader","replace","steps","content","getOptions","tiles","entries","filter","t","tile","label","value","e","tile_id","getTileOptions","tileEntries","RelationMapper","loading","metaKeys","loadMetaKeys","registry","entry_id","TileController","getValue","isValidKey","key","length","test","nextProps","nextContext","_key","gutter","options","disabled","onChange","val","_","setEntry","size","placeholder","status","text","find","type","defaultValue","meta_key","undefined","setMetaKey","source_key","Relationships","getKeysFromSource","Set","delete","Array","from","JSON","parse","stringify","idx","findIndex","r","setRegistry","sort","padding","onClick","nextStep","compute","require","getRegistryCombinations","results","n","a","i","push","splitData","testSize","X","slice","X_t","splitIdx","Math","round","xTest","xTrain","yTest","yTrain","trainLinearModel","model","MLR","errors","forEach","pow","predict","mse","mean","Promise","resolve","createCollectionKey","join","TrainModels","isTraining","_getValueFromData","column","parseFloat","NaN","trainModels","combinations","console","log","models","combination","trainData","c","Number","isNaN","predModel","course_id","entry_collection","theta","intercept","weights","setModels","textAlign","background","marginBottom","backgroundSize","backgroundPosition","backgroundRepeat","UploadOverview","closePanel","subTitle","extra","ConfigureModel","currentStep","loaded","modelsCopy","DataMartController","newModels","duration","renderStep","min","previousStep","max","description","showIcon","closable","current","Step","margin","Loading","small","quantile","arr","q","sorted","pos","base","floor","rest","thetas","split","m","median","firstQuartile","thirdQuartile","ModelResults","tooltipOpen","tooltipLeft","tooltipTop","tooltipData","showTooltip","hideTooltip","xMax","yMax","xScale","scaleBand","range","domain","allValues","minYValue","maxYValue","yScale","scaleLinear","boxWidth","bandwidth","constrainedWidth","groupedModels","values","reduce","result","item","position","LinearGradient","rx","stroke","strokeWidth","orientation","Group","top","d","BoxPlot","left","toString","fillOpacity","valueScale","boxProps","onMouseOver","onMouseLeave","Tooltip","defaultTooltipStyles","backgroundColor","color","marginTop","fontSize","withTooltip","GradePredictorOld","isConfiguringModel","ParentSize","parent","course","students","studentPickView","isLoading","b","localeCompare","login_id","setStudent","isClearable","styles","control","provided","border","singleValue","course_name","float","shape","SyncOutlined","renderInner"],"sourceRoot":""}