{"version":3,"file":"static/js/787.d80e286a.chunk.js","mappings":"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","sources":["common/Admin/AdminMenu/index.tsx","common/Admin/index.tsx","containers/ManageTileGroups/index.tsx","components/DraggableTile/ActionButtons/index.tsx","components/DraggableTile/ContentType/index.tsx","components/DraggableTile/TileType/index.tsx","components/DraggableTile/index.tsx","components/managers/TileCreateEntries/ExternalDataManager/index.tsx","components/managers/TileCreateEntries/CreationPreview/index.tsx","components/managers/TileCreateEntries/AssignmentManager/helpers.tsx","components/managers/TileCreateEntries/AssignmentManager/QuizzesTutorial/index.tsx","components/managers/TileCreateEntries/AssignmentManager/index.tsx","components/managers/TileCreateEntries/DiscussionManager/helpers.tsx","components/managers/TileCreateEntries/DiscussionManager/index.tsx","components/managers/TileCreateEntries/LearningGoalsManager/GoalEntry/GoalRequirement/index.tsx","components/managers/TileCreateEntries/LearningGoalsManager/GoalEntry/index.tsx","components/managers/TileCreateEntries/LearningGoalsManager/index.tsx","components/managers/TileCreateEntries/index.tsx","common/Admin/sections/Tiles/TileWrapper/EditTileDragger/VisibilityButton/index.tsx","common/Admin/sections/Tiles/TileWrapper/EditTileDragger/index.tsx","common/Admin/sections/Tiles/TileWrapper/helpers.ts","common/Admin/sections/Tiles/TileWrapper/index.tsx","common/Admin/sections/Tiles/index.tsx"],"sourcesContent":["import React, { Component } from \"react\";\nimport {\n    AppstoreOutlined,\n    ControlOutlined,\n    CloudUploadOutlined,\n    ClusterOutlined,\n    DotChartOutlined,\n    FundProjectionScreenOutlined,\n    LaptopOutlined,\n    TrophyOutlined,\n    NotificationOutlined,\n    DatabaseOutlined,\n    UserOutlined,\n    TeamOutlined\n} from \"@ant-design/icons\";\nimport { Menu } from \"antd\";\nimport { Link } from \"react-router-dom\";\nimport \"./style.scss\";\nimport { RootState } from \"../../../store\";\nimport { connect, ConnectedProps } from \"react-redux\";\n\nconst mapState = (state: RootState) => ({\n    user: state.user\n});\n\nconst connector = connect(mapState)\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\ntype Props = { menuKey: string } & PropsFromRedux;\n\nclass AdminMenu extends Component<Props> {\n\n    render(): React.ReactNode {\n        const { user } = this.props;\n\n        return (\n            <div id={\"adminMenu\"}>\n                <div id={\"user\"}>\n                    <h3>{user ? user.name : \"Loading profile...\"}</h3>\n                    <strong><UserOutlined /> Instructor</strong>\n                </div>\n\n                <Menu selectedKeys={[this.props.menuKey]}>\n                    <Menu.Item key={\"datamart\"} icon={<DatabaseOutlined />}>\n                        <Link to={'/admin'}>\n                            Datamart\n            </Link>\n                    </Menu.Item>\n\n                    <Menu.Item key={\"tiles\"} icon={<AppstoreOutlined />}>\n                        <Link to={'/admin/tiles'}>\n                            Tiles\n            </Link>\n                    </Menu.Item>\n\n                    <Menu.Item key={\"dashboard\"} icon={<LaptopOutlined />}>\n                        <Link to={'/admin/dashboard'}>\n                            Dashboard\n            </Link>\n                    </Menu.Item>\n\n                    <Menu.Item key={\"studentOverview\"} icon={<TeamOutlined />}>\n                        <Link to={'/admin/student-overview'}>\n                            Student Overview\n            </Link>\n                    </Menu.Item>\n                    <Menu.SubMenu key={\"submenu\"} icon={<TrophyOutlined />} title={\"Grades\"}>\n                        {/* TODO: completely remove oldpredictor from code */}\n                        {/* <Menu.Item key={\"gradePredictorOld\"} icon={<FundProjectionScreenOutlined />}>\n                            <Link to={'/admin/grade-predictor-old'}>\n                                Old Predictor\n              </Link>\n                        </Menu.Item> */}\n                        <Menu.Item key={\"gradePredictor\"} icon={<FundProjectionScreenOutlined />}>\n                            <Link to={'/admin/grade-predictor'}>\n                                Predictor\n              </Link>\n                        </Menu.Item>\n                        <Menu.Item key={\"gradeAnalyzer\"} icon={<DotChartOutlined />}>\n                            <Link to={'/admin/grade-analyzer'}>\n                                Analyzer\n              </Link>\n                        </Menu.Item>\n                    </Menu.SubMenu>\n                    <Menu.Item key={\"dataWizard\"} icon={<CloudUploadOutlined />}>\n                        <Link to={'/admin/data-wizard'}>\n                            Data Wizard\n            </Link>\n                    </Menu.Item>\n                    <Menu.Item key={\"analytics\"} icon={<ClusterOutlined />}>\n                        <Link to={'/admin/analytics'}>\n                            Analytics\n            </Link>\n                    </Menu.Item>\n                    <Menu.Item key={\"notificationCentre\"} icon={<NotificationOutlined />}>\n                        <Link to={'/admin/notification-centre'}>\n                            Notification Centre\n            </Link>\n                    </Menu.Item>\n                    <Menu.Item key={\"settings\"} icon={<ControlOutlined />}>\n                        <Link to={'/admin/settings'}>\n                            Settings\n            </Link>\n                    </Menu.Item>\n                </Menu>\n            </div>\n        )\n    }\n}\n\nexport default connector(AdminMenu);\n","import React, { Component } from \"react\";\nimport { withAdminRole } from \"../../hoc/withAdminRole\";\nimport AdminHeader from \"../../containers/AdminHeader\";\nimport { Redirect } from \"react-router-dom\";\nimport { Col, Row } from \"antd\";\nimport AdminMenu from \"./AdminMenu\";\nimport \"./style.scss\";\n\nclass Admin extends Component<any> {\n\n  render(): React.ReactNode {\n    const { isAdmin, menuKey } = this.props;\n    if (!isAdmin) return (<Redirect to={'/'} />);\n\n    return (\n      <div id={\"admin\"}>\n        <AdminHeader />\n        <Row>\n          <Col xs={4}>\n            <AdminMenu menuKey={menuKey} />\n          </Col>\n          <Col xs={20} id={'wrapper'} className={`${ menuKey !== \"settings\" && \"noOverflow\"}`}>\n            { this.props.children }\n          </Col>\n        </Row>\n      </div>\n    )\n  }\n}\n\nexport default withAdminRole(Admin);","import React, { Component } from \"react\";\nimport {Button, Drawer, Input, Space} from \"antd\";\nimport { PlusOutlined } from \"@ant-design/icons\";\nimport { IState } from \"./types\";\nimport {RootState} from \"../../store\";\nimport {TileActions} from \"../../store/actions/tiles\";\nimport \"./style.scss\";\nimport TileController from \"../../api/controllers/tile\";\nimport {connect, ConnectedProps} from \"react-redux\";\n\nconst mapState = (state: RootState) => ({\n  tileGroups: state.tileGroups,\n});\n\nconst mapDispatch = {\n  loadGroups: () => TileActions.loadGroups()\n}\n\nconst connector = connect(mapState, mapDispatch)\ntype PropsFromRedux = ConnectedProps<typeof connector>\n\nclass ManageTileGroups extends Component<PropsFromRedux, IState> {\n\n  state = {\n    text: \"\",\n    drawerOpen: false\n  }\n\n  render(): React.ReactNode {\n    return (\n      <div id={\"manageGroup\"}>\n        <Space direction={\"horizontal\"}>\n          <Button icon={<PlusOutlined />}\n                  className={\"successButton\"}\n                  onClick={() => this.setState({ drawerOpen: true })}\n          >\n            Group\n          </Button>\n        </Space>\n        <Drawer\n          width={400}\n          title={\"Create tile group\"}\n          placement={\"right\"}\n          closable={true}\n          onClose={() => this.setState({ drawerOpen: false })}\n          open={this.state.drawerOpen}\n          getContainer={false}\n          style={{ position: 'absolute' }}\n        >\n          <p>Provide a title for the group.</p>\n\n          <Space style={{width: \"100%\"}} direction={\"vertical\"}>\n            <Input placeholder={\"Title\"}\n                   value={this.state.text}\n                   onChange={e => this.setState({ text: e.target.value || \"\" })}\n            />\n\n            <Space direction={\"horizontal\"}>\n              <Button type={\"ghost\"}\n                      onClick={() => this.setState({ drawerOpen: false })}>\n                Cancel\n              </Button>\n              <Button className={\"successButton\"}\n                      onClick={() => {\n                        TileController.createTileGroup(\n                          this.state.text,\n                          this.props.tileGroups.length).then(() => {\n                            this.props.loadGroups().then(() => {\n                              this.setState({ drawerOpen: false, text: \"\" });\n                            });\n                        });\n                      }}>\n                Create\n              </Button>\n            </Space>\n          </Space>\n        </Drawer>\n      </div>\n    )\n  }\n}\n\nexport default connector(ManageTileGroups);","import React, { Component } from \"react\";\nimport {Dropdown, Menu, Spin} from \"antd\";\nimport { DeleteOutlined, EditOutlined } from \"@ant-design/icons\";\nimport { IProps, IState } from \"./types\";\nimport {RootState} from \"../../../store\";\nimport {ThunkDispatch} from \"redux-thunk\";\nimport {Tile} from \"../../../models/app/Tile\";\nimport {TileActions} from \"../../../store/actions/tiles\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport TileController from \"../../../api/controllers/tile\";\nimport Swal from \"sweetalert2\";\n\nconst mapState = (state: RootState) => ({\n  tiles: state.tiles,\n});\n\nconst mapDispatch = (dispatch: ThunkDispatch<any, any, any>): any => {\n  return {\n    updateTile: async (tile: Tile) => dispatch(await TileActions.updateTile(tile))\n  };\n};\n\nconst connector = connect(mapState, mapDispatch)\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\ntype Props = IProps & PropsFromRedux;\n\nclass ActionButtons extends Component<Props, IState> {\n\n  state = {\n    loading: false,\n    tile: null\n  }\n\n  componentDidMount(): void {\n    this.setState({ tile: this.props.tile });\n  }\n\n  render(): React.ReactNode {\n    const menu = (\n      <Menu onClick={() => {}}>\n        <Menu.Item key=\"1\" icon={<EditOutlined />} onClick={this.props.editTile}>\n          Edit\n        </Menu.Item>\n        <Menu.Item key=\"2\" icon={<DeleteOutlined />} onClick={() => {\n            Swal.fire({\n              title: 'Do you really want to delete this tile?',\n              showCancelButton: true,\n              confirmButtonText: 'Delete',\n              confirmButtonColor: 'rgb(255, 110, 90)',\n              showLoaderOnConfirm: true,\n              allowOutsideClick: () => !Swal.isLoading()\n            }).then((result) => {\n              if (result.isConfirmed) {\n                this.props.deleteTile(tile!.id).then(() => [\n                  Swal.fire('Task completed!', '', 'success')\n                ]);\n              }\n            })\n          }\n        } danger>\n          Delete\n        </Menu.Item>\n      </Menu>\n    );\n\n    let { tile, loading }: IState = this.state;\n\n    if (!tile) return null;\n    tile = tile as Tile;\n\n\n    return (\n      <div style={{float: 'right'}}>\n        <Dropdown.Button overlay={menu}\n                         className={loading ? \"\" : (tile!.visible ? \"successButtonGroup\" : \"dangerButtonGroup\")}\n                         onClick={() => {\n                           this.setState({ loading: true }, () => {\n                             let t = tile!;\n                             t.visible = !t.visible;\n                             TileController.updateTile(t).then(async newTile => {\n                               await (this.props as any).updateTile(newTile);\n                               this.setState({ tile: t, loading: false });\n                             });\n                           });\n                         }}\n        >\n          { loading ?\n            <Spin size={'small'} /> :\n            (tile!.visible ? \"Visible\" : \"Hidden\")\n          }\n        </Dropdown.Button>\n      </div>\n    );\n  }\n}\n\nexport default connector(ActionButtons);","import React, { Component } from \"react\";\nimport {TileContentTypes} from \"../../../models/app/Tile\";\nimport { FieldBinaryOutlined, AppstoreOutlined, StockOutlined, TrophyOutlined } from \"@ant-design/icons\";\nimport {Space} from \"antd\";\n\nexport default class ContentType extends Component<{ content: TileContentTypes}> {\n\n  getName = () => {\n    switch (this.props.content) {\n      case \"BINARY\":\n        return \"Binary\";\n      case \"ENTRIES\":\n        return \"Entries\";\n      case \"LEARNING_OUTCOMES\":\n        return \"Learning Outcomes\";\n      case \"PREDICTION\":\n        return \"Prediction\";\n    }\n  }\n\n  getIcon = () => {\n    switch(this.props.content) {\n      case \"BINARY\":\n        return <FieldBinaryOutlined />;\n      case \"ENTRIES\":\n        return <AppstoreOutlined />;\n      case \"PREDICTION\":\n        return <StockOutlined />;\n      case \"LEARNING_OUTCOMES\":\n        return <TrophyOutlined />;\n    }\n  }\n\n  render(): React.ReactNode {\n    return (\n      <div id={\"contentType\"}>\n        <Space direction={\"horizontal\"} style={{ width: '100%'}}>\n          { this.getIcon() }\n          <span><b>{ this.getName() }</b></span>\n        </Space>\n      </div>\n    )\n  }\n}","import React, { Component } from \"react\";\nimport {TileTypeTypes} from \"../../../models/app/Tile\";\n\nexport default class TileType extends Component<{ type: TileTypeTypes }> {\n\n  getName = () => {\n    switch (this.props.type) {\n      case \"ASSIGNMENTS\":\n        return \"Assignments\";\n      case \"DISCUSSIONS\":\n        return \"Discussions\";\n      case \"EXTERNAL_DATA\":\n        return \"External Data\";\n      default:\n        return \"N/A\";\n    }\n  }\n\n  render(): React.ReactNode {\n    return (\n      <div id={\"tileType\"}>\n        <span><b>{ this.getName() }</b></span>\n      </div>\n    )\n  }\n}","import React, { Component } from \"react\";\nimport {IProps, IState} from \"./types\";\nimport ActionButtons from \"./ActionButtons\";\nimport {Row, Col, Divider, Tag, Tooltip, Button} from \"antd\";\nimport {BellTwoTone} from \"@ant-design/icons\";\nimport ContentType from \"./ContentType\";\nimport TileType from \"./TileType\";\nimport TileController from \"../../api/controllers/tile\";\nimport {Draggable} from \"react-smooth-dnd\";\nimport \"./style.scss\";\nimport {RootState} from \"../../store\";\nimport {TileActions} from \"../../store/actions/tiles\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport {Tile} from \"../../models/app/Tile\";\nimport {ThunkDispatch} from \"redux-thunk\";\n\nconst mapState = (state: RootState) => ({\n  tiles: state.tiles,\n  tileEntries: state.tileEntries\n});\n\nconst mapDispatch = ( dispatch: ThunkDispatch<any, any, any> ): any => {\n  return {\n    updateTile: async (tile: Tile) => dispatch(await TileActions.updateTile(tile))\n    //signIn: (credentials: LoginCredentials) => dispatch(signIn(credentials))\n  };\n};\n\nconst connector = connect(mapState, mapDispatch)\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\ntype Props = IProps & PropsFromRedux;\n\nclass DraggableTile extends Component<Props, IState> {\n\n  state = {\n    tile: null,\n    entriesLoaded: false,\n    entries: [],\n    updatingNotifications: []\n  }\n\n  componentDidMount(): void {\n    this.setState({tile: this.props.tile});\n    TileController.getTileEntries(this.props.tile.id).then(entries => {\n      this.setState({ entries, entriesLoaded: true });\n    });\n  }\n\n  componentDidUpdate(prevProps: Readonly<IProps>, prevState: Readonly<{}>, snapshot?: any): void {\n    let { tile }: IState = this.state;\n\n    if (tile !== undefined) return;\n\n    tile = tile as Tile;\n\n    if (prevProps.tile.id !== tile!.id) {\n      TileController.getTileEntries(tile!.id).then(entries => {\n        this.setState({ entries, entriesLoaded: true });\n      });\n    }\n  }\n\n  toggleNotifications = async (tile: Tile) => {\n    const { updatingNotifications }: IState = this.state;\n    this.setState({ updatingNotifications: [...updatingNotifications, tile.id]}, () => {\n      tile.notifications = !tile.notifications;\n      TileController.updateTile(tile).then(async t => {\n        (this.props as any).updateTile(t);\n        this.setState({\n          updatingNotifications: updatingNotifications\n            .filter(x => x !== tile.id),\n          tile: t\n        });\n      })\n    });\n  }\n\n  render(): React.ReactNode {\n    let { tile, entriesLoaded, entries, updatingNotifications }: IState = this.state;\n\n    if (!tile) return null;\n    tile = tile as Tile;\n\n    return (\n      <Draggable key={'dragTile' + tile!.id.toString()} className={\"tile\"}>\n        <div>\n          <div className={\"padded\"}>\n            <ActionButtons {...{tile, editTile: this.props.editTile, deleteTile: this.props.deleteTile}} />\n            <h3>{ tile!.title }</h3>\n            <Row gutter={10} style={{ marginTop: 20 }}>\n              <Col xs={12}>\n                <span>Content type</span>\n                <ContentType content={tile!.content} />\n              </Col>\n\n              <Col xs={12} style={{ textAlign: 'right' }}>\n                <span>Tile type</span>\n                <TileType type={tile!.type} />\n              </Col>\n\n              <Col xs={24} style={{ margin: \"20px 0\" }}>\n                <Divider />\n              </Col>\n\n              <Col xs={18}>\n                <div>\n                  { entriesLoaded ?\n                    <span>\n                      <Tag key={'tileTag' + tile!.id.toString()}>\n                        { entries.length }\n                      </Tag>\n                      children\n                    </span> :\n                    <span>Loading entries...</span>\n                  }\n                </div>\n              </Col>\n\n              <Col xs={6}>\n                <Tooltip key={`tooltipTile#${tile!.id}`}\n                         title={<span>Notifications are turned <strong>{ tile!.notifications ? \"on\" : \"off\"}</strong>.</span>}>\n                  <Button type={\"ghost\"}\n                          key={`toggleNotificationsTile#${tile!.id}`}\n                          loading={updatingNotifications.includes(tile!.id)}\n                          style={{ float: 'right' }}\n                          shape=\"circle\"\n                          icon={<BellTwoTone twoToneColor={tile!.notifications ? \"rgb(0, 185, 120)\" : \"rgb(255, 110, 90)\"} />}\n                          onClick={() => this.toggleNotifications(tile as Tile)}\n                  />\n                </Tooltip>\n              </Col>\n            </Row>\n          </div>\n        </div>\n      </Draggable>\n    );\n  }\n}\n\nexport default connector(DraggableTile);","import React, { Component } from 'react';\nimport {Link} from \"react-router-dom\";\nimport \"./style.scss\";\n\nexport default class ExternalDataManager extends Component {\n  render(): React.ReactNode {\n    return (\n      <div id={\"externalDataManager\"}>\n        <h2>Tiles of type external data need no further configuration.</h2>\n        <span>Data can be uploaded via the <Link to={'/admin/data-wizard'}>Data Wizard</Link>!</span>\n        <div id={\"illustration\"} />\n      </div>\n    );\n  }\n}","import React, { Component } from \"react\";\nimport {Col, Row} from \"antd\";\nimport FadeIn from \"react-fade-in\";\nimport {TileContentTypes} from \"../../../../models/app/Tile\";\n\nexport default class CreationPreview extends Component<{ contentType: TileContentTypes }> {\n\n  getTitle = () => {\n    switch (this.props.contentType) {\n      case \"BINARY\":\n        return \"Binary tiles\";\n      case \"ENTRIES\":\n        return \"Entries\";\n      default:\n          return \"\";\n    }\n  }\n\n  getDescription = () => {\n    switch (this.props.contentType) {\n      case \"BINARY\":\n        return \"Binary tiles project data whose unit can take on only two possible states, given by a grade of 0 and 1.\";\n      case \"ENTRIES\":\n        return \"The entries content type is most suitable for tiles containing gradable components\";\n      default:\n        return \"\";\n    }\n  }\n\n  render(): React.ReactNode {\n    const { contentType } = this.props;\n\n    console.log(\"RENDER\", contentType);\n    if (!contentType) {\n      return <span>error?</span>;\n    }\n\n    ////<div id={\"mockRender\"} className={contentType.toLowerCase()} />\n\n    return (\n      <div id={\"preview\"}>\n        <Row gutter={[10, 10]}>\n          <Col xs={24} md={8}>\n            <FadeIn>\n              <div id={\"mockRender\"} className={contentType ? contentType.toLowerCase() : \"\"} />\n            </FadeIn>\n          </Col>\n          <Col xs={24} md={16} id={\"description\"}>\n            <div id={\"descriptionWrapper\"}>\n              <h2>{ this.getTitle() }</h2>\n              <span>{ this.getDescription() }</span>\n            </div>\n          </Col>\n        </Row>\n      </div>\n    )\n  }\n}","import React from \"react\";\nimport {CloseCircleOutlined, CheckCircleOutlined} from \"@ant-design/icons\";\nimport {Button} from \"antd\";\nimport { DeleteOutlined } from \"@ant-design/icons\";\nimport {TileEntry} from \"../../../../models/app/Tile\";\nimport {CanvasAssignment} from \"../../../../models/canvas/Assignment\";\n\nexport const getColumns = (\n  removeAssignment: (entry: TileEntry) => any,\n  canvasAssignments: CanvasAssignment[]) => {\n  return [\n    {\n      title: 'Name',\n      dataIndex: 'title',\n      key: 'title',\n    }, {\n      title: 'On Canvas',\n      dataIndex: 'onCanvas',\n      key: 'onCanvas',\n      render: (text: string, obj: TileEntry) => {\n        const assignment = canvasAssignments.find(c => c.name === obj.title);\n        return assignment !== undefined ?\n          <span className={\"binary success\"}><CheckCircleOutlined /> Yes</span> :\n          <span className={\"binary fail\"}><CloseCircleOutlined /> <b>No</b></span>\n      }\n    }, {\n      title: 'Published',\n      dataIndex: 'published',\n      key: 'published',\n      render: (text: string, obj: TileEntry) => {\n        const assignment = canvasAssignments.find(c => c.name === obj.title);\n        return (assignment && assignment.published) ?\n          <div className={\"binary success\"}><CheckCircleOutlined /> <span>Yes</span></div> :\n          <div className={\"binary fail\"}><CloseCircleOutlined /> <span>No</span></div>\n      }\n    }, {\n      title: 'Action',\n      dataIndex: 'action',\n      key: 'action',\n      render: (_: string, obj: TileEntry) => {\n        return (\n          <Button danger\n                  icon={<DeleteOutlined />}\n                  shape={\"round\"}\n                  type={\"primary\"}\n                  size={\"large\"}\n                  onClick={() => removeAssignment(obj)}\n          />\n        )\n      }\n    }\n  ]\n}","import React, { Component } from \"react\";\nimport {Button, Col, Divider, Modal, Row} from \"antd\";\n\nexport default class QuizzesTutorial extends Component<{ open: boolean, setOpen: (val: boolean) => any }> {\n  render(): React.ReactNode {\n    return (\n      <Modal\n        title={\"Response Canvas quizzes\"}\n        centered\n        closable={true}\n        visible={this.props.open}\n        width={'90%'}\n        onCancel={() => this.props.setOpen(false)}\n        footer={\n          <div>\n            <Button onClick={() => this.props.setOpen(false)}>\n              Close\n            </Button>\n          </div>\n        }\n      >\n        <Row gutter={[10, 10]}>\n          <Col xs={24} md={8}>\n            <h2>Create a quiz</h2>\n            <p>The responsive setup of the quizzes is reliant on a varying points-per-question. This functionality is only available in the \"New Quizzes\" Quiz Engine. Select the \"New Quizzes\" and hit \"Submit\".</p>\n          </Col>\n\n          <Col xs={24} md={16} style={{textAlign: 'center'}}>\n            <img src={'/assets/img/tutorial/quiz-create.jpg'} style={{height: '100%', maxHeight: 400}} alt={''} />\n          </Col>\n\n          <Col xs={24}><Divider /></Col>\n\n          <Col xs={24}>\n            <h2>Quiz details</h2>\n            <p>When you select the Quiz Engine the assignment details must be provided. Be sure to tick the box in front of <i>\"Do not count this assignment towards the final grade\"</i>. When all details are in-place hit the \"Build\" button.</p>\n          </Col>\n\n          <Col xs={24}><Divider /></Col>\n\n          <Col xs={24} md={8}>\n            <h2>Specifying the question type</h2>\n            <p>To add a question to the quiz click the plus-button placed under the instructions field. You will be asked which type of question you want to add. Choose the \"Multiple choice\" question type.</p>\n          </Col>\n\n          <Col xs={24} md={16} style={{textAlign: 'center'}}>\n            <img src={'/assets/img/tutorial/quiz-add-question.jpg'} style={{height: '100%', maxHeight: 300}} alt={''}/>\n          </Col>\n\n          <Col xs={24}><Divider /></Col>\n\n          <Col xs={24} md={8}>\n            <h2>Formulating the question</h2>\n            <p>When you specify the question type you are able to formulate the question. In the right-side figure an example formulation is shown asking the student to specify the time spend on an assignment. Other use-cases may be to poll the reading times on class exercises. Be sure to tick the <i>\"Varying points by answer\"</i> checkbox. Create as many options as you wish and use the assigned points as a measurement of the student's answer. In the example students are rewarded points equivalent to the maximum time of the answer in minutes. Be consistent with the time unit used for the assigned points.</p>\n          </Col>\n\n          <Col xs={24} md={16} style={{textAlign: 'center'}}>\n            <img src={'/assets/img/tutorial/quiz-question.jpg'} style={{height: '100%', maxHeight: 320}} alt={''}/>\n          </Col>\n\n          <Col xs={24}><Divider /></Col>\n\n          <Col xs={24} md={8}>\n            <h2>Quiz Settings</h2>\n            <p>Lastly we wish to hide the obtained points from the students. To do this navigate to the \"Settings\" tab and enable the \"Restrict result view\". Uncheck the box where students are shown their rewarded points.</p>\n          </Col>\n\n          <Col xs={24} md={16} style={{textAlign: 'center'}}>\n            <img src={'/assets/img/tutorial/quiz-settings.jpg'} style={{height: '100%', maxHeight: 320}} alt={''}/>\n          </Col>\n\n          <Col xs={24}><Divider /></Col>\n\n          <Col xs={24}>\n            <h2>We're done!</h2>\n            <p>That's it, students should now be able to take the quiz and IGuideME is able to extract the rewarded points per student.</p>\n          </Col>\n        </Row>\n      </Modal>\n    )\n  }\n}","import React, { Component } from 'react';\nimport {IProps, IState} from \"./types\";\nimport CreatableSelect from 'react-select/creatable';\nimport {Space, Table, Switch, Divider, Alert} from \"antd\";\nimport {QuestionOutlined} from \"@ant-design/icons\";\nimport {getColumns} from \"./helpers\";\nimport QuizzesTutorial from \"./QuizzesTutorial\";\nimport {IManagerProps} from \"../types\";\nimport \"./style.scss\";\nimport {editState, TileEntry} from \"../../../../models/app/Tile\";\n\ntype Props = IManagerProps & IProps;\n\nexport default class AssignmentManager extends Component<Props, IState> {\n\n  state = {\n    tutorialOpen: false,\n  }\n\n  addAssignment = (name: string) => {\n    const { canvasAssignments, tile }: Props = this.props;\n    const assignment = canvasAssignments.find(a => a.name === name);\n\n    const entry: TileEntry = {\n      id: -1,\n      state: editState.new,\n      tile_id: tile ? tile.id : -1,\n      title: !assignment ? name : assignment.name,\n      type: \"ASSIGNMENT\"\n    };\n\n    this.props.addEntry(entry);\n  }\n\n  render(): React.ReactNode {\n    const { activeAssignments, canvasAssignments }: Props = this.props;\n\n    return (\n      <div id={\"assignmentManager\"}>\n        <h2>Select assignments.</h2>\n        <Divider />\n\n        <Space direction={\"vertical\"} style={{width: '100%'}}>\n          <QuizzesTutorial open={this.state.tutorialOpen} setOpen={(val) => this.setState({ tutorialOpen: val })} />\n          <span>\n            <Switch checked={this.props.graphView}\n                    onChange={(val) => this.props.setGraphView(val)}\n                    style={{zIndex: 0}}\n            />\n              &nbsp;\n              <b>Enable graph view. </b>If enabled entries will be visualized using a graph instead of the tiles.\n          </span>\n\n          <Alert message={\n            <span>\n              <QuestionOutlined />\n              &nbsp;\n              <button onClick={() => this.setState({ tutorialOpen: true })} style={{background: \"none\", border: \"none\", padding: \"0!important\", cursor: 'pointer', color: '#069', textDecoration: 'underline'}}>\n                  Create responsive quizzes.\n                </button>\n              {' '}\n              Responsive quizzes are like surveys which can be used to poll the time spent on an assignment.\n            </span>\n          } type=\"info\" />\n\n          <div id={\"assignmentRegistry\"}>\n            <Table columns={getColumns(this.props.removeEntry, canvasAssignments)}\n                   pagination={false}\n                   dataSource={activeAssignments} //.sort((a, b) => a.position - b.position)\n            />\n          </div>\n\n          <div>\n            <CreatableSelect\n              options={canvasAssignments\n                .filter(a => !activeAssignments.map(x => x.title).includes(a.name) )\n                .map(a => ({ label: a.name, value: a.id }))}\n              onCreateOption={(name: string) => this.addAssignment(name)}\n              onChange={(e) => this.addAssignment(e!.label.toString())}\n              value={null}\n            />\n          </div>\n        </Space>\n      </div>\n    );\n  }\n}","import {Button} from \"antd\";\nimport { DeleteOutlined, CheckCircleOutlined, CloseCircleOutlined } from \"@ant-design/icons\";\nimport React from \"react\";\nimport {TileEntry} from \"../../../../models/app/Tile\";\nimport {CanvasDiscussion} from \"../../../../models/canvas/Discussion\";\n\nexport const getColumns = (\n  removeDiscussion: (entry: TileEntry) => any,\n  canvasDiscussions: CanvasDiscussion[]\n) => {\n  return [\n    {\n      title: 'Title',\n      dataIndex: 'title',\n      key: 'title',\n    }, {\n      title: 'On Canvas',\n      dataIndex: 'onCanvas',\n      key: 'onCanvas',\n      render: (text: string, obj: TileEntry) => {\n        const discussion = canvasDiscussions.find(d => d.title === obj.title);\n        return discussion !== undefined ?\n          <span className={\"binary success\"}><CheckCircleOutlined /> Yes</span> :\n          <span className={\"binary fail\"}><CloseCircleOutlined /> <b>No</b></span>\n      }\n    }, {\n      title: 'Posted by',\n      dataIndex: 'posted_by',\n      key: 'posted_by',\n      render: (text: string, obj: TileEntry) => {\n        const discussion = canvasDiscussions.find(d => d.title === obj.title);\n        return discussion ? discussion.posted_by : \"n/a\"\n      }\n    }, {\n      title: 'Posted at',\n      dataIndex: 'posted_at',\n      key: 'posted_at',\n      render: (text: string, obj: TileEntry) => {\n        const discussion = canvasDiscussions.find(d => d.title === obj.title);\n        return discussion ? discussion.posted_at : \"n/a\"\n      }\n    }, {\n      title: 'Action',\n      dataIndex: 'action',\n      key: 'action',\n      render: (_: string, obj: TileEntry) => {\n        return (\n          <Button danger\n            icon={<DeleteOutlined />}\n            shape={\"round\"}\n            type={\"primary\"}\n            size={\"large\"}\n            onClick={() => removeDiscussion(obj)}\n          />\n      )\n      }\n    }\n  ]\n}","import React, { Component } from \"react\";\nimport {Divider, Switch, Table} from \"antd\";\nimport {getColumns} from \"./helpers\";\nimport CreatableSelect from \"react-select/creatable\";\nimport FadeIn from \"react-fade-in\";\nimport {IManagerProps} from \"../types\";\nimport {IProps} from \"./types\";\nimport {editState, TileEntry} from \"../../../../models/app/Tile\";\n\ntype Props = IManagerProps & IProps;\n\nclass DiscussionManager extends Component<Props> {\n\n\n  addDiscussion = (title: string) => {\n    const { canvasDiscussions, tile }: Props = this.props;\n    const assignment = canvasDiscussions.find(d => d.title === title);\n\n    const entry: TileEntry = {\n      id: -1,\n      state: editState.new,\n      tile_id: tile ? tile.id : -1,\n      title: !assignment ? title : assignment.title,\n      type: \"DISCUSSION\"\n    }\n\n    this.props.addEntry(entry);\n  }\n\n  render(): React.ReactNode {\n    const { activeDiscussions, canvasDiscussions, wildcard } = this.props;\n\n    return (\n      <div id={\"discussionManager\"}>\n        <h2>Configure discussion metric.</h2>\n        <Divider />\n        <span>\n          <Switch checked={wildcard}\n                  onChange={(val) => {\n                    this.props.setWildcard(val)\n                  }}\n                  style={{zIndex: 0}}\n          />\n          &nbsp;\n          <strong>Count all user posts.</strong> When enabled all posted submissions will be extracted for all students. If you wish to count the replies to a certain post uncheck this functionality and specify the posts you wish to track the replies of.\n        </span>\n\n        { !wildcard &&\n          <FadeIn>\n            <div id={\"assignmentRegistry\"}>\n              <Table columns={getColumns(this.props.removeEntry, canvasDiscussions)}\n                     pagination={false}\n                     dataSource={activeDiscussions}\n              />\n            </div>\n\n            <div>\n              <CreatableSelect\n                options={canvasDiscussions\n                  .filter(a => !activeDiscussions.map(x => x.title).includes(a.title) )\n                  .map(a => ({ label: a.title, value: a.id }))}\n                onCreateOption={(title: string) => this.addDiscussion(title)}\n                onChange={(e) => this.addDiscussion(e!.label.toString())}\n                value={null}\n              />\n            </div>\n          </FadeIn>\n        }\n      </div>\n    )\n  }\n}\n\nexport default DiscussionManager;","import React, { Component } from \"react\";\nimport {Button, Col, InputNumber, Row} from \"antd\";\nimport {DeleteOutlined} from \"@ant-design/icons\";\nimport Select from \"react-select\";\nimport {IProps} from \"./types\";\nimport Swal from \"sweetalert2\";\nimport {RootState} from \"../../../../../../store\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport TileController from \"../../../../../../api/controllers/tile\";\nimport \"./style.scss\";\nimport { editState } from \"../../../../../../models/app/Tile\";\n\nconst mapState = (state: RootState) => ({\n  tiles: state.tiles,\n  tileEntries: state.tileEntries\n});\n\nconst connector = connect(mapState)\ntype PropsFromRedux = ConnectedProps<typeof connector>\ntype Props = IProps & PropsFromRedux;\n\nclass GoalRequirement extends Component<Props> {\n\n  state = {\n    loading: false,\n    metaKeys: []\n  }\n\n  componentDidMount(): void {\n    const { requirement } = this.props;\n    if (requirement.entry_id !== -1 && requirement.entry_id !== null) {\n      this.loadMetaKeys(requirement.entry_id as number);\n    }\n  }\n\n  componentWillReceiveProps(nextProps: Readonly<Props>, nextContext: any): void {\n    if (nextProps.requirement.entry_id !== this.props.requirement.entry_id &&\n        !isNaN(nextProps.requirement.entry_id as number)) {\n      this.loadMetaKeys(nextProps.requirement.entry_id as number);\n    }\n\n    if (nextProps.requirement.entry_id === -1) {\n      this.setState({\n        loading: false, metaKeys: []\n      });\n    }\n  }\n\n  loadMetaKeys = (id: number) => {\n    this.setState({ loading: true }, () => {\n      TileController.getTileEntriesMetaKeys(id).then(metaKeys => {\n        this.setState({\n          loading: false, metaKeys\n        });\n      });\n    });\n  }\n\n  getExpressionLabel = (expression: string | null) => {\n    switch (expression) {\n      case \"lte\": return \"≤ (less than)\";\n      case \"gte\": return \"≥ (greater than)\";\n      case \"e\": return \"= (equal to)\";\n      default: return \"\";\n    }\n  }\n\n  getMetaKeyLabel = (key: string) => {\n    switch (key) {\n      case \"grade\": return \"Grade (default)\";\n      default: return key;\n    }\n  }\n\n  render(): React.ReactNode {\n    let { requirement, tiles, tileEntries } = this.props;\n\n    let entryOptions: {label: string, value: number | string }[] = tileEntries\n      .filter(e => e.tile_id === requirement.tile_id)\n      .map(e => ({ label: e.title, value: e.id }));\n\n    const targetTile = tiles.find(t => t.id === requirement.tile_id);\n    if (targetTile && targetTile.content === \"BINARY\") {\n      entryOptions = [\n        { value: 'count', label: 'COUNT (success)' },\n        ...entryOptions\n      ];\n    }\n\n    if (requirement.state === editState.removed) {\n      return null;\n    }\n\n    return (\n      <div className={\"goalRequirement\"}>\n        <Row gutter={[10, 10]}>\n          <Col xs={3} md={2}>\n            <Button shape={\"circle\"}\n                    danger\n                    onClick={() => {\n                      Swal.fire({\n                        icon: 'warning',\n                        title: 'Do you really want to delete this requirement?',\n                        showCancelButton: true,\n                        confirmButtonText: 'Delete',\n                        showLoaderOnConfirm: true,\n                        allowOutsideClick: true\n                      }).then((result) => {\n                        if (result.isConfirmed) {\n                          requirement.state = editState.removed;\n                          this.props.updateRequirement(requirement);\n                          this.setState({requirement});\n                        }\n                      });\n                    }}\n                    icon={<DeleteOutlined />}/>\n          </Col>\n          <Col xs={21} md={8}>\n            Tile\n            <Select value={{\n                      value: requirement.tile_id,\n                      label: tiles.find(t => t.id === requirement.tile_id)?.title || \"Choose tile\"\n                    }}\n                    options={tiles.map(t => ({ value: t.id, label: t.title }))}\n                    onChange={(e) => {\n                      if (!e) return;\n\n                      requirement.tile_id = e.value;\n                      requirement.entry_id = -1;\n                      this.props.updateRequirement(requirement);\n                      this.setState({requirement});\n                    }}\n            />\n          </Col>\n          <Col xs={24} md={8}>\n            Entry\n            <Select value={{\n                      value: requirement.entry_id,\n                      label: requirement.entry_id === \"count\" ?\n                        \"COUNT (success)\" :\n                        (tileEntries.find(e => e.id === requirement.entry_id)?.title || \"Choose entry\")\n                    }}\n                    isDisabled={requirement.tile_id === -1}\n                    onChange={(e) => {\n                      if (!e) return;\n\n                      requirement.entry_id = e.value;\n                      this.props.updateRequirement(requirement);\n                      this.setState({requirement});\n\n                    }}\n                    options={entryOptions} />\n            <br />\n            Meta\n            <Select isLoading={this.state.loading}\n                    value={{ value: requirement.meta_key || \"\", label: this.getMetaKeyLabel(requirement.meta_key || \"\") }}\n                    onChange={e => {\n                      if (!e) return;\n                      requirement.meta_key = e.value;\n                      this.props.updateRequirement(requirement);\n                      this.setState({requirement});\n                    }}\n                    isDisabled={requirement.entry_id === -1 || requirement.entry_id === \"count\"}\n                    options={[\n                      { value: 'grade', label: 'Grade (default)' },\n                      ...this.state.metaKeys.map(k => ({\n                        value: k, label: k\n                      }))\n                    ]} />\n          </Col>\n          <Col xs={24} md={3}>\n            Expression\n            <Select isDisabled={requirement.entry_id === -1}\n                    value={requirement.expression ? { label: this.getExpressionLabel(requirement.expression), value: requirement.expression } : undefined}\n                    onChange={e => {\n                      if (!e) return;\n\n                      requirement.expression = e.value;\n                      this.props.updateRequirement(requirement);\n                      this.setState({requirement});\n                    }}\n                    options={[\n                      { value: 'lte', label: '≤ (less than)' },\n                      { value: 'e', label: '= (equal to)' },\n                      { value: 'gte', label: '≥ (greater than)' }\n                    ]}\n            />\n          </Col>\n          <Col xs={24} md={3}>\n            <br />\n            <InputNumber step={.5}\n                         size={\"large\"}\n                         disabled={requirement.expression === null}\n                         value={requirement.value}\n                         onChange={value => {\n                          requirement.value = Number(value);\n                          this.props.updateRequirement(requirement);\n                          this.setState({requirement});\n                        }}\n            />\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default connector(GoalRequirement);","import React, { Component } from \"react\";\nimport {Alert, Button, Divider, Input, Space} from \"antd\";\nimport {DeleteOutlined, PlusOutlined} from \"@ant-design/icons\";\nimport GoalRequirement from \"./GoalRequirement\";\nimport {GoalRequirement as GoalRequirementModel} from \"../../../../../models/app/LearningGoal\";\nimport {editState} from \"../../../../../models/app/Tile\";\nimport {IProps} from \"./types\";\nimport {LearningGoal} from \"../../../../../models/app/LearningGoal\";\nimport Swal from \"sweetalert2\";\nimport \"./style.scss\";\n\nexport default class GoalEntry extends Component<IProps> {\n\n  componentDidMount(): void {\n    this._initialize(this.props.goal);\n  }\n\n  componentWillReceiveProps(nextProps: Readonly<IProps>, nextContext: any): void {\n    this._initialize(nextProps.goal);\n  }\n\n  _initialize = (goal: LearningGoal) => {\n    this.setState({ goal });\n  }\n\n  addNewRequirement = () => {\n    const {goal, tile} = this.props;\n    goal.requirements = [{\n      id: -1,\n      state: editState.new,\n      expression: null,\n      goal_id: goal.id,\n      tile_id: tile ? tile.id : -1,\n      entry_id: -1,\n      meta_key: \"grade\",\n      value: 0\n    }, ...goal.requirements];\n    this.props.updateGoal(goal);\n  }\n\n  updateRequirement = (requirement: GoalRequirementModel) => {\n    if ((requirement.state !== editState.new) && (requirement.state !== editState.removed)) {\n      requirement.state = editState.updated;\n    }\n    this.props.updateGoal(this.props.goal);\n    this.setState({goal: this.props.goal});\n  }\n\n  render(): React.ReactNode {\n    let goal = this.props.goal;\n\n    if (goal.state === editState.removed) {\n      return null;\n    }\n\n    return (\n      <div className={\"goalEntry\"} >\n        <div className={\"title\"}>\n          <span><b>Title</b></span>\n          <Input value={goal.title}\n                 size={\"large\"}\n                 onChange={e => {\n                   goal.title = e.target.value;\n                   this.props.updateGoal(goal);\n                 }}\n          />\n        </div>\n\n        <div className={\"actions\"}>\n          <Space direction={\"horizontal\"}>\n            <Button shape={\"round\"}\n                    danger\n                    onClick={() => {\n                      Swal.fire({\n                        icon: 'warning',\n                        title: 'Do you really want to delete this goal?',\n                        text: `Goal: ${goal.title} will be deleted on save`,\n                        showCancelButton: true,\n                        confirmButtonText: 'Delete',\n                        showLoaderOnConfirm: true,\n                        allowOutsideClick: true\n                      }).then((result) => {\n                        if (result.isConfirmed) {\n                          goal.state = editState.removed;\n                          this.setState({goal});\n                        }\n                      });\n                    }}\n                    icon={<DeleteOutlined />}>\n              Delete goal\n            </Button>\n\n            <Button shape={\"round\"}\n                    onClick={this.addNewRequirement}\n                    icon={<PlusOutlined />}>\n              Requirement\n            </Button>\n          </Space>\n        </div>\n\n        <Divider />\n        <span><b>Requirements</b></span>\n\n        { goal.requirements.map(r => {\n          return (\n            <GoalRequirement updateRequirement={this.updateRequirement}\n                             requirement={r} />\n          );\n        })}\n\n        { goal.requirements.length === 0 &&\n          <Alert message=\"Goal doesn't have a requirement\" type=\"warning\" showIcon />\n        }\n      </div>\n    );\n  }\n}","import React, { Component } from \"react\";\nimport {Button, Divider} from \"antd\";\nimport {PlusOutlined} from \"@ant-design/icons\";\nimport GoalEntry from \"./GoalEntry\";\nimport {IProps, IState} from \"./types\";\nimport {LearningGoal} from \"../../../../models/app/LearningGoal\";\nimport { editState } from \"../../../../models/app/Tile\";\n\nexport default class LearningGoalsManager extends Component<IProps, IState> {\n\n  addNewGoal = () => {\n    const { tile, goals } = this.props;\n\n    this.props.setGoals([\n      { id: -1,\n        state: editState.new,\n        tile_id: tile ? tile.id : -1,\n        title: \"\",\n        requirements: []\n      },\n      ...goals\n    ]);\n  }\n\n  updateGoal = (goal: LearningGoal) => {\n    if ((goal.state !== editState.new) && (goal.state !== editState.removed)) {\n      goal.state = editState.updated;\n    }\n    this.props.setGoals(this.props.goals);\n  }\n\n  render(): React.ReactNode {\n    const { tile, goals } = this.props;\n\n    return (\n      <div id={\"learningGoalsManager\"}>\n        <h2>Construct learning goals.</h2>\n        <Button shape={\"round\"}\n                icon={<PlusOutlined />}\n                onClick={this.addNewGoal}\n        >\n          Goal\n        </Button>\n        <Divider />\n\n        { goals.map(goal => {\n          return (\n            <GoalEntry tile={tile}\n                       goal={goal}\n                       updateGoal={this.updateGoal}\n            />\n          )\n        })}\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport {IProps, IState} from \"./types\";\nimport ExternalDataManager from \"./ExternalDataManager\";\nimport CreationPreview from \"./CreationPreview\";\nimport AssignmentManager from \"./AssignmentManager\";\nimport TileController from \"../../../api/controllers/tile\";\nimport {Tile, TileEntry} from \"../../../models/app/Tile\";\nimport {RootState} from \"../../../store\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport Loading from \"../../utils/Loading\";\nimport DiscussionManager from \"./DiscussionManager\";\nimport {message} from \"antd\";\nimport LearningGoalsManager from \"./LearningGoalsManager\";\nimport \"./style.scss\";\n\nconst mapState = (state: RootState) => ({\n  assignments: state.assignments,\n  discussions: state.discussions\n});\n\nconst connector = connect(mapState)\ntype PropsFromRedux = ConnectedProps<typeof connector>\ntype Props = IProps & PropsFromRedux;\n\nclass TileCreateEntries extends Component<Props, IState> {\n\n  state = {\n    activeGoals: [],\n    activeEntries: [],\n    loading: false\n  }\n\n  componentDidMount(): void {\n    if (this.props.tile) {\n      this.setState({loading: true}, () => {\n        this._initializeTile(this.props.tile!);\n      });\n    }\n  }\n\n  componentWillReceiveProps(nextProps: Readonly<Props>, nextContext: any): void {\n    if (\n          (nextProps.tile?.id !== this.props.tile?.id) ||\n          (nextProps.contentType !== this.props.contentType) ||\n          (nextProps.tileType !== this.props.tileType)\n        ) {\n      if (nextProps.tile) this._initializeTile(nextProps.tile);\n      else this.setState({ activeEntries: [], activeGoals: [] });\n    }\n  }\n\n  _initializeTile = (tile: Tile) => {\n    if (tile.content === \"LEARNING_OUTCOMES\") {\n      TileController.getTileGoals(tile.id).then(goals => {\n        this.setState({ activeGoals: goals, loading: false }, () => {\n          this.props.updateGoals(goals);\n        });\n      });\n    } else {\n      TileController.getTileEntries(tile.id).then(entries => {\n        this.setState({ activeEntries: entries, loading: false }, () => {\n          this.props.updateEntries(entries);\n        });\n      });\n    }\n  }\n\n  addEntry = (entryRegistry: TileEntry) => {\n    if (this.state.activeEntries.find((x: TileEntry) => x.title === entryRegistry.title)) {\n      message.error(\"Entry is already registered!\");\n      console.error(\"Entry is already registered!\");\n      return;\n    }\n\n    this.setState(\n      { activeEntries: [...this.state.activeEntries, entryRegistry] },\n      () => {\n        this.props.updateEntries(this.state.activeEntries);\n      }\n    );\n  }\n\n  removeEntry = (entryRegistry: TileEntry) => {\n    if (!this.state.activeEntries.find((x: TileEntry) => x.title === entryRegistry.title)) {\n      message.error(\"Entry does not exist!\");\n      console.error(\"Entry is already registered!\");\n      return;\n    }\n\n    this.setState(\n      { activeEntries: this.state.activeEntries.filter((e: TileEntry) =>\n          e.title !== entryRegistry.title)\n      }, () => {\n        this.props.updateEntries(this.state.activeEntries);\n      }\n    );\n  }\n\n  render(): React.ReactNode {\n    const { activeEntries, loading, activeGoals }: IState = this.state;\n    const { tile, contentType, tileType, graphView, setGraphView } = this.props;\n\n    if (loading) return <Loading small={true} />\n\n    if (contentType && (contentType === \"LEARNING_OUTCOMES\")) {\n      return <LearningGoalsManager tile={tile}\n                                   setGoals={goals => {\n                                     this.setState({ activeGoals: goals });\n                                     this.props.updateGoals(goals)\n                                   }}\n                                   goals={activeGoals}\n                                   />\n    } else if (contentType && (contentType === \"PREDICTION\")) {\n\n    } else if (contentType && !tileType) {\n      return (<CreationPreview contentType={contentType} />);\n    }\n\n    if (!contentType || !tileType) return null;\n\n    switch (tileType!) {\n      case \"ASSIGNMENTS\":\n        return (<AssignmentManager tile={tile}\n                                   addEntry={this.addEntry}\n                                   removeEntry={this.removeEntry}\n                                   graphView={graphView}\n                                   setGraphView={setGraphView}\n                                   activeAssignments={activeEntries}\n                                   canvasAssignments={this.props.assignments} />);\n      case \"DISCUSSIONS\":\n        return (<DiscussionManager tile={tile}\n                                   addEntry={this.addEntry}\n                                   removeEntry={this.removeEntry}\n                                   wildcard={this.props.wildcard}\n                                   setWildcard={this.props.setWildcard}\n                                   activeDiscussions={activeEntries}\n                                   canvasDiscussions={this.props.discussions} />);\n      case \"EXTERNAL_DATA\":\n        return (<ExternalDataManager />);\n      default:\n        return null;\n    }\n  }\n}\n\nexport default connector(TileCreateEntries);","import React, { Component } from \"react\";\nimport {IProps} from \"./types\";\nimport {Button} from \"antd\";\n\nexport default class VisibilityButton extends Component<IProps> {\n  render(): React.ReactNode {\n    const { visible, setVisibility } = this.props;\n\n    return (\n      <div>\n        <Button size={\"large\"}\n                className={visible ? \"successButton\" : \"dangerButton\"}\n                onClick={() => setVisibility(!visible)}\n        >\n          { visible ? \"Visible\" : \"Hidden\" }\n        </Button>\n      </div>\n    )\n  }\n}","import React, { Component } from \"react\";\nimport {Col, Drawer, Input, Row, Statistic, Divider, Button} from \"antd\";\nimport {SaveOutlined} from \"@ant-design/icons\";\nimport {IProps, IState} from \"./types\";\nimport Select from \"react-select\";\nimport TileCreateEntries from \"../../../../../../components/managers/TileCreateEntries\";\nimport {editState, Tile, TileContentTypes, TileEntry, TileTypeTypes} from \"../../../../../../models/app/Tile\";\nimport VisibilityButton from \"./VisibilityButton\";\nimport {RootState} from \"../../../../../../store\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport TileController from \"../../../../../../api/controllers/tile\";\nimport {TileActions} from \"../../../../../../store/actions/tiles\";\n\nconst mapState = (state: RootState) => ({\n  tileEntries: state.tileEntries,\n  tileGoals: state.tileGoals\n});\n\nconst mapDispatch = {\n  loadTiles: () => TileActions.loadTiles(),\n  loadEntries: () => TileActions.loadTileEntries(),\n  loadTileGoals: () => TileActions.loadTileGoals()\n}\n\nconst connector = connect(mapState, mapDispatch)\ntype PropsFromRedux = ConnectedProps<typeof connector>\n\ntype Props = IProps & PropsFromRedux;\n\nclass EditTileDragger extends Component<Props, IState> {\n\n  state = {\n    updating: false,\n    title: \"\",\n    contentType: { label: undefined, value: undefined },\n    tileType: { label: undefined, value: undefined },\n    visible: true,\n    wildcard: false,\n    entries: [],\n    goals: [],\n    graphView: false,\n  }\n\n  componentWillReceiveProps(nextProps: Readonly<Props>, nextContext: any): void {\n    if (nextProps.tile !== undefined && nextProps.tile.id !== this.props.tile?.id) {\n      const { tile } = nextProps;\n\n      if (tile) {\n        this.setState({\n          title: tile.title,\n          contentType: { label: tile.content, value: tile.content },\n          tileType: { label: tile.type!, value: tile.type },\n          visible: tile.visible,\n          graphView: tile.graph_view\n        });\n      }\n    } else if (nextProps.tile === undefined) {\n      this.setState({\n        title: \"\",\n        contentType: { label: undefined, value: undefined },\n        tileType: { label: undefined, value: undefined },\n        visible: false,\n        graphView: false\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<{}>, snapshot?: any): void {\n    if (!prevProps.isOpen && this.props.isOpen) {\n      window.scrollTo(0, 0);\n    }\n  }\n\n  create = async () => {\n    const { entries, title, visible, contentType, tileType, wildcard, goals, graphView }: IState = this.state;\n    const { tileGroup } = this.props;\n\n    const newTile: Tile = {\n      id: -1,\n      group_id: tileGroup.id,\n      title,\n      position: -1,\n      visible,\n      content: contentType.value as TileContentTypes,\n      type: tileType.value as TileTypeTypes,\n      notifications: false,\n      graph_view: graphView,\n      wildcard\n    }\n\n    TileController.createTile(newTile).then(async tile => {\n      if (['ASSIGNMENTS', 'DISCUSSIONS'].includes(tile.type || \"\")) {\n        await this.createEntries(entries.map(e => {\n          e.tile_id = tile.id;\n          return e;\n        }));\n      } else if (tile.content === \"LEARNING_OUTCOMES\") {\n        for (let i = 0; i < goals.length; i++) {\n          goals[i].tile_id = tile.id;\n          let response = await TileController.createTileGoal(goals[i]);\n          console.log(\"goal\", response)\n        }\n      }\n\n      this.props.loadTiles().then(() => {\n        this.props.loadEntries().then(() => {\n          this.props.loadTileGoals().then(() => {\n            this.setState({ updating: false }, () => {\n              this.props.setOpen(false);\n            });\n          });\n        });\n      });\n    });\n  }\n\n  save = async () => {\n    const { entries, goals, graphView, wildcard, title }: IState = this.state;\n    const { tileEntries, tile }: Props = this.props;\n\n    tile!.title = title;\n    tile!.graph_view = graphView;\n    tile!.wildcard = wildcard;\n\n    const patchedTile = await TileController.updateTile(tile!)\n    this.setState({ updating: true }, async () => {\n      let removedEntries = tileEntries.filter(\n        e => e.tile_id === ( tile ? tile.id : -1 )\n      ).filter(\n        e => !entries.map(_e => _e.title).includes(e.title));\n\n      let newEntries = entries.filter(e => e.id === -1);\n\n      if (tile!.type === 'ASSIGNMENTS' || tile!.type === 'DISCUSSIONS' ) {\n        removedEntries = tileEntries.filter(\n          e => e.tile_id === patchedTile.id\n        ).filter(\n          e => !entries.map(_e => _e.title).includes(e.title));\n\n        newEntries = entries.filter(e => e.id === -1);\n\n      }\n      else if (tile!.content === \"LEARNING_OUTCOMES\") {\n        for (let i = 0; i < goals.length; i++) {\n          if (goals[i].state != null) {\n            switch (goals[i].state) {\n              case editState.new:\n                goals[i].state = editState.unchanged;\n                await TileController.createTileGoal(goals[i]);\n                break;\n              case editState.updated:\n                goals[i].state = editState.unchanged;\n                await TileController.updateTileGoal(goals[i]);\n                break;\n              case editState.removed:\n                goals[i].state = editState.unchanged;\n                await TileController.deleteTileGoal(goals[i].id);\n                break;\n              case editState.unchanged:\n                break;\n            }\n          }\n        }\n      }\n\n      await this.deleteEntries(removedEntries);\n      await this.createEntries(newEntries);\n\n      this.props.loadTiles().then(() => {\n        this.props.loadEntries().then(() => {\n          this.props.loadTileGoals().then(() => {\n            this.setState({ updating: false }, () => {\n              this.props.setOpen(false);\n            });\n          });\n        });\n      });\n    });\n  }\n\n  createEntries = async (entries: TileEntry[]) => {\n    for (const entry of entries) {\n      await TileController.createTileEntry(entry);\n    }\n  }\n\n  deleteEntries = async (entries: TileEntry[]) => {\n    for (const entry of entries) {\n      await TileController.deleteTileEntry(entry.id);\n    }\n  }\n\n  render(): React.ReactNode {\n    const { tileGroup, tiles, tile } = this.props;\n    const { title, contentType, tileType, visible }: IState = this.state;\n\n    return (\n      <Drawer\n        width={'100%'}\n        destroyOnClose={true}\n        title={tile === undefined ? \"Create new tile\" : \"Edit \" + tile.title}\n        placement={\"right\"}\n        closable={true}\n        onClose={() => this.props.setOpen(false)}\n        open={this.props.isOpen}\n        getContainer={false}\n        style={{ position: 'absolute' }}\n      >\n        <Row gutter={[10, 25]} style={{marginBottom: 10}}>\n          <Col xs={24}>\n            <Row gutter={50}>\n              <Col>\n                <Statistic\n                  title={\"Tile Group\"}\n                  value={tileGroup.title}\n                />\n              </Col>\n              <Col>\n                <Statistic\n                  title={\"Children\"}\n                  value={tiles.filter(t => t.group_id === tileGroup.id).length}\n                  suffix={\"tiles\"}\n                />\n              </Col>\n              <Col>\n                <Statistic\n                  title={\"Manage\"}\n                  valueRender={() => (\n                    <Button type=\"primary\"\n                            shape=\"round\"\n                            loading={this.state.updating}\n                            onClick={() => this.props.tile === undefined ? this.create() : this.save()}\n                            icon={<SaveOutlined />}>\n                      { this.props.tile === undefined ? \"Create\" : \"Save\" }\n                    </Button>)\n                  }\n                />\n              </Col>\n            </Row>\n\n            <Divider />\n            <h2>Tile Configuration</h2>\n          </Col>\n\n          <Col xs={12}>\n            <span>Title</span>\n            <Input size={\"large\"}\n                   placeholder={\"Specify\"}\n                   value={title}\n                   onChange={e => this.setState({ title: e.target.value })}/>\n          </Col>\n          <Col xs={12}>\n            <span>Visibility</span>\n            <br />\n            <VisibilityButton visible={visible}\n                              setVisibility={visible => this.setState({ visible })}\n            />\n          </Col>\n\n          <Col xs={12}>\n            <span>Content type</span>\n            <Select value={{label: contentType.label as string, value: contentType.value as string}}\n                    style={{zIndex: 100}}\n                    options={[\n                      { label: 'Binary', value: 'BINARY'},\n                      { label: 'Entries', value: 'ENTRIES' },\n                      { label: 'Prediction', value: 'PREDICTION' },\n                      { label: 'Learning Outcome', value: 'LEARNING_OUTCOMES' }\n                    ]}\n                    isClearable={true}\n                    onChange={e => {\n                      if (!e) {\n                        this.setState({\n                          contentType: {label: undefined, value: undefined},\n                          tileType: {label: undefined, value: undefined}\n                        });\n                      } else {\n                        this.setState({\n                          contentType: {\n                            label: e!.label,\n                            value: e!.value as TileContentTypes\n                          },\n                          tileType: {label: undefined, value: undefined}\n                        });\n                      }\n                    }\n                  }\n            />\n          </Col>\n\n          <Col xs={12}>\n            <span>Tile type</span>\n            { ((contentType.value === \"LEARNING_OUTCOMES\") || (contentType.value === \"PREDICTION\")) ?\n              <h3>N/A</h3> :\n              <Select value={{label: tileType.label as string, value: tileType.value as string}}\n                      isDisabled={!contentType}\n                      isClearable={true}\n                      style={{zIndex: 100}}\n                      options={[\n                        { label: 'Assignments', value: 'ASSIGNMENTS'},\n                        { label: 'Discussions', value: 'DISCUSSIONS', isDisabled: (contentType ? contentType!.value : \"\") !== \"ENTRIES\" },\n                        { label: 'External Data', value: 'EXTERNAL_DATA' }\n                      ]}\n                      onChange={e => this.setState({ tileType: e ? {\n                          label: e.label,\n                          value: e.value as TileTypeTypes\n                        } : { label: undefined, value: undefined } })\n                      }\n                      placeholder={\n                        contentType ? \"Select type\" : \"Specify content first\"\n                      }\n              />\n            }\n          </Col>\n        </Row>\n\n        <TileCreateEntries tile={tile}\n                           graphView={this.state.graphView}\n                           setGraphView={(graphView) => this.setState({ graphView })}\n                           wildcard={this.state.wildcard}\n                           setWildcard={wildcard => this.setState({ wildcard })}\n                           updateEntries={(entries) => this.setState({ entries })}\n                           updateGoals={(goals) => this.setState({ goals })}\n                           contentType={this.state.contentType.value}\n                           tileType={this.state.tileType.value}\n        />\n      </Drawer>\n    )\n  }\n}\n\nexport default connector(EditTileDragger);","import {Tile, TileGroup} from \"../../../../../models/app/Tile\";\n\nexport const getStyle = (group: TileGroup, tiles: Tile[]) => {\n\n  if (tiles.filter((tile: Tile) => tile.group_id === group.id).length === 0) {\n    return {\n      width: '100%',\n      minHeight: 200,\n      border: \"2px dotted #EAEAEA\",\n      borderRadius: 5,\n    }\n  }\n\n  return {}\n}\n\nexport const handleDrop = async (group: TileGroup,\n                                 evt: { removedIndex: number | null, addedIndex: number | null, payload?: Tile },\n                                 tiles: Tile[]): Promise<Tile[]> => {\n  const { addedIndex, payload, removedIndex } = evt;\n  void payload; // discard while keeping eslint happy\n\n  let tilesInGroup: Tile[] = JSON.parse(JSON.stringify(getTilesInGroup(tiles, group.id)));\n\n  if (removedIndex !== null && addedIndex !== null) {\n    const dragged = tilesInGroup[removedIndex - 1];\n    tilesInGroup.splice(addedIndex, 0, dragged);\n\n    if (removedIndex < addedIndex)\n      tilesInGroup = tilesInGroup.filter((t, i) => i !== removedIndex - 1);\n    else\n      tilesInGroup = tilesInGroup.filter((t, i) => i !== removedIndex);\n\n    for (let i = 0; i < tilesInGroup.length; i ++) {\n      tilesInGroup[i].position = i + 1;\n    }\n\n    tiles = [\n      ...tiles.filter(t => !tilesInGroup.map(x => x.id).includes(t.id)),\n      ...tilesInGroup\n    ];\n\n    return Promise.resolve(tiles);\n  } else {\n    return Promise.resolve(tiles);\n  }\n}\n\nexport const getTilesInGroup = (tiles: Tile[], groupId: number) => {\n  return tiles.filter(\n    (tile: Tile) => tile.group_id === groupId)\n    .sort(\n      (a: Tile, b: Tile) => a.position - b.position\n    );\n}","import React, { Component } from \"react\";\nimport { IProps, IState } from \"./types\";\nimport {Button, Space} from \"antd\";\nimport { PlusOutlined, DeleteOutlined } from \"@ant-design/icons\";\nimport DraggableTile from \"../../../../../components/DraggableTile\";\nimport EditTileDragger from \"./EditTileDragger\";\nimport {Container} from \"react-smooth-dnd\";\nimport {getStyle, getTilesInGroup, handleDrop} from \"./helpers\";\nimport {Tile} from \"../../../../../models/app/Tile\";\nimport \"./style.scss\";\nimport Swal from \"sweetalert2\";\nimport TileController from \"../../../../../api/controllers/tile\";\nimport {RootState} from \"../../../../../store\";\nimport {TileActions} from \"../../../../../store/actions/tiles\";\nimport {connect, ConnectedProps} from \"react-redux\";\n\nconst mapState = (state: RootState) => ({\n  tileGroups: state.tileGroups,\n});\n\nconst mapDispatch = {\n  loadGroups: () => TileActions.loadGroups(),\n  loadTiles: () => TileActions.loadTiles()\n}\n\nconst connector = connect(mapState, mapDispatch)\ntype PropsFromRedux = ConnectedProps<typeof connector>\n\ntype Props = IProps & PropsFromRedux;\n\nclass TileWrapper extends Component<Props, IState> {\n\n  state = {\n    updating: [],\n    editTile: undefined,\n    isDraggerOpen: false\n  }\n\n  deleteTile = async (id: number) => {\n    TileController.deleteTile(id).then(() => {\n      this.props.loadGroups().then(() => {\n        this.props.loadTiles().then(() => {\n          this.setState({isDraggerOpen: false});\n        });\n      });\n    });\n  }\n\n\n  render(): React.ReactNode {\n    const { editTile, isDraggerOpen, updating }: IState = this.state;\n    const { group, tiles, updateTiles } = this.props;\n    const historicTiles: Tile[] = JSON.parse(JSON.stringify(tiles));\n\n    return (\n      <div className={\"tileWrapper\"} key={\"group-\" + group.id.toString()}>\n        <h2>{ group.title }</h2>\n        <div className={\"tileContainer\"}>\n          <EditTileDragger\n            tile={editTile}\n            tiles={tiles}\n            tileGroup={group}\n            isOpen={isDraggerOpen}\n            setOpen={(isDraggerOpen) => this.setState({ isDraggerOpen })}\n            updateTiles={updateTiles}\n          />\n\n          <Container groupName={`primary`}\n                     key={\"containerGroup\" + group.id.toString()}\n                     style={{...getStyle(group, tiles)}}\n                     getChildPayload={i => getTilesInGroup(tiles, group.id)[i]}\n                     orientation={\"horizontal\"}\n                     dragClass={'dragged'}\n                     onDrop={e => {\n                       handleDrop(group, e, tiles).then(async (newTiles: Tile[]) => {\n                         if (newTiles.map(t => {\n                           const target = historicTiles.find(_t => _t.id === t.id);\n                           if (!target) return false;\n                           return (target.group_id !== t.group_id || target.position !== t.position);\n                         }).some(x => x)) {\n                           this.setState({ updating: [...updating, group.id] }, async () => {\n                             const changedTiles = newTiles.filter(t => {\n                               const target = historicTiles.find(ht => ht.id === t.id);\n                               if (!target) return true;\n\n                               return target.position !== t.position || target.group_id !== t.group_id;\n                             });\n\n                             for (const tile of changedTiles) {\n                               await TileController.updateTile(tile);\n                             }\n\n                             TileController.getTiles().then(async fetchedTiles => {\n                               await updateTiles(fetchedTiles);\n\n                               this.setState({ updating: updating.filter(x => x !== group.id)});\n                             })\n                           });\n                         }\n                       })\n                     }}>\n            <div className={\"updateOverlay \" + (updating.includes(group.id) ? \"active\" : \"\")}>\n              <div className={\"overlayBackground\"} />\n              <h1>Saving changes...</h1>\n            </div>\n            { tiles.sort((a, b) => a.position - b.position).map(t => {\n              return (\n                <DraggableTile key={\"dragMem\" + t.id.toString()} {...{\n                  tile: t, editTile: () => this.setState({editTile: t, isDraggerOpen: true}), deleteTile: this.deleteTile\n                }} />\n              );\n            })}\n          </Container>\n\n          <br />\n\n          <Space direction={\"horizontal\"}>\n            <Button type={\"link\"}\n                    onClick={() => this.setState({\n                      isDraggerOpen: true,\n                      editTile: undefined,\n                    })}\n                    icon={<PlusOutlined />}>\n              Create Tile\n            </Button>\n            <Button type={\"link\"}\n                    danger={true}\n                    onClick={() => {\n                      Swal.fire({\n                        title: 'Do you really want to delete this group?',\n                        text: 'All tiles within this group will be deleted as a result.',\n                        showCancelButton: true,\n                        confirmButtonText: 'Delete',\n                        confirmButtonColor: 'rgb(255, 110, 90)',\n                        showLoaderOnConfirm: true,\n                        allowOutsideClick: () => !Swal.isLoading()\n                      }).then((result) => {\n                        if (result.isConfirmed) {\n                          TileController.deleteTileGroup(group.id).then(() => {\n                            this.props.loadGroups().then(() => {\n                              Swal.fire('Task completed!', '', 'success');\n                            });\n                          });\n                        }\n                      });\n                    }}\n                    icon={<DeleteOutlined />}>\n              Delete Group\n            </Button>\n          </Space>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default connector(TileWrapper);","import React, { Component } from \"react\";\nimport Admin from \"../../index\";\nimport ManageTileGroups from \"../../../../containers/ManageTileGroups\";\nimport { Divider } from \"antd\";\nimport TileWrapper from \"./TileWrapper\";\nimport {Tile, TileGroup} from \"../../../../models/app/Tile\";\nimport \"./style.scss\";\nimport {RootState} from \"../../../../store\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport {TileActions} from \"../../../../store/actions/tiles\";\nimport {DataMartActions} from \"../../../../store/actions/datamart\";\nimport {getTilesInGroup} from \"./TileWrapper/helpers\";\n\nconst mapState = (state: RootState) => ({\n  tiles: state.tiles,\n  tileGroups: state.tileGroups,\n});\n\nconst mapDispatch = {\n  loadAssignments: () => DataMartActions.loadAssignments(),\n  loadDiscussions: () => DataMartActions.loadDiscussions(),\n  updateTiles: (tiles: Tile[]) => TileActions.updateTiles(tiles)\n}\n\nconst connector = connect(mapState, mapDispatch)\ntype PropsFromRedux = ConnectedProps<typeof connector>\n\nclass Tiles extends Component<PropsFromRedux> {\n\n  componentDidMount(): void {\n    this.props.loadDiscussions();\n    this.props.loadAssignments();\n  }\n\n  render(): React.ReactNode {\n    const { tiles, tileGroups } = this.props;\n\n    return (\n      <Admin menuKey={\"tiles\"}>\n        <div id={\"adminTiles\"}>\n          <ManageTileGroups />\n          <h1>Tiles</h1>\n          <p>The overview shows all groups with their respective tiles. Drag around tiles to re-arrange them or create new ones!</p>\n          <Divider />\n\n          { tileGroups.map((group: TileGroup) => (\n            <TileWrapper group={group}\n                         updateTiles={this.props.updateTiles}\n                         tiles={getTilesInGroup(tiles, group.id)}\n                         key={group.id}\n            />\n          ))}\n        </div>\n      </Admin>\n    )\n  }\n}\n\nexport default connector(Tiles);"],"names":["connector","connect","state","user","AdminMenu","this","props","id","name","UserOutlined","selectedKeys","menuKey","icon","DatabaseOutlined","to","AppstoreOutlined","LaptopOutlined","TeamOutlined","TrophyOutlined","title","FundProjectionScreenOutlined","DotChartOutlined","CloudUploadOutlined","ClusterOutlined","NotificationOutlined","ControlOutlined","Component","Admin","isAdmin","AdminHeader","xs","className","children","withAdminRole","mapDispatch","loadGroups","TileActions","tileGroups","ManageTileGroups","text","drawerOpen","direction","PlusOutlined","onClick","setState","width","placement","closable","onClose","open","getContainer","style","position","placeholder","value","onChange","e","target","type","TileController","length","then","tiles","dispatch","updateTile","tile","ActionButtons","loading","menu","EditOutlined","editTile","DeleteOutlined","Swal","showCancelButton","confirmButtonText","confirmButtonColor","showLoaderOnConfirm","allowOutsideClick","result","isConfirmed","deleteTile","danger","float","overlay","visible","t","newTile","size","ContentType","getName","content","getIcon","FieldBinaryOutlined","StockOutlined","TileType","tileEntries","DraggableTile","entriesLoaded","entries","updatingNotifications","toggleNotifications","notifications","filter","x","prevProps","prevState","snapshot","undefined","Draggable","gutter","marginTop","textAlign","margin","toString","includes","shape","BellTwoTone","twoToneColor","ExternalDataManager","CreationPreview","getTitle","contentType","getDescription","console","log","md","toLowerCase","getColumns","removeAssignment","canvasAssignments","dataIndex","key","render","obj","find","c","CheckCircleOutlined","CloseCircleOutlined","assignment","published","_","QuizzesTutorial","centered","onCancel","setOpen","footer","src","height","maxHeight","alt","AssignmentManager","tutorialOpen","addAssignment","a","entry","editState","tile_id","addEntry","activeAssignments","val","checked","graphView","setGraphView","zIndex","message","QuestionOutlined","background","border","padding","cursor","color","textDecoration","columns","removeEntry","pagination","dataSource","options","map","label","onCreateOption","removeDiscussion","canvasDiscussions","d","discussion","posted_by","posted_at","DiscussionManager","addDiscussion","activeDiscussions","wildcard","setWildcard","GoalRequirement","metaKeys","loadMetaKeys","getExpressionLabel","expression","getMetaKeyLabel","requirement","entry_id","nextProps","nextContext","isNaN","entryOptions","targetTile","updateRequirement","isDisabled","isLoading","meta_key","k","step","disabled","Number","GoalEntry","_initialize","goal","addNewRequirement","requirements","goal_id","updateGoal","r","showIcon","LearningGoalsManager","addNewGoal","goals","setGoals","assignments","discussions","TileCreateEntries","activeGoals","activeEntries","_initializeTile","updateGoals","updateEntries","entryRegistry","error","tileType","Loading","small","VisibilityButton","setVisibility","loadTiles","loadEntries","loadTileGoals","tileGoals","EditTileDragger","updating","create","tileGroup","group_id","graph_view","createEntries","i","response","save","patchedTile","removedEntries","_e","newEntries","deleteEntries","isOpen","window","scrollTo","destroyOnClose","marginBottom","suffix","valueRender","SaveOutlined","isClearable","getStyle","group","minHeight","borderRadius","handleDrop","evt","addedIndex","payload","removedIndex","tilesInGroup","JSON","parse","stringify","getTilesInGroup","dragged","splice","Promise","resolve","groupId","sort","b","TileWrapper","isDraggerOpen","updateTiles","historicTiles","Container","groupName","getChildPayload","orientation","dragClass","onDrop","newTiles","_t","some","changedTiles","ht","fetchedTiles","loadAssignments","DataMartActions","loadDiscussions","Tiles"],"sourceRoot":""}