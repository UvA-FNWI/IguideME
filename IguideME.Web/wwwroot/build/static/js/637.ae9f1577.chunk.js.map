{"version":3,"file":"static/js/637.ae9f1577.chunk.js","mappings":"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","sources":["common/Admin/AdminMenu/index.tsx","common/Admin/index.tsx","common/Admin/sections/grades/GradePredictor/ModelConfigurator/UploadData/BlackBoardAnimation/index.tsx","mock.ts","common/Admin/sections/grades/GradePredictor/ModelConfigurator/mocking.tsx","common/Admin/helpers.tsx","common/Admin/sections/grades/GradePredictor/ModelConfigurator/UploadData/index.tsx","common/Admin/sections/grades/GradePredictor/ModelConfigurator/LinkLiveData/index.tsx","common/Admin/sections/grades/GradePredictor/ModelConfigurator/TrainModel/index.tsx","common/Admin/sections/grades/GradePredictor/ModelConfigurator/Finish/index.tsx","common/Admin/sections/grades/GradePredictor/ModelConfigurator/index.tsx","common/Admin/sections/grades/GradePredictor/index.tsx"],"sourcesContent":["import React, { Component } from \"react\";\nimport {\n    AppstoreOutlined,\n    ControlOutlined,\n    CloudUploadOutlined,\n    // ClusterOutlined,\n    DotChartOutlined,\n    FundProjectionScreenOutlined,\n    LaptopOutlined,\n    TrophyOutlined,\n    NotificationOutlined,\n    DatabaseOutlined,\n    UserOutlined,\n    TeamOutlined\n} from \"@ant-design/icons\";\nimport { Menu } from \"antd\";\nimport { Link } from \"react-router-dom\";\nimport \"./style.scss\";\nimport { RootState } from \"../../../store\";\nimport { connect, ConnectedProps } from \"react-redux\";\n\nconst mapState = (state: RootState) => ({\n    user: state.user\n});\n\nconst connector = connect(mapState)\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\ntype Props = { menuKey: string } & PropsFromRedux;\n\nclass AdminMenu extends Component<Props> {\n\n    render(): React.ReactNode {\n        const { user } = this.props;\n\n        return (\n            <div id={\"adminMenu\"}>\n                <div id={\"user\"}>\n                    <h3>{user ? user.name : \"Loading profile...\"}</h3>\n                    <strong><UserOutlined /> Instructor</strong>\n                </div>\n\n                <Menu selectedKeys={[this.props.menuKey]}>\n                    <Menu.Item key={\"datamart\"} icon={<DatabaseOutlined />}>\n                        <Link to={'/admin'}>\n                            Datamart\n                        </Link>\n                    </Menu.Item>\n\n                    <Menu.Item key={\"tiles\"} icon={<AppstoreOutlined />}>\n                        <Link to={'/admin/tiles'}>\n                            Tiles\n                        </Link>\n                    </Menu.Item>\n\n                    <Menu.Item key={\"dashboard\"} icon={<LaptopOutlined />}>\n                        <Link to={'/admin/dashboard'}>\n                            Dashboard\n                        </Link>\n                    </Menu.Item>\n\n                    <Menu.Item key={\"studentOverview\"} icon={<TeamOutlined />}>\n                        <Link to={'/admin/student-overview'}>\n                            Student Overview\n                        </Link>\n                    </Menu.Item>\n                    <Menu.SubMenu key={\"submenu\"} icon={<TrophyOutlined />} title={\"Grades\"}>\n                        {/* TODO: completely remove oldpredictor from code */}\n                        {/* <Menu.Item key={\"gradePredictorOld\"} icon={<FundProjectionScreenOutlined />}>\n                            <Link to={'/admin/grade-predictor-old'}>\n                                Old Predictor\n                            </Link>\n                        </Menu.Item> */}\n                        <Menu.Item key={\"gradePredictor\"} icon={<FundProjectionScreenOutlined />}>\n                            <Link to={'/admin/grade-predictor'}>\n                                Predictor\n                            </Link>\n                        </Menu.Item>\n                        <Menu.Item key={\"gradeAnalyzer\"} icon={<DotChartOutlined />}>\n                            <Link to={'/admin/grade-analyzer'}>\n                                Analyzer\n                            </Link>\n                        </Menu.Item>\n                    </Menu.SubMenu>\n                    <Menu.Item key={\"dataWizard\"} icon={<CloudUploadOutlined />}>\n                        <Link to={'/admin/data-wizard'}>\n                            Data Wizard\n                        </Link>\n                    </Menu.Item>\n                    {/* <Menu.Item key={\"analytics\"} icon={<ClusterOutlined />}>\n                        <Link to={'/admin/analytics'}>\n                            Analytics\n                        </Link>\n                    </Menu.Item> */}\n                    <Menu.Item key={\"notificationCentre\"} icon={<NotificationOutlined />}>\n                        <Link to={'/admin/notification-centre'}>\n                            Notification Centre\n                        </Link>\n                    </Menu.Item>\n                    <Menu.Item key={\"settings\"} icon={<ControlOutlined />}>\n                        <Link to={'/admin/settings'}>\n                            Settings\n                        </Link>\n                    </Menu.Item>\n                </Menu>\n            </div>\n        )\n    }\n}\n\nexport default connector(AdminMenu);\n","import React, { Component } from \"react\";\nimport { withAdminRole } from \"../../hoc/withAdminRole\";\nimport AdminHeader from \"../../containers/AdminHeader\";\nimport { Redirect } from \"react-router-dom\";\nimport { Col, Row } from \"antd\";\nimport AdminMenu from \"./AdminMenu\";\nimport \"./style.scss\";\n\nclass Admin extends Component<any> {\n\n  render(): React.ReactNode {\n    const { isAdmin, menuKey } = this.props;\n    if (!isAdmin) return (<Redirect to={'/'} />);\n\n    return (\n      <div id={\"admin\"}>\n        <AdminHeader />\n        <Row>\n          <Col xs={4}>\n            <AdminMenu menuKey={menuKey} />\n          </Col>\n          <Col xs={20} id={'wrapper'} className={`${ menuKey !== \"settings\" && \"noOverflow\"}`}>\n            { this.props.children }\n          </Col>\n        </Row>\n      </div>\n    )\n  }\n}\n\nexport default withAdminRole(Admin);","import React, { Component } from \"react\";\nimport \"./style.scss\";\n\nexport default class BlackBoardAnimation extends Component {\n\n    state = {\n        offset: -2\n    }\n\n    componentDidMount(): void {\n        setTimeout(() => {\n            this.setState({ offset: 300 });\n        }, 500)\n    }\n\n    render(): React.ReactNode {\n        const { offset } = this.state;\n\n        return (\n            <div id={\"demoAnimation\"}>\n                <div id={\"spreadsheet\"}>\n                    <div id={\"wallpaper\"} />\n                    <svg width={400} height={300}>\n                        <rect x={0} y={0} width={400} height={300} fill={\"transparent\"} />\n                        <rect x={0} y={offset} width={400} height={3} fill={'rgba(255, 0, 0, 0.75)'} />\n                    </svg>\n                </div>\n            </div>\n        )\n    }\n}\n","import { debug } from \"./config/config\"\n\nexport class Mock {\n    enabled = true\n\n    constructor(enabled: boolean) {\n        this.enabled = enabled && debug()\n    }\n}\n","import {Mock} from \"../../../../../../mock\";\nimport { GradesDatasets } from \"../types\";\nimport { GradePredictionModel } from \"./interfaces\";\n\nexport class LinkLiveDataMock extends Mock {\n    mockGradesDatasetTilePairs = true;\n\n    gradesDatasetTilePairs =\n      this.enabled && this.mockGradesDatasetTilePairs\n        ? JSON.parse(\n            '{\"presentatie\":2,\"deeltoets3\":4,\"deeltoets2\":7,\"deeltoets1\":1}'\n          )\n        : {};\n  }\n\nexport class UploadDataMock extends Mock {\n    mockGradesDatasets = true\n    mockFinalGradesDatasetName = true\n\n    gradesDatasets = (this.enabled && this.mockGradesDatasets) ? JSON.parse('{\"presentatie\":{\"1\":7.9,\"2\":8.1,\"3\":8.3,\"4\":7,\"5\":7,\"6\":7,\"7\":8.3,\"8\":8.3,\"9\":9.3,\"10\":8.1,\"11\":8.9,\"12\":8.3,\"13\":9.3,\"14\":8.3,\"15\":8.9,\"16\":1,\"17\":9.6,\"18\":8.5,\"19\":8.3,\"20\":8.7,\"21\":9.3,\"22\":9.3,\"23\":8.3,\"24\":7.9,\"25\":6.6,\"26\":8.7,\"27\":8.9,\"28\":8.7,\"29\":7.6,\"30\":8.3,\"31\":8.3,\"32\":8.3,\"33\":8.9,\"34\":9.3,\"35\":8.9,\"36\":7.4,\"37\":7.4,\"38\":8.1,\"39\":8.3,\"40\":1,\"41\":9.3,\"42\":8.1,\"43\":9.6,\"44\":8.9,\"45\":1,\"46\":7.2,\"47\":9.3,\"48\":8.3,\"49\":7.4,\"50\":7.8,\"51\":9.3,\"52\":9.3,\"53\":8.3,\"54\":9.3,\"55\":7.6,\"56\":9.3,\"57\":8.3,\"58\":9.3,\"59\":8.3},\"eindcijfer\":{\"1\":1,\"2\":1,\"3\":7.2,\"4\":6.5,\"5\":6.1,\"6\":1,\"7\":1,\"8\":7.1,\"9\":7,\"10\":7.5,\"11\":8,\"12\":7.1,\"13\":7.2,\"14\":6,\"15\":8.8,\"16\":1,\"17\":7.1,\"18\":8.2,\"19\":7.7,\"20\":7.5,\"21\":7.9,\"22\":8.5,\"23\":6.3,\"24\":6.9,\"25\":5.3,\"26\":7.2,\"27\":6.7,\"28\":8.3,\"29\":6.1,\"30\":1,\"31\":7.9,\"32\":6.5,\"33\":7.1,\"34\":7.3,\"35\":7.3,\"36\":7.2,\"37\":7.5,\"38\":7.1,\"39\":6.3,\"40\":1,\"41\":8.7,\"42\":6.5,\"43\":7.1,\"44\":6.8,\"45\":1,\"46\":1,\"47\":7.8,\"48\":6.5,\"49\":6.9,\"50\":1,\"51\":7.6,\"52\":8,\"53\":6.3,\"54\":7.1,\"55\":5.7,\"56\":8.7,\"57\":8.8,\"58\":8.7,\"59\":6.4},\"deeltoets3\":{\"1\":3.1,\"2\":7.2,\"3\":6.7,\"4\":6.9,\"5\":5.3,\"6\":1,\"7\":5.7,\"8\":7,\"9\":6.7,\"10\":6.7,\"11\":7.3,\"12\":6,\"13\":7.3,\"14\":5.2,\"15\":8.8,\"16\":1,\"17\":7.3,\"18\":7.1,\"19\":7.2,\"20\":7.1,\"21\":7.6,\"22\":7.9,\"23\":6.7,\"24\":7.7,\"25\":5.8,\"26\":7.6,\"27\":6,\"28\":7.5,\"29\":6.4,\"30\":8.2,\"31\":8.3,\"32\":6.8,\"33\":6.6,\"34\":8.1,\"35\":6.2,\"36\":7.6,\"37\":6.7,\"38\":6.5,\"39\":6.6,\"40\":1,\"41\":8.3,\"42\":5.8,\"43\":8,\"44\":6.5,\"45\":1,\"46\":3.5,\"47\":7.1,\"48\":6.6,\"49\":6.5,\"50\":3.5,\"51\":7.2,\"52\":7.1,\"53\":6.3,\"54\":6.7,\"55\":6.8,\"56\":8.5,\"57\":8,\"58\":8.8,\"59\":6.4},\"deeltoets2\":{\"1\":1,\"2\":1,\"3\":7,\"4\":5.4,\"5\":6.1,\"6\":4.7,\"7\":1,\"8\":5.5,\"9\":5.9,\"10\":7.1,\"11\":8,\"12\":8,\"13\":6.6,\"14\":5.1,\"15\":8.3,\"16\":4.5,\"17\":6.9,\"18\":9.1,\"19\":7.2,\"20\":7.5,\"21\":7,\"22\":8,\"23\":6.5,\"24\":5.5,\"25\":5.3,\"26\":6.5,\"27\":7.3,\"28\":8.2,\"29\":5.5,\"30\":1,\"31\":7.3,\"32\":6.5,\"33\":6.5,\"34\":5.8,\"35\":7.4,\"36\":6.8,\"37\":8.1,\"38\":6.6,\"39\":6,\"40\":1,\"41\":8.6,\"42\":5.1,\"43\":5.8,\"44\":4.9,\"45\":4.1,\"46\":4.7,\"47\":7.5,\"48\":5.3,\"49\":6.8,\"50\":1,\"51\":7.3,\"52\":7.5,\"53\":5.8,\"54\":6.6,\"55\":4.9,\"56\":8.9,\"57\":9.1,\"58\":7.8,\"59\":5},\"deeltoets1\":{\"1\":1,\"2\":6.3,\"3\":6.9,\"4\":7.5,\"5\":7.2,\"6\":1,\"7\":4.7,\"8\":9.4,\"9\":8.1,\"10\":9.4,\"11\":8.8,\"12\":6.6,\"13\":6.6,\"14\":7.5,\"15\":9.4,\"16\":6.6,\"17\":5.9,\"18\":8.1,\"19\":9.1,\"20\":7.5,\"21\":9.1,\"22\":10,\"23\":4.7,\"24\":7.8,\"25\":4.1,\"26\":7.5,\"27\":5.9,\"28\":9.4,\"29\":5.6,\"30\":9.7,\"31\":8.1,\"32\":5,\"33\":7.8,\"34\":7.2,\"35\":8.1,\"36\":7.2,\"37\":8.4,\"38\":8.4,\"39\":5.3,\"40\":6.3,\"41\":9.1,\"42\":9.4,\"43\":6.6,\"44\":9.1,\"45\":5.6,\"46\":4.7,\"47\":8.8,\"48\":7.2,\"49\":7.8,\"50\":7.5,\"51\":7.8,\"52\":9.7,\"53\":5.9,\"54\":7.2,\"55\":4.1,\"56\":8.4,\"57\":9.7,\"58\":9.7,\"59\":7.8}}') as GradesDatasets : {}\n    finalGradesDatasetName = (this.enabled && this.mockFinalGradesDatasetName) ? \"eindcijfer\" : \"\"\n}\n\n  export class TrainModelMock extends Mock {\n    mockModel = true;\n\n    model: GradePredictionModel | null =\n      (this.enabled && this.mockModel)\n        ? {\n            \"intercept\": 0,\n            \"parameters\": [\n              {\n                \"parameterID\": 2,\n                \"weight\": -0.20628158982515943,\n              },\n              {\n                \"parameterID\": 4,\n                \"weight\": 0.5987301721162606,\n              },\n              {\n                \"parameterID\": 7,\n                \"weight\": 0.7351437498019004,\n              },\n              {\n                \"parameterID\": 1,\n                \"weight\": -0.05163026454991204,\n              },\n            ],\n          }\n        : null;\n\n    modelWithMetadata =\n      (this.enabled && this.mockModel)\n        ? {\n            \"model\": {\n              \"name\": \"multivariateLinearRegression\",\n              \"weights\": [\n                [-0.20628158982515943],\n                [0.5987301721162606],\n                [0.7351437498019004],\n                [-0.05163026454991204],\n              ],\n              \"inputs\": 4,\n              \"outputs\": 1,\n              \"intercept\": false,\n              \"summary\": {\n                \"regressionStatistics\": {\n                  \"standardError\": 0.9270044844591805,\n                  \"observations\": 1,\n                },\n                \"variables\": [\n                  {\n                    \"label\": \"X Variable 1\",\n                    \"coefficients\": [-0.20628158982515943],\n                    \"standardError\": 0.08731014539207609,\n                    \"tStat\": -2.3626302407220674,\n                  },\n                  {\n                    \"label\": \"X Variable 2\",\n                    \"coefficients\": [0.5987301721162606],\n                    \"standardError\": 0.12416150926563964,\n                    \"tStat\": 4.822188258321637,\n                  },\n                  {\n                    \"label\": \"X Variable 3\",\n                    \"coefficients\": [0.7351437498019004],\n                    \"standardError\": 0.07154733424292914,\n                    \"tStat\": 10.274928585121298,\n                  },\n                  {\n                    \"label\": \"Intercept\",\n                    \"coefficients\": [-0.05163026454991204],\n                    \"standardError\": 0.06950154171021325,\n                    \"tStat\": -0.7428650254289967,\n                  },\n                ],\n              },\n            },\n            \"modelColumns\": [2, 4, 7, 1],\n          }\n        : null;\n  }\n\nexport class ModelConfiguratorMock extends Mock {\n    mockCurrentStep = true;\n\n    currentStep = this.enabled && this.mockCurrentStep ? 1 : 1;\n\n    gradesDatasets = new UploadDataMock(this.enabled).gradesDatasets;\n    finalGradesDatasetName = new UploadDataMock(this.enabled)\n      .finalGradesDatasetName;\n    gradesDatasetTilePairs = new LinkLiveDataMock(this.enabled)\n      .gradesDatasetTilePairs;\n    model = new TrainModelMock(this.enabled).model;\n  }","export const studentIdStrings = [\"studentloginid\", \"studentid\", \"student\", \"id\"]","import \"./style.scss\"\n\nimport React, { Component } from \"react\"\nimport { Alert, Col, Divider, Row, Button, Select } from \"antd\";\nimport { filenameForFile, headerForCsvFile, rowsForCsvFile } from \"ztypescript\"\nimport BlackBoardAnimation from \"./BlackBoardAnimation\";\n\nimport { StudentGrades, GradesDatasets } from \"../../types\"\nimport { IStep } from \"../interfaces\"\nimport { UploadDataMock } from \"../mocking\";\nimport  { studentIdStrings } from \"../../../../../helpers\"\n\nconst { Option } = Select;\n\ninterface IProps {\n    parentSetGradesDatasets: Function\n    parentSetFinalGradesDatasetName: Function,\n}\n\ninterface IState {\n    gradesDatasets: GradesDatasets,\n    finalGradesDatasetName: string,\n    inputErrorFinalGradesDatasetName: boolean,\n}\n\nexport default class UploadData extends Component<IProps, IState> implements IStep {\n    mock = new UploadDataMock(/* enable? */ true)\n\n    state = {\n        gradesDatasets: this.mock.gradesDatasets,\n        finalGradesDatasetName: this.mock.finalGradesDatasetName,\n        inputErrorFinalGradesDatasetName: false,\n    }\n\n    componentDidMount() {\n        if (this.mock.enabled) {\n            if (this.mock.mockGradesDatasets)\n                this.onGradesDatasetsLoaded()\n            if (this.mock.mockFinalGradesDatasetName)\n                this.onFinalGradesDatasetNameChosen()\n        }\n    }\n\n    onGradesDatasetsLoaded() {\n        const { parentSetGradesDatasets } = this.props\n        const { gradesDatasets } = this.state\n\n        this.ensureGradeDatasetsAreComplete()\n        this.enforceMinimumMaximumGrade()\n\n        parentSetGradesDatasets(gradesDatasets)\n    }\n\n    // FIXME remove optional parameter v, it is used as a hack\n    // because setState does not actually set the state on time\n    // (see the onSelect usage of this method)\n    onFinalGradesDatasetNameChosen(v: string | null = null) {\n        const { finalGradesDatasetName } = this.state;\n        this.props.parentSetFinalGradesDatasetName(v ? v : finalGradesDatasetName);\n    }\n\n    async csvFilesChosen(event: React.ChangeEvent<HTMLInputElement>) {\n        const files = event.target.files\n        if (!files)\n        return\n\n        let gradesDatasets: GradesDatasets = {}\n\n        for (let i = 0; i < files.length; i++) {\n            let header = await headerForCsvFile(files[i])\n\n            console.log(header);\n\n            if (!header)\n                continue\n\n            let [colA, colB] = header\n            // TODO: add option for: studentid, exersizename1, exercisename2, ...\n            if (!studentIdStrings.includes(colA.toLowerCase()) || colB.toLowerCase() !== \"grade\"){\n                continue\n            }\n            let datesetName = filenameForFile(files[i])\n            let studentGrade = await this.readStudentGradesFromFile(files[i])\n            gradesDatasets[datesetName] = studentGrade\n        }\n\n        this.setState({ gradesDatasets: {...this.state.gradesDatasets, ...gradesDatasets} })\n\n        this.onGradesDatasetsLoaded()\n    }\n\n    async readStudentGradesFromFile(file: File): Promise<StudentGrades> {\n        const rows: Array<Array<string>> = await rowsForCsvFile(file)\n\n        let studentGrades: StudentGrades = {}\n        rows.forEach(row => {\n            let [studentID, grade] = row.map(c => Number(c.replace(',', '.')))\n            studentGrades[studentID] = grade\n        })\n        // TODO: Should probably change StudentGrades to a Map type as the 0 key is being set to NaN automatically.\n        if (!studentGrades[0]) {\n            delete studentGrades[0]\n        }\n        return studentGrades\n    }\n\n    ensureGradeDatasetsAreComplete() {\n        const { gradesDatasets } = this.state\n\n        let studentIDs = Object.values(gradesDatasets)\n        .flatMap(Object.keys) // get all student IDs\n        .map(x => parseInt(x))\n        .slice(0) // deduplicate\n\n        Object.keys(gradesDatasets)\n            .forEach(k => {\n                studentIDs\n                .filter(sID => !(sID in gradesDatasets[k]))\n                .forEach(sID => gradesDatasets[k][sID] = 1)\n            })\n\n        this.setState({ gradesDatasets: gradesDatasets })\n    }\n\n    enforceMinimumMaximumGrade() {\n        const { gradesDatasets } = this.state\n\n        let wGradesDatasets = gradesDatasets as GradesDatasets\n\n        Object.keys(wGradesDatasets)\n            .forEach(k => {\n                Object.keys(wGradesDatasets[k])\n                    .map(x => parseInt(x))\n                    .forEach(sID => {\n                        wGradesDatasets[k][sID] = Math.max(1, wGradesDatasets[k][sID])\n                        wGradesDatasets[k][sID] = Math.min(10, wGradesDatasets[k][sID])\n                    })\n            })\n\n        this.setState({ gradesDatasets: wGradesDatasets })\n    }\n\n    validate(): boolean {\n        let { finalGradesDatasetName } = this.state\n\n        let wValid = true\n        if (finalGradesDatasetName === \"\") {\n            wValid = false\n            this.setState({ inputErrorFinalGradesDatasetName: true })\n        }\n        return wValid\n    }\n\n    isStepCompleted = this.validate\n\n    render(): React.ReactNode {\n        return (\n            <div>\n                <Row>\n                    <Col xs={24} md={14}>\n                        <Row>\n                            <Col xs={24} md={24}>\n                                <h2>Provide student grades from a past school year</h2>\n\n                                <Divider />\n\n                                <p>This configuration screen lets you train a model that once trained,\n                                   will be able to roughly predict a student's final grade.\n                                   The model should be trained on the results of a past academic year.</p>\n                                <p>Please provide this data through one .csv file per graded assignment (e.g. mini-test, quiz, etc.);\n                                   The files must contain the following two columns: \"studentID\" and \"grade\".\n                                   Furthermore, please take note of which file contains the final grades.</p>\n                                <p>You can select multiple files at once.</p>\n\n                                <Alert message=\"Student data is only ever kept on your local device, and never uploaded to IuideME. Once the model is trained, all identifying information is erased.\" />\n\n                            </Col>\n                        </Row>\n\n                        <Row>\n                            <Col xs={24} md={12}>\n                                <div id=\"filePickerInputContainer\">\n                                    <input id=\"filePickerInput\"\n                                        type=\"file\"\n                                        accept=\".csv\"\n                                        multiple\n                                        onChange={this.csvFilesChosen.bind(this)} />\n                                </div>\n\n                                <ul id=\"uploadedFilesUl\">\n                                    {Object.keys(this.state.gradesDatasets)\n                                        .map(datasetName =>\n                                            <li key={datasetName}>\n                                                <Button\n                                                    className=\"liDeleteBtn\"\n                                                    size=\"small\"\n                                                    onClick={() => {\n                                                        const { gradesDatasets } = this.state\n                                                        delete gradesDatasets[datasetName]\n                                                        this.setState({\n                                                            gradesDatasets: gradesDatasets\n                                                        })\n                                                    }}>\n                                                    x\n                                    </Button>\n                                                {datasetName}\n                                            </li>\n                                        )}\n                                </ul>\n\n                                <Button id=\"uploadButton\"\n                                    type=\"primary\"\n                                    size=\"large\"\n                                    onClick={() =>\n                                        document\n                                            .getElementById(\"filePickerInput\")\n                                            ?.click()\n                                    }>\n                                    Upload Data\n                            </Button>\n                            </Col>\n\n                            <Col xs={24} md={12}>\n                                <Select\n                                    className={\"finalGradesDSSelect \" + (this.state.inputErrorFinalGradesDatasetName && \" error \")}\n                                    size=\"large\"\n                                    onChange={(v: string) => {\n                                        this.setState({\n                                            finalGradesDatasetName: v,\n                                            inputErrorFinalGradesDatasetName: false\n                                        });\n                                        // FIXME why does setState not set the state on time\n                                        // (aka don't pass v explicitly)\n                                        this.onFinalGradesDatasetNameChosen(v);\n                                    }}\n                                    placeholder=\"Dataset with final grades...\">\n                                    {Object.keys(this.state.gradesDatasets)\n                                        .map(datasetName =>\n                                            <Option key={datasetName} value={datasetName}>\n                                                {datasetName}\n                                            </Option>\n                                        )}\n                                </Select>\n                            </Col>\n                        </Row>\n\n                    </Col>\n                    <Col xs={0} md={10}>\n                        <BlackBoardAnimation />\n                    </Col>\n                </Row>\n            </div>\n        )\n    }\n}\n","import \"./style.scss\";\n\nimport React, { Component } from \"react\";\nimport { Alert, Row, Col, Select, Divider } from \"antd\";\n\nimport TileController from \"../../../../../../../api/controllers/tile\";\nimport { Tile, TileEntry } from \"../../../../../../../models/app/Tile\";\n\nimport { GradesDatasets } from \"../../types\";\nimport { IStep } from \"../interfaces\";\nimport { LinkLiveDataMock } from \"../mocking\";\n\nconst { Option } = Select;\n\ninterface IProps {\n  gradesDatasets: GradesDatasets;\n  finalGradesDatasetName: string;\n\n  parentSetGradesDatasetTilePairs: Function;\n}\n\ninterface IState {\n  tiles: Tile[];\n  entries: TileEntry[];\n  gradesDatasetTilePairs: { [name: string]: number };\n  inputError: boolean;\n}\n\nexport default class LinkLiveData\n  extends Component<IProps, IState>\n  implements IStep\n{\n  mock = new LinkLiveDataMock(/* enable? */ true);\n\n  state = {\n    tiles: [],\n    entries: [], // TODO: WIP\n    gradesDatasetTilePairs: this.mock.gradesDatasetTilePairs,\n    inputError: false,\n  };\n\n  componentDidMount() {\n    TileController.getTiles().then(async (tiles) => {\n      tiles = tiles.filter((t) => t.content === \"ENTRIES\");\n      this.setState({ tiles: tiles });\n    });\n\n    TileController.getEntries().then(async (entries) => {\n      this.setState({ entries: entries});\n    })\n  }\n\n  validate(): boolean {\n    let { gradesDatasets }: IProps = this.props;\n    let { gradesDatasetTilePairs }: IState = this.state;\n\n    let wValid = true;\n    if (\n      Object.keys(gradesDatasetTilePairs).length !==\n      Object.keys(gradesDatasets).length - 1\n    ) {\n      wValid = false;\n      this.setState({ inputError: true });\n    }\n    return wValid;\n  }\n\n  isStepCompleted = this.validate;\n\n  render(): React.ReactNode {\n    return (\n      <div>\n        <Row>\n          <Col xs={24} md={24}>\n            <h2>Link the uploaded grades to tiles (live data sources)</h2>\n\n            <Divider />\n          </Col>\n        </Row>\n\n        <Row>\n          <Col xs={24} md={14}>\n            {this.state.inputError && (\n              <Alert\n                message=\"Not all fields have been filled\"\n                description=\"Please assign a live data source to every uploaded dataset.\"\n                type=\"error\"\n              />\n            )}\n\n            {Object.keys(this.props.gradesDatasets)\n              .filter(\n                (databaseName) =>\n                  databaseName !== this.props.finalGradesDatasetName\n              )\n              .map((datasetName) => (\n                <Row key={datasetName} className=\"select-container\">\n                  <Col xs={24} md={24}>\n                    <h3 className=\"select-title\">{datasetName}</h3>\n                  </Col>\n                  <Col xs={24} md={24}>\n                    <Select\n                      size=\"middle\"\n                      placeholder=\"Choose a data source\"\n                      onChange={(_, o) => {\n\n                        let { gradesDatasetTilePairs }: IState = this.state;\n                        gradesDatasetTilePairs[datasetName] = (o as any).key as number;\n                        this.setState({\n                          gradesDatasetTilePairs: gradesDatasetTilePairs,\n                        });\n\n                        let { parentSetGradesDatasetTilePairs } = this.props;\n                        parentSetGradesDatasetTilePairs(gradesDatasetTilePairs);\n                      }}\n                    >\n                      {this.state.tiles.map((tile: Tile) => (\n                        <Option key={tile.id} value={tile.title}>\n                          {tile.title}\n                        </Option>\n                      ))}\n                    </Select>\n                  </Col>\n                </Row>\n              ))}\n          </Col>\n\n          <Col xs={24} md={10}>\n            <Row>\n              <Col xs={24} md={24}>\n                <p>\n                  This configuration screen lets you train a model that once\n                  trained, will be able to roughly predict a student's final\n                  grade. The model should be trained on the results of a past\n                  academic year.\n                </p>\n                <p>\n                  Please provide this data through one .csv file per graded\n                  assignment (e.g. mini-test, quiz, etc.); The files must\n                  contain the following two columns: \"studentID\" and \"grade\".\n                  Furthermore, please take note of which file contains the final\n                  grades.\n                </p>\n                <p>You can select multiple files at once.</p>\n              </Col>\n            </Row>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n","import \"./style.scss\";\n\nimport React, { Component } from \"react\";\nimport MLR from \"ml-regression-multivariate-linear\";\nimport { Button, Row, Col, Divider, InputNumber } from \"antd\";\n\nimport TileController from \"../../../../../../../api/controllers/tile\";\nimport { Tile } from \"../../../../../../../models/app/Tile\";\n\nimport { StudentGrades, GradesDatasets } from \"../../types\";\nimport { GradePredictionModel, IStep } from \"../interfaces\";\nimport {TrainModelMock} from \"../mocking\";\n\ninterface IProps {\n  gradesDatasets: GradesDatasets;\n  gradesDatasetTilePairs: { [name: string]: number };\n  finalGradesDatasetName: string;\n\n  parentSetModel: Function;\n}\n\ninterface IState {\n  gradesDatasets: GradesDatasets;\n  model: GradePredictionModel | null;\n  modelWithMetadata: { model: any; modelColumns: number[] } | null;\n  modelTestingValues: Map<number, number>//{ [tileID: number]: number };\n  predictedGrade: number;\n  tiles: Tile[];\n}\n\nexport default class TrainModel\n  extends Component<IProps, IState>\n  implements IStep\n{\n  mock = new TrainModelMock(/* enable? */ true);\n\n  state = {\n    gradesDatasets: {},\n    model: this.mock.model,\n    modelWithMetadata: this.mock.modelWithMetadata,\n    modelTestingValues: new Map<number, number>(),\n    predictedGrade: 0,\n    tiles: [],\n  };\n\n  componentDidMount() {\n    if (this.mock.enabled) {\n      if (this.mock.mockModel) this.onModelTrained();\n    }\n\n    // TODO: previous step should load tiles and keep them in the parent (modelconfigurator), or probably better: gradesdatasettile pairs should contain a tile (/entry) object\n    TileController.getTiles().then(async (tiles) => {\n      tiles = tiles.filter((t) => t.content === \"ENTRIES\");\n      this.setState({ tiles: tiles });\n    });\n\n    this.recalculateTestPrediction();\n  }\n\n  onModelTrained() {\n    const { parentSetModel } = this.props;\n    const { model } = this.state;\n\n    if (!model) return;\n\n    parentSetModel(model!);\n  }\n\n  ensureFinalGradeExists() {\n    const { gradesDatasets, finalGradesDatasetName } = this.props;\n\n    let fgStudentIDs = Object.entries(gradesDatasets)\n      .filter((x) => x[0] === finalGradesDatasetName) // select students with final grade\n      .map((x) => x[1] as StudentGrades)\n      .flatMap(Object.keys) // get all student IDs\n      .map((x) => parseInt(x))\n      .slice(0); // deduplicate\n\n    Object.keys(gradesDatasets).forEach((k) => {\n      Object.keys(gradesDatasets[k])\n        .map((x) => parseInt(x))\n        .filter((sID) => !(sID in fgStudentIDs))\n        .forEach((sID) => {\n          delete gradesDatasets[k][sID];\n        });\n    });\n\n    this.setState({ gradesDatasets: gradesDatasets });\n  }\n\n  trainModels() {\n    const { gradesDatasets, finalGradesDatasetName, gradesDatasetTilePairs } =\n      this.props;\n\n    // TODO: somehow this is deleting the entirety of gradesDatasets\n    // housekeeping on the datasets to ensure clean data\n    // this.ensureFinalGradeExists();\n\n    // wOutputs :: [[sID, finalGrade]] (per student)\n    const wOutputs = Object.keys(gradesDatasets[finalGradesDatasetName])\n      .map((sID) => parseInt(sID))\n      .map((sID) => [sID, gradesDatasets[finalGradesDatasetName][sID]]);\n\n    // dsNames :: [\"quizA\", \"quizB\", ..., \"quizN\"]\n    const dsNames = Object.keys(gradesDatasets).filter(\n      (dsName) => dsName !== finalGradesDatasetName\n    );\n\n    // wInputs :: [[sID, quizAGrade, quizBGrade, ..., quizNGrade]] (per student)\n    const wInputs = Object.values(wOutputs)\n      .map((wOutput) => wOutput[0]) // results in a list of sID's\n      .map((sID) => [\n        sID,\n        ...Object.values(dsNames).map((dsName) => gradesDatasets[dsName][sID]),\n      ]);\n\n    // outputs :: [finalGrade] (per student)\n    // outputs is sorted by studentID\n    const outputs = wOutputs\n      .sort((a, b) => a[0] - b[0]) // sort by sID (first element)\n      .map((r) => r.slice(1)); // drop sID\n\n    // inputs :: [[quizAGrade, quizBGrade, ..., quizNGrade]] (per student)\n    // inputs is sorted by studentID\n    const inputs = wInputs\n      .sort((a, b) => a[0] - b[0]) // sort by sID (first element)\n      .map((r) => r.slice(1)); // drop sID\n\n    // use inputs to predict outputs (quiz grades -> final grade)\n    // each student is a datapoint\n    const mlr = new MLR(inputs, outputs, { intercept: false });\n    const mlrModel: any = mlr.toJSON();\n    const weights: number[] = mlrModel.weights.map((w: number[]) => w[0]);\n    const modelParameterIDs = dsNames.map(\n      (dsName) => gradesDatasetTilePairs[dsName]\n    );\n\n    const model: GradePredictionModel = {\n      intercept: 0, // not using this data, but accounting for it in the datamodel\n      parameters: modelParameterIDs.map((id: number, i: number) => {\n        return {\n          parameterID: id,\n          weight: weights[i],\n        };\n      }),\n    };\n\n    const modelWithMetadata = {\n      model: mlrModel,\n      modelColumns: dsNames.map((dsName) => gradesDatasetTilePairs[dsName]),\n    };\n\n    this.setState({\n      model: model,\n      modelWithMetadata: modelWithMetadata,\n    }, () => {\n      this.recalculateTestPrediction();\n      this.onModelTrained();\n    });\n\n  }\n\n  recalculateTestPrediction() {\n    let { modelWithMetadata, modelTestingValues }: IState = this.state;\n    if (!modelWithMetadata) return;\n\n    let _modelWithMetadata: {model: any, modelColumns: number[]} = modelWithMetadata;\n\n    if (modelTestingValues.size !== _modelWithMetadata.model.weights.length) {\n      _modelWithMetadata.modelColumns.forEach(\n        (tID) => (modelTestingValues.set(tID, 5))\n      );\n\n      this.setState({\n        modelTestingValues: modelTestingValues,\n      });\n    }\n\n    const mlr = MLR.load(_modelWithMetadata!.model);\n\n    // maintain same order as when the model was trained\n    const inputs: number[] = [];\n    let tildID, entry;\n    for (let i = 0; i < _modelWithMetadata!.modelColumns.length; i++) {\n      tildID = _modelWithMetadata!.modelColumns[i]\n      entry = modelTestingValues.get(tildID);\n      if (entry) {\n        inputs.push(entry);\n      }\n    }\n\n    let grade = mlr.predict(inputs)[0]\n\n    this.setState({\n      predictedGrade: grade,\n    });\n  }\n\n  getTileByID(id: number): Tile | null {\n    const { tiles }: IState = this.state;\n    const tile = tiles.find((t: Tile) => t.id === id);\n    return tile ? tile : null;\n  }\n\n  validate(): boolean {\n    const { model } = this.state;\n    return model !== null;\n  }\n\n  isStepCompleted = this.validate;\n\n  render(): React.ReactNode {\n\n    let _modelWithMetadata: {model: any, modelColumns: number[]} = this.state.modelWithMetadata!;\n\n    return (\n      <div>\n        <Row>\n          <Col xs={24} md={24}>\n            <h2>Train the grade predicting model</h2>\n\n            <Divider />\n          </Col>\n        </Row>\n\n        <Row>\n          <Col xs={24} md={14}>\n            {this.state.model !== null && (\n              <div>\n                <h3>Success!</h3>\n                <p>\n                  The model has been trained successfully. You can preview it\n                  below by inputting sample values.\n                </p>\n\n                {this.state.modelWithMetadata &&\n                  _modelWithMetadata.modelColumns.map(\n                    (tileID: number, index: number) => {\n                      const { modelWithMetadata }: IState = this.state;\n                      const weight = modelWithMetadata!.model.weights[index][0];\n                      return (\n                        <div key={weight} className=\"grade-input-row\">\n                          <Row>\n                            <Col xs={24} md={10}>\n                              {this.getTileByID(tileID) ? this.getTileByID(tileID)!.title : null} (weight:{\" \"}\n                              {weight.toFixed(1)})\n                            </Col>\n                            <Col xs={24} md={5}>\n                              <InputNumber\n                                min={0}\n                                max={10}\n                                defaultValue={5}\n                                onChange={(v) => {\n                                  if (!v) {return}\n\n                                  let { modelTestingValues }: IState = this.state;\n\n                                  modelTestingValues.set(tileID, v);\n                                  this.setState({\n                                    modelTestingValues: modelTestingValues,\n                                  }, () => this.recalculateTestPrediction());\n                                }}\n                              />\n                            </Col>\n                            <Col xs={24} md={9}></Col>\n                          </Row>\n                        </div>\n                      );\n                    }\n                  )}\n\n                {this.state.predictedGrade && (\n                  <Row>\n                    <h4>\n                      Predicted grade: {this.state.predictedGrade.toFixed(1)}\n                    </h4>\n                  </Row>\n                )}\n              </div>\n            )}\n\n            {this.state.model == null && (\n              <div style={{ textAlign: \"center\", padding: \"20px 0\" }}>\n                <div\n                  style={{\n                    background:\n                      \"url(/assets/img/illustrations/train_models.svg)\",\n                    marginBottom: 30,\n                    height: 200,\n                    width: \"100%\",\n                    backgroundSize: \"contain\",\n                    backgroundPosition: \"center\",\n                    backgroundRepeat: \"no-repeat\",\n                  }}\n                />\n                <Button\n                  type={\"primary\"}\n                  size={\"large\"}\n                  onClick={() => this.trainModels()}\n                >\n                  Train Model\n                </Button>\n              </div>\n            )}\n          </Col>\n\n          <Col xs={24} md={10}>\n            <Row>\n              <Col xs={24} md={24}>\n                <p>\n                  The model will be trained on your machine using linear\n                  regression.\n                </p>\n                <p>This won't take long.</p>\n              </Col>\n            </Row>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\"\nimport { Result } from \"antd\";\nimport DataMartController from \"../../../../../../../api/controllers/datamart\";\n\nimport { GradePredictionModel, IStep } from \"../interfaces\";\n\ninterface IProps {\n    model: GradePredictionModel,\n}\n\ninterface IState {\n}\n\nexport default class Finish extends Component<IProps, IState> implements IStep {\n\n    state = {\n    }\n\n    async componentDidMount() {\n\n        const newModels = await DataMartController.getModels();\n        console.log(\"newModels\", newModels)\n        this.uploadModel()\n    }\n\n    async uploadModel() {\n        const { model }: IProps = this.props\n\n        await DataMartController.uploadModel(model)\n    }\n\n    validate(): boolean {\n        return true\n    }\n\n    isStepCompleted = this.validate\n\n    render(): React.ReactNode {\n        return (\n            <div id={\"uploadOverview\"}>\n                <Result\n                    status=\"success\"\n                    title=\"The model is ready to use\"\n                />\n            </div>\n        )\n    }\n}\n","import \"./style.scss\";\n\nimport React, { Component, RefObject } from \"react\";\nimport { Button, Steps } from \"antd\";\n\nimport UploadData from \"./UploadData\";\nimport LinkLiveData from \"./LinkLiveData\";\nimport TrainModel from \"./TrainModel\";\nimport Finish from \"./Finish\";\nimport { ModelConfiguratorMock } from \"./mocking\";\n\nimport { GradesDatasets } from \"../types\";\nimport { GradePredictionModel, IStep } from \"./interfaces\";\nimport { Link } from \"react-router-dom\";\n\nconst { createRef } = React;\n\ninterface IProps {}\n\ninterface IState {\n  currentStep: number;\n  gradesDatasets: GradesDatasets;\n  finalGradesDatasetName: string;\n  gradesDatasetTilePairs: { [name: string]: number };\n  model: GradePredictionModel | null;\n  childRef: RefObject<any>;\n}\n\nexport default class ModelConfigurator extends Component<IProps, IState> {\n  mock = new ModelConfiguratorMock(/* enable? */ true);\n\n  steps = [\"Upload historic data\", \"Link to live data\", \"Train model\", \"Done!\"];\n\n  state = {\n    currentStep: this.mock.currentStep,\n    gradesDatasets: this.mock.gradesDatasets,\n    finalGradesDatasetName: this.mock.finalGradesDatasetName,\n    gradesDatasetTilePairs: this.mock.gradesDatasetTilePairs,\n    model: this.mock.model,\n    childRef: createRef<any>(),\n  };\n\n  componentDidMount() {}\n\n  renderStep() {\n    const {\n      currentStep,\n      gradesDatasets,\n      finalGradesDatasetName,\n      gradesDatasetTilePairs,\n      model,\n      childRef,\n    } = this.state;\n\n    // console.log(\"model\" model);\n    switch (currentStep) {\n      default:\n      case 1:\n        return (\n          <UploadData\n            ref={childRef}\n            parentSetGradesDatasets={(gds: GradesDatasets) =>\n              this.setState({ gradesDatasets: gds })\n            }\n            parentSetFinalGradesDatasetName={(name: string) =>\n              this.setState({ finalGradesDatasetName: name })\n            }\n          />\n        );\n\n      case 2:\n        return (\n          <LinkLiveData\n            ref={childRef}\n            gradesDatasets={gradesDatasets}\n            finalGradesDatasetName={finalGradesDatasetName}\n            parentSetGradesDatasetTilePairs={(pairs: {\n              [name: string]: number;\n            }) => this.setState({ gradesDatasetTilePairs: pairs })}\n          />\n        );\n\n      case 3:\n        return (\n          <TrainModel\n            ref={childRef}\n            gradesDatasets={gradesDatasets}\n            gradesDatasetTilePairs={gradesDatasetTilePairs}\n            finalGradesDatasetName={finalGradesDatasetName}\n            parentSetModel={(model: GradePredictionModel) =>\n              this.setState({ model: model })\n            }\n          />\n        );\n\n      case 4:\n        return <Finish ref={childRef} model={model!} />;\n    }\n  }\n\n  nextStep = () => {\n    const { currentStep, childRef } = this.state;\n    let w = childRef! as RefObject<IStep>;\n    if (!w.current?.isStepCompleted()) return;\n    this.setState({\n      currentStep: Math.min(this.steps.length, currentStep + 1),\n    });\n  };\n\n  previousStep = () => {\n    const { currentStep } = this.state;\n    this.setState({\n      currentStep: Math.max(1, currentStep - 1),\n    });\n  };\n\n  render(): React.ReactNode {\n    const { currentStep } = this.state;\n\n    return (\n      <div>\n        <Steps current={currentStep - 1}>\n          {this.steps.map((s) => (\n            <Steps.Step key={s} title={s} />\n          ))}\n        </Steps>\n        <div className=\"stepsContent\">{this.renderStep()}</div>\n        <div className=\"stepsAction\">\n          {currentStep > 1 && (\n            <Button className=\"previousBtn\" onClick={this.previousStep}>\n              Previous\n            </Button>\n          )}\n          {currentStep === this.steps.length && (\n            <Link to= \"/admin\">\n              <Button className=\"doneBtn\" type=\"primary\">\n                Finish\n              </Button>\n            </Link>\n          )}\n          {currentStep < this.steps.length && (\n            <Button className=\"nextBtn\" type=\"primary\" onClick={this.nextStep}>\n              Next\n            </Button>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\"\nimport { Divider } from \"antd\"\nimport Admin from \"../../../index\"\nimport Loading from \"../../../../../components/utils/Loading\"\n\nimport ModelConfigurator from \"./ModelConfigurator\"\n\ninterface IProps {\n\n}\n\ninterface IState {\n    loaded: boolean\n}\n\nexport default class GradePredictor extends Component<IProps, IState> {\n\n    state = {\n        loaded: false,\n    }\n\n    componentDidMount(): void {\n        this.setState({ loaded: true })\n    }\n\n    render(): React.ReactNode {\n        const { loaded } = this.state;\n\n        if (!loaded)\n            return <Loading small={false} />;\n\n        return <Admin menuKey={\"gradePredictor\"}>\n            <h1>Grade Predictor</h1>\n\n            <Divider />\n\n            <ModelConfigurator />\n        </Admin>\n    }\n}\n"],"names":["connector","connect","state","user","AdminMenu","_Component","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","this","props","_jsxs","id","children","_jsx","name","UserOutlined","Menu","selectedKeys","menuKey","icon","DatabaseOutlined","Link","to","AppstoreOutlined","LaptopOutlined","TeamOutlined","TrophyOutlined","title","FundProjectionScreenOutlined","DotChartOutlined","CloudUploadOutlined","NotificationOutlined","ControlOutlined","Component","Admin","_this$props","isAdmin","AdminHeader","Row","Col","xs","className","concat","Redirect","withAdminRole","BlackBoardAnimation","_this","_len","length","args","Array","_key","call","offset","_this2","setTimeout","setState","width","height","x","y","fill","Mock","enabled","debug","LinkLiveDataMock","_Mock","mockGradesDatasetTilePairs","gradesDatasetTilePairs","JSON","parse","UploadDataMock","_Mock2","_super2","_len2","_key2","mockGradesDatasets","mockFinalGradesDatasetName","gradesDatasets","finalGradesDatasetName","TrainModelMock","_Mock3","_super3","_this3","_len3","_key3","mockModel","model","modelWithMetadata","ModelConfiguratorMock","_Mock4","_super4","_this4","_len4","_key4","mockCurrentStep","currentStep","studentIdStrings","Option","Select","UploadData","mock","inputErrorFinalGradesDatasetName","isStepCompleted","validate","onGradesDatasetsLoaded","onFinalGradesDatasetNameChosen","parentSetGradesDatasets","ensureGradeDatasetsAreComplete","enforceMinimumMaximumGrade","v","undefined","parentSetFinalGradesDatasetName","_csvFilesChosen","_asyncToGenerator","_regeneratorRuntime","mark","_callee","event","files","i","header","_header","colA","colB","datesetName","studentGrade","wrap","_context","prev","next","target","abrupt","headerForCsvFile","sent","console","log","_slicedToArray","includes","toLowerCase","filenameForFile","readStudentGradesFromFile","_objectSpread","stop","_x","_readStudentGradesFromFile","_callee2","file","rows","studentGrades","_context2","rowsForCsvFile","forEach","row","_row$map","map","c","Number","replace","_row$map2","studentID","grade","_x2","studentIDs","Object","values","flatMap","keys","parseInt","slice","k","filter","sID","wGradesDatasets","Math","max","min","wValid","md","Divider","Alert","message","type","accept","multiple","onChange","csvFilesChosen","bind","datasetName","Button","size","onClick","_document$getElementB","document","getElementById","click","placeholder","LinkLiveData","_ref","tiles","entries","inputError","TileController","then","_ref2","t","content","_ref3","description","databaseName","_","o","parentSetGradesDatasetTilePairs","tile","TrainModel","modelTestingValues","Map","predictedGrade","onModelTrained","recalculateTestPrediction","parentSetModel","fgStudentIDs","_this$props2","wOutputs","dsNames","dsName","wInputs","wOutput","_toConsumableArray","outputs","sort","a","b","r","inputs","mlrModel","MLR","intercept","toJSON","weights","w","parameters","parameterID","weight","modelColumns","_this$state","_modelWithMetadata","tID","set","tildID","entry","mlr","get","push","predict","find","tileID","index","getTileByID","toFixed","InputNumber","defaultValue","style","textAlign","padding","background","marginBottom","backgroundSize","backgroundPosition","backgroundRepeat","trainModels","Finish","_componentDidMount","newModels","DataMartController","uploadModel","_uploadModel","Result","status","createRef","React","ModelConfigurator","steps","childRef","nextStep","_w$current","current","previousStep","_this$state2","ref","gds","pairs","Steps","s","renderStep","GradePredictor","loaded","Loading","small"],"sourceRoot":""}