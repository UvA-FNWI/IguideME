{"version":3,"file":"static/js/787.830a8f33.chunk.js","mappings":"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","sources":["common/Admin/AdminMenu/index.tsx","common/Admin/index.tsx","containers/ManageTileGroups/index.tsx","components/DraggableTile/ActionButtons/index.tsx","components/DraggableTile/ContentType/index.tsx","components/DraggableTile/TileType/index.tsx","components/DraggableTile/index.tsx","components/managers/TileCreateEntries/ExternalDataManager/index.tsx","components/managers/TileCreateEntries/CreationPreview/index.tsx","components/managers/TileCreateEntries/AssignmentManager/helpers.tsx","components/managers/TileCreateEntries/AssignmentManager/QuizzesTutorial/index.tsx","components/managers/TileCreateEntries/AssignmentManager/index.tsx","components/managers/TileCreateEntries/DiscussionManager/helpers.tsx","components/managers/TileCreateEntries/DiscussionManager/index.tsx","components/managers/TileCreateEntries/LearningGoalsManager/GoalEntry/GoalRequirement/index.tsx","components/managers/TileCreateEntries/LearningGoalsManager/GoalEntry/index.tsx","components/managers/TileCreateEntries/LearningGoalsManager/index.tsx","components/managers/TileCreateEntries/index.tsx","common/Admin/sections/Tiles/TileWrapper/EditTileDragger/VisibilityButton/index.tsx","common/Admin/sections/Tiles/TileWrapper/EditTileDragger/index.tsx","common/Admin/sections/Tiles/TileWrapper/helpers.ts","common/Admin/sections/Tiles/TileWrapper/index.tsx","common/Admin/sections/Tiles/index.tsx"],"sourcesContent":["import React, { Component } from \"react\";\nimport {\n    AppstoreOutlined,\n    ControlOutlined,\n    CloudUploadOutlined,\n    // ClusterOutlined,\n    DotChartOutlined,\n    FundProjectionScreenOutlined,\n    LaptopOutlined,\n    TrophyOutlined,\n    NotificationOutlined,\n    DatabaseOutlined,\n    UserOutlined,\n    TeamOutlined\n} from \"@ant-design/icons\";\nimport { Menu } from \"antd\";\nimport { Link } from \"react-router-dom\";\nimport \"./style.scss\";\nimport { RootState } from \"../../../store\";\nimport { connect, ConnectedProps } from \"react-redux\";\n\nconst mapState = (state: RootState) => ({\n    user: state.user\n});\n\nconst connector = connect(mapState)\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\ntype Props = { menuKey: string } & PropsFromRedux;\n\nclass AdminMenu extends Component<Props> {\n\n    render(): React.ReactNode {\n        const { user } = this.props;\n\n        return (\n            <div id={\"adminMenu\"}>\n                <div id={\"user\"}>\n                    <h3>{user ? user.name : \"Loading profile...\"}</h3>\n                    <strong><UserOutlined /> Instructor</strong>\n                </div>\n\n                <Menu selectedKeys={[this.props.menuKey]}>\n                    <Menu.Item key={\"datamart\"} icon={<DatabaseOutlined />}>\n                        <Link to={'/admin'}>\n                            Datamart\n                        </Link>\n                    </Menu.Item>\n\n                    <Menu.Item key={\"tiles\"} icon={<AppstoreOutlined />}>\n                        <Link to={'/admin/tiles'}>\n                            Tiles\n                        </Link>\n                    </Menu.Item>\n\n                    <Menu.Item key={\"dashboard\"} icon={<LaptopOutlined />}>\n                        <Link to={'/admin/dashboard'}>\n                            Dashboard\n                        </Link>\n                    </Menu.Item>\n\n                    <Menu.Item key={\"studentOverview\"} icon={<TeamOutlined />}>\n                        <Link to={'/admin/student-overview'}>\n                            Student Overview\n                        </Link>\n                    </Menu.Item>\n                    <Menu.SubMenu key={\"submenu\"} icon={<TrophyOutlined />} title={\"Grades\"}>\n                        {/* TODO: completely remove oldpredictor from code */}\n                        {/* <Menu.Item key={\"gradePredictorOld\"} icon={<FundProjectionScreenOutlined />}>\n                            <Link to={'/admin/grade-predictor-old'}>\n                                Old Predictor\n                            </Link>\n                        </Menu.Item> */}\n                        <Menu.Item key={\"gradePredictor\"} icon={<FundProjectionScreenOutlined />}>\n                            <Link to={'/admin/grade-predictor'}>\n                                Predictor\n                            </Link>\n                        </Menu.Item>\n                        <Menu.Item key={\"gradeAnalyzer\"} icon={<DotChartOutlined />}>\n                            <Link to={'/admin/grade-analyzer'}>\n                                Analyzer\n                            </Link>\n                        </Menu.Item>\n                    </Menu.SubMenu>\n                    <Menu.Item key={\"dataWizard\"} icon={<CloudUploadOutlined />}>\n                        <Link to={'/admin/data-wizard'}>\n                            Data Wizard\n                        </Link>\n                    </Menu.Item>\n                    {/* <Menu.Item key={\"analytics\"} icon={<ClusterOutlined />}>\n                        <Link to={'/admin/analytics'}>\n                            Analytics\n                        </Link>\n                    </Menu.Item> */}\n                    <Menu.Item key={\"notificationCentre\"} icon={<NotificationOutlined />}>\n                        <Link to={'/admin/notification-centre'}>\n                            Notification Centre\n                        </Link>\n                    </Menu.Item>\n                    <Menu.Item key={\"settings\"} icon={<ControlOutlined />}>\n                        <Link to={'/admin/settings'}>\n                            Settings\n                        </Link>\n                    </Menu.Item>\n                </Menu>\n            </div>\n        )\n    }\n}\n\nexport default connector(AdminMenu);\n","import React, { Component } from \"react\";\nimport { withAdminRole } from \"../../hoc/withAdminRole\";\nimport AdminHeader from \"../../containers/AdminHeader\";\nimport { Redirect } from \"react-router-dom\";\nimport { Col, Row } from \"antd\";\nimport AdminMenu from \"./AdminMenu\";\nimport \"./style.scss\";\n\nclass Admin extends Component<any> {\n\n  render(): React.ReactNode {\n    const { isAdmin, menuKey } = this.props;\n    if (!isAdmin) return (<Redirect to={'/'} />);\n\n    return (\n      <div id={\"admin\"}>\n        <AdminHeader />\n        <Row>\n          <Col xs={4}>\n            <AdminMenu menuKey={menuKey} />\n          </Col>\n          <Col xs={20} id={'wrapper'} className={`${ menuKey !== \"settings\" && \"noOverflow\"}`}>\n            { this.props.children }\n          </Col>\n        </Row>\n      </div>\n    )\n  }\n}\n\nexport default withAdminRole(Admin);","import React, { Component } from \"react\";\nimport {Button, Drawer, Input, Space} from \"antd\";\nimport { PlusOutlined } from \"@ant-design/icons\";\nimport { IState } from \"./types\";\nimport {RootState} from \"../../store\";\nimport {TileActions} from \"../../store/actions/tiles\";\nimport \"./style.scss\";\nimport TileController from \"../../api/controllers/tile\";\nimport {connect, ConnectedProps} from \"react-redux\";\n\nconst mapState = (state: RootState) => ({\n  tileGroups: state.tileGroups,\n});\n\nconst mapDispatch = {\n  loadGroups: () => TileActions.loadGroups()\n}\n\nconst connector = connect(mapState, mapDispatch)\ntype PropsFromRedux = ConnectedProps<typeof connector>\n\nclass ManageTileGroups extends Component<PropsFromRedux, IState> {\n\n  state = {\n    text: \"\",\n    drawerOpen: false\n  }\n\n  render(): React.ReactNode {\n    return (\n      <div id={\"manageGroup\"}>\n        <Space direction={\"horizontal\"}>\n          <Button icon={<PlusOutlined />}\n                  className={\"successButton\"}\n                  onClick={() => this.setState({ drawerOpen: true })}\n          >\n            Group\n          </Button>\n        </Space>\n        <Drawer\n          width={400}\n          title={\"Create tile group\"}\n          placement={\"right\"}\n          closable={true}\n          onClose={() => this.setState({ drawerOpen: false })}\n          open={this.state.drawerOpen}\n          getContainer={false}\n          style={{ position: 'absolute' }}\n        >\n          <p>Provide a title for the group.</p>\n\n          <Space style={{width: \"100%\"}} direction={\"vertical\"}>\n            <Input placeholder={\"Title\"}\n                   value={this.state.text}\n                   onChange={e => this.setState({ text: e.target.value || \"\" })}\n            />\n\n            <Space direction={\"horizontal\"}>\n              <Button type={\"ghost\"}\n                      onClick={() => this.setState({ drawerOpen: false })}>\n                Cancel\n              </Button>\n              <Button className={\"successButton\"}\n                      onClick={() => {\n                        TileController.createTileGroup(\n                          this.state.text,\n                          this.props.tileGroups.length).then(() => {\n                            this.props.loadGroups().then(() => {\n                              this.setState({ drawerOpen: false, text: \"\" });\n                            });\n                        });\n                      }}>\n                Create\n              </Button>\n            </Space>\n          </Space>\n        </Drawer>\n      </div>\n    )\n  }\n}\n\nexport default connector(ManageTileGroups);","import React, { Component } from \"react\";\nimport {Dropdown, MenuProps, Spin} from \"antd\";\nimport { DeleteOutlined, EditOutlined } from \"@ant-design/icons\";\nimport { IProps, IState } from \"./types\";\nimport {RootState} from \"../../../store\";\nimport {ThunkDispatch} from \"redux-thunk\";\nimport {Tile} from \"../../../models/app/Tile\";\nimport {TileActions} from \"../../../store/actions/tiles\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport TileController from \"../../../api/controllers/tile\";\nimport Swal from \"sweetalert2\";\n\nconst mapState = (state: RootState) => ({\n  tiles: state.tiles,\n});\n\nconst mapDispatch = (dispatch: ThunkDispatch<any, any, any>): any => {\n  return {\n    updateTile: async (tile: Tile) => dispatch(await TileActions.updateTile(tile))\n  };\n};\n\nconst connector = connect(mapState, mapDispatch)\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\ntype Props = IProps & PropsFromRedux;\n\nclass ActionButtons extends Component<Props, IState> {\n\n  state = {\n    loading: false,\n    tile: null\n  }\n\n  handleMenuClick: MenuProps['onClick'] = (e) => {\n    switch(e.key) {\n      case \"1\":\n        this.props.editTile()\n        return;\n      case \"2\":\n        let tile: any = this.state.tile;\n        Swal.fire({\n          title: 'Do you really want to delete this tile?',\n          showCancelButton: true,\n          confirmButtonText: 'Delete',\n          confirmButtonColor: 'rgb(255, 110, 90)',\n          showLoaderOnConfirm: true,\n          allowOutsideClick: () => !Swal.isLoading()\n        }).then((result) => {\n          if (result.isConfirmed) {\n            this.props.deleteTile(tile!.id).then(() => [\n              Swal.fire('Task completed!', '', 'success')\n            ]);\n          }\n        })\n        return;\n    }\n  };\n\n  items: MenuProps['items'] = [\n    {\n      label: 'Edit',\n      key: '1',\n      icon: <EditOutlined />,\n    },\n    {\n      label: 'Delete',\n      key: '2',\n      icon: <DeleteOutlined />,\n      danger: true,\n    },\n  ];\n\n\n  componentDidMount(): void {\n    this.setState({ tile: this.props.tile });\n  }\n\n  render(): React.ReactNode {\n\n    let { tile, loading }: IState = this.state;\n\n    if (!tile) return null;\n    tile = tile as Tile;\n\n    return (\n      <div style={{float: 'right'}}>\n        <Dropdown.Button  menu={{items: this.items, onClick: this.handleMenuClick}}\n                          buttonsRender={([leftButton, rightButton]) => {\n                            let name = loading ? \"\" : (tile!.visible ? \"successButton\" : \"dangerButton\");\n                            return [\n                                React.cloneElement(leftButton as React.ReactElement<any, string>, {className: name }),\n                                rightButton\n                            ]\n                          }}\n                          onClick={() => {\n                            this.setState({ loading: true }, () => {\n                              let t = tile!;\n                              t.visible = !t.visible;\n                              TileController.updateTile(t).then(async newTile => {\n                                await (this.props as any).updateTile(newTile);\n                                this.setState({ tile: t, loading: false });\n                              });\n                              });\n                          }}\n        >\n          { loading ?\n            <Spin size={'small'} /> :\n            (tile!.visible ? \"Visible\" : \"Hidden\")\n          }\n        </Dropdown.Button>\n      </div>\n    );\n  }\n}\n\nexport default connector(ActionButtons);","import React, { Component } from \"react\";\nimport {TileContentTypes} from \"../../../models/app/Tile\";\nimport { FieldBinaryOutlined, AppstoreOutlined, StockOutlined, TrophyOutlined } from \"@ant-design/icons\";\nimport {Space} from \"antd\";\n\nexport default class ContentType extends Component<{ content: TileContentTypes}> {\n\n  getName = () => {\n    switch (this.props.content) {\n      case \"BINARY\":\n        return \"Binary\";\n      case \"ENTRIES\":\n        return \"Entries\";\n      case \"LEARNING_OUTCOMES\":\n        return \"Learning Outcomes\";\n      case \"PREDICTION\":\n        return \"Prediction\";\n    }\n  }\n\n  getIcon = () => {\n    switch(this.props.content) {\n      case \"BINARY\":\n        return <FieldBinaryOutlined />;\n      case \"ENTRIES\":\n        return <AppstoreOutlined />;\n      case \"PREDICTION\":\n        return <StockOutlined />;\n      case \"LEARNING_OUTCOMES\":\n        return <TrophyOutlined />;\n    }\n  }\n\n  render(): React.ReactNode {\n    return (\n      <div id={\"contentType\"}>\n        <Space direction={\"horizontal\"} style={{ width: '100%'}}>\n          { this.getIcon() }\n          <span><b>{ this.getName() }</b></span>\n        </Space>\n      </div>\n    )\n  }\n}","import React, { Component } from \"react\";\nimport {TileTypeTypes} from \"../../../models/app/Tile\";\n\nexport default class TileType extends Component<{ type: TileTypeTypes }> {\n\n  getName = () => {\n    switch (this.props.type) {\n      case \"ASSIGNMENTS\":\n        return \"Assignments\";\n      case \"DISCUSSIONS\":\n        return \"Discussions\";\n      case \"EXTERNAL_DATA\":\n        return \"External Data\";\n      default:\n        return \"N/A\";\n    }\n  }\n\n  render(): React.ReactNode {\n    return (\n      <div id={\"tileType\"}>\n        <span><b>{ this.getName() }</b></span>\n      </div>\n    )\n  }\n}","import React, { Component } from \"react\";\nimport {IProps, IState} from \"./types\";\nimport ActionButtons from \"./ActionButtons\";\nimport {Row, Col, Divider, Tag, Tooltip, Button} from \"antd\";\nimport {BellTwoTone} from \"@ant-design/icons\";\nimport ContentType from \"./ContentType\";\nimport TileType from \"./TileType\";\nimport TileController from \"../../api/controllers/tile\";\nimport {Draggable} from \"react-smooth-dnd\";\nimport \"./style.scss\";\nimport {RootState} from \"../../store\";\nimport {TileActions} from \"../../store/actions/tiles\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport {Tile} from \"../../models/app/Tile\";\nimport {ThunkDispatch} from \"redux-thunk\";\n\nconst mapState = (state: RootState) => ({\n  tiles: state.tiles,\n  tileEntries: state.tileEntries\n});\n\nconst mapDispatch = ( dispatch: ThunkDispatch<any, any, any> ): any => {\n  return {\n    updateTile: async (tile: Tile) => dispatch(await TileActions.updateTile(tile))\n    //signIn: (credentials: LoginCredentials) => dispatch(signIn(credentials))\n  };\n};\n\nconst connector = connect(mapState, mapDispatch)\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\ntype Props = IProps & PropsFromRedux;\n\nclass DraggableTile extends Component<Props, IState> {\n\n  state = {\n    tile: null,\n    entriesLoaded: false,\n    entries: [],\n    updatingNotifications: []\n  }\n\n  componentDidMount(): void {\n    this.setState({tile: this.props.tile});\n    TileController.getTileEntries(this.props.tile.id).then(entries => {\n      this.setState({ entries, entriesLoaded: true });\n    });\n  }\n\n  componentDidUpdate(prevProps: Readonly<IProps>, prevState: Readonly<{}>, snapshot?: any): void {\n    let { tile }: IState = this.state;\n\n    if (tile !== undefined) return;\n\n    tile = tile as Tile;\n\n    if (prevProps.tile.id !== tile!.id) {\n      TileController.getTileEntries(tile!.id).then(entries => {\n        this.setState({ entries, entriesLoaded: true });\n      });\n    }\n  }\n\n  toggleNotifications = async (tile: Tile) => {\n    const { updatingNotifications }: IState = this.state;\n    this.setState({ updatingNotifications: [...updatingNotifications, tile.id]}, () => {\n      tile.notifications = !tile.notifications;\n      TileController.updateTile(tile).then(async t => {\n        (this.props as any).updateTile(t);\n        this.setState({\n          updatingNotifications: updatingNotifications\n            .filter(x => x !== tile.id),\n          tile: t\n        });\n      })\n    });\n  }\n\n  render(): React.ReactNode {\n    let { tile, entriesLoaded, entries, updatingNotifications }: IState = this.state;\n\n    if (!tile) return null;\n    tile = tile as Tile;\n\n    return (\n      <Draggable key={'dragTile' + tile!.id.toString()} className={\"tile\"}>\n        <div>\n          <div className={\"padded\"}>\n            <ActionButtons {...{tile, editTile: this.props.editTile, deleteTile: this.props.deleteTile}} />\n            <h3>{ tile!.title }</h3>\n            <Row gutter={10} style={{ marginTop: 20 }}>\n              <Col xs={12}>\n                <span>Content type</span>\n                <ContentType content={tile!.content} />\n              </Col>\n\n              <Col xs={12} style={{ textAlign: 'right' }}>\n                <span>Tile type</span>\n                <TileType type={tile!.type} />\n              </Col>\n\n              <Col xs={24} style={{ margin: \"20px 0\" }}>\n                <Divider />\n              </Col>\n\n              <Col xs={18}>\n                <div>\n                  { entriesLoaded ?\n                    <span>\n                      <Tag key={'tileTag' + tile!.id.toString()}>\n                        { entries.length }\n                      </Tag>\n                      children\n                    </span> :\n                    <span>Loading entries...</span>\n                  }\n                </div>\n              </Col>\n\n              <Col xs={6}>\n                <Tooltip key={`tooltipTile#${tile!.id}`}\n                         title={<span>Notifications are turned <strong>{ tile!.notifications ? \"on\" : \"off\"}</strong>.</span>}>\n                  <Button type={\"ghost\"}\n                          key={`toggleNotificationsTile#${tile!.id}`}\n                          loading={updatingNotifications.includes(tile!.id)}\n                          style={{ float: 'right' }}\n                          shape=\"circle\"\n                          icon={<BellTwoTone twoToneColor={tile!.notifications ? \"rgb(0, 185, 120)\" : \"rgb(255, 110, 90)\"} />}\n                          onClick={() => this.toggleNotifications(tile as Tile)}\n                  />\n                </Tooltip>\n              </Col>\n            </Row>\n          </div>\n        </div>\n      </Draggable>\n    );\n  }\n}\n\nexport default connector(DraggableTile);","import React, { Component } from 'react';\nimport {Link} from \"react-router-dom\";\nimport \"./style.scss\";\n\nexport default class ExternalDataManager extends Component {\n  render(): React.ReactNode {\n    return (\n      <div id={\"externalDataManager\"}>\n        <h2>Tiles of type external data need no further configuration.</h2>\n        <span>Data can be uploaded via the <Link to={'/admin/data-wizard'}>Data Wizard</Link>!</span>\n        <div id={\"illustration\"} />\n      </div>\n    );\n  }\n}","import React, { Component } from \"react\";\nimport {Col, Row} from \"antd\";\nimport FadeIn from \"react-fade-in\";\nimport {TileContentTypes} from \"../../../../models/app/Tile\";\n\nexport default class CreationPreview extends Component<{ contentType: TileContentTypes }> {\n\n  getTitle = () => {\n    switch (this.props.contentType) {\n      case \"BINARY\":\n        return \"Binary tiles\";\n      case \"ENTRIES\":\n        return \"Entries\";\n      default:\n          return \"\";\n    }\n  }\n\n  getDescription = () => {\n    switch (this.props.contentType) {\n      case \"BINARY\":\n        return \"Binary tiles project data whose unit can take on only two possible states, given by a grade of 0 and 1.\";\n      case \"ENTRIES\":\n        return \"The entries content type is most suitable for tiles containing gradable components\";\n      default:\n        return \"\";\n    }\n  }\n\n  render(): React.ReactNode {\n    const { contentType } = this.props;\n\n    console.log(\"RENDER\", contentType);\n    if (!contentType) {\n      return <span>error?</span>;\n    }\n\n    ////<div id={\"mockRender\"} className={contentType.toLowerCase()} />\n\n    return (\n      <div id={\"preview\"}>\n        <Row gutter={[10, 10]}>\n          <Col xs={24} md={8}>\n            <FadeIn>\n              <div id={\"mockRender\"} className={contentType ? contentType.toLowerCase() : \"\"} />\n            </FadeIn>\n          </Col>\n          <Col xs={24} md={16} id={\"description\"}>\n            <div id={\"descriptionWrapper\"}>\n              <h2>{ this.getTitle() }</h2>\n              <span>{ this.getDescription() }</span>\n            </div>\n          </Col>\n        </Row>\n      </div>\n    )\n  }\n}","import React from \"react\";\nimport {CloseCircleOutlined, CheckCircleOutlined} from \"@ant-design/icons\";\nimport {Button} from \"antd\";\nimport { DeleteOutlined } from \"@ant-design/icons\";\nimport {TileEntry} from \"../../../../models/app/Tile\";\nimport {CanvasAssignment} from \"../../../../models/canvas/Assignment\";\n\nexport const getColumns = (\n  removeAssignment: (entry: TileEntry) => any,\n  canvasAssignments: CanvasAssignment[]) => {\n  return [\n    {\n      title: 'Name',\n      dataIndex: 'title',\n      key: 'title',\n    }, {\n      title: 'On Canvas',\n      dataIndex: 'onCanvas',\n      key: 'onCanvas',\n      render: (text: string, obj: TileEntry) => {\n        const assignment = canvasAssignments.find(c => c.name === obj.title);\n        return assignment !== undefined ?\n          <span className={\"binary success\"}><CheckCircleOutlined /> Yes</span> :\n          <span className={\"binary fail\"}><CloseCircleOutlined /> <b>No</b></span>\n      }\n    }, {\n      title: 'Published',\n      dataIndex: 'published',\n      key: 'published',\n      render: (text: string, obj: TileEntry) => {\n        const assignment = canvasAssignments.find(c => c.name === obj.title);\n        return (assignment && assignment.published) ?\n          <div className={\"binary success\"}><CheckCircleOutlined /> <span>Yes</span></div> :\n          <div className={\"binary fail\"}><CloseCircleOutlined /> <span>No</span></div>\n      }\n    }, {\n      title: 'Action',\n      dataIndex: 'action',\n      key: 'action',\n      render: (_: string, obj: TileEntry) => {\n        return (\n          <Button danger\n                  icon={<DeleteOutlined />}\n                  shape={\"round\"}\n                  type={\"primary\"}\n                  size={\"large\"}\n                  onClick={() => removeAssignment(obj)}\n          />\n        )\n      }\n    }\n  ]\n}","import React, { Component } from \"react\";\nimport {Button, Col, Divider, Modal, Row} from \"antd\";\n\nexport default class QuizzesTutorial extends Component<{ open: boolean, setOpen: (val: boolean) => any }> {\n  render(): React.ReactNode {\n    return (\n      <Modal\n        title={\"Response Canvas quizzes\"}\n        centered\n        closable={true}\n        visible={this.props.open}\n        width={'90%'}\n        onCancel={() => this.props.setOpen(false)}\n        footer={\n          <div>\n            <Button onClick={() => this.props.setOpen(false)}>\n              Close\n            </Button>\n          </div>\n        }\n      >\n        <Row gutter={[10, 10]}>\n          <Col xs={24} md={8}>\n            <h2>Create a quiz</h2>\n            <p>The responsive setup of the quizzes is reliant on a varying points-per-question. This functionality is only available in the \"New Quizzes\" Quiz Engine. Select the \"New Quizzes\" and hit \"Submit\".</p>\n          </Col>\n\n          <Col xs={24} md={16} style={{textAlign: 'center'}}>\n            <img src={'/assets/img/tutorial/quiz-create.jpg'} style={{height: '100%', maxHeight: 400}} alt={''} />\n          </Col>\n\n          <Col xs={24}><Divider /></Col>\n\n          <Col xs={24}>\n            <h2>Quiz details</h2>\n            <p>When you select the Quiz Engine the assignment details must be provided. Be sure to tick the box in front of <i>\"Do not count this assignment towards the final grade\"</i>. When all details are in-place hit the \"Build\" button.</p>\n          </Col>\n\n          <Col xs={24}><Divider /></Col>\n\n          <Col xs={24} md={8}>\n            <h2>Specifying the question type</h2>\n            <p>To add a question to the quiz click the plus-button placed under the instructions field. You will be asked which type of question you want to add. Choose the \"Multiple choice\" question type.</p>\n          </Col>\n\n          <Col xs={24} md={16} style={{textAlign: 'center'}}>\n            <img src={'/assets/img/tutorial/quiz-add-question.jpg'} style={{height: '100%', maxHeight: 300}} alt={''}/>\n          </Col>\n\n          <Col xs={24}><Divider /></Col>\n\n          <Col xs={24} md={8}>\n            <h2>Formulating the question</h2>\n            <p>When you specify the question type you are able to formulate the question. In the right-side figure an example formulation is shown asking the student to specify the time spend on an assignment. Other use-cases may be to poll the reading times on class exercises. Be sure to tick the <i>\"Varying points by answer\"</i> checkbox. Create as many options as you wish and use the assigned points as a measurement of the student's answer. In the example students are rewarded points equivalent to the maximum time of the answer in minutes. Be consistent with the time unit used for the assigned points.</p>\n          </Col>\n\n          <Col xs={24} md={16} style={{textAlign: 'center'}}>\n            <img src={'/assets/img/tutorial/quiz-question.jpg'} style={{height: '100%', maxHeight: 320}} alt={''}/>\n          </Col>\n\n          <Col xs={24}><Divider /></Col>\n\n          <Col xs={24} md={8}>\n            <h2>Quiz Settings</h2>\n            <p>Lastly we wish to hide the obtained points from the students. To do this navigate to the \"Settings\" tab and enable the \"Restrict result view\". Uncheck the box where students are shown their rewarded points.</p>\n          </Col>\n\n          <Col xs={24} md={16} style={{textAlign: 'center'}}>\n            <img src={'/assets/img/tutorial/quiz-settings.jpg'} style={{height: '100%', maxHeight: 320}} alt={''}/>\n          </Col>\n\n          <Col xs={24}><Divider /></Col>\n\n          <Col xs={24}>\n            <h2>We're done!</h2>\n            <p>That's it, students should now be able to take the quiz and IGuideME is able to extract the rewarded points per student.</p>\n          </Col>\n        </Row>\n      </Modal>\n    )\n  }\n}","import React, { Component } from 'react';\nimport {IProps, IState} from \"./types\";\nimport CreatableSelect from 'react-select/creatable';\nimport {Space, Table, Switch, Divider, Alert} from \"antd\";\nimport {QuestionOutlined} from \"@ant-design/icons\";\nimport {getColumns} from \"./helpers\";\nimport QuizzesTutorial from \"./QuizzesTutorial\";\nimport {IManagerProps} from \"../types\";\nimport \"./style.scss\";\nimport {editState, TileEntry} from \"../../../../models/app/Tile\";\n\ntype Props = IManagerProps & IProps;\n\nexport default class AssignmentManager extends Component<Props, IState> {\n\n  state = {\n    tutorialOpen: false,\n  }\n\n  addAssignment = (name: string) => {\n    const { canvasAssignments, tile }: Props = this.props;\n    const assignment = canvasAssignments.find(a => a.name === name);\n\n    const entry: TileEntry = {\n      id: -1,\n      state: editState.new,\n      tile_id: tile ? tile.id : -1,\n      title: !assignment ? name : assignment.name,\n      type: \"ASSIGNMENT\"\n    };\n\n    this.props.addEntry(entry);\n  }\n\n  render(): React.ReactNode {\n    const { activeAssignments, canvasAssignments }: Props = this.props;\n\n    return (\n      <div id={\"assignmentManager\"}>\n        <h2>Select assignments.</h2>\n        <Divider />\n\n        <Space direction={\"vertical\"} style={{width: '100%'}}>\n          <QuizzesTutorial open={this.state.tutorialOpen} setOpen={(val) => this.setState({ tutorialOpen: val })} />\n          <span>\n            <Switch checked={this.props.graphView}\n                    onChange={(val) => this.props.setGraphView(val)}\n                    style={{zIndex: 0}}\n            />\n              &nbsp;\n              <b>Enable graph view. </b>If enabled entries will be visualized using a graph instead of the tiles.\n          </span>\n\n          <Alert message={\n            <span>\n              <QuestionOutlined />\n              &nbsp;\n              <button onClick={() => this.setState({ tutorialOpen: true })} style={{background: \"none\", border: \"none\", padding: \"0!important\", cursor: 'pointer', color: '#069', textDecoration: 'underline'}}>\n                  Create responsive quizzes.\n                </button>\n              {' '}\n              Responsive quizzes are like surveys which can be used to poll the time spent on an assignment.\n            </span>\n          } type=\"info\" />\n\n          <div id={\"assignmentRegistry\"}>\n            <Table columns={getColumns(this.props.removeEntry, canvasAssignments)}\n                   pagination={false}\n                   dataSource={activeAssignments} //.sort((a, b) => a.position - b.position)\n            />\n          </div>\n\n          <div>\n            <CreatableSelect\n              options={canvasAssignments\n                .filter(a => !activeAssignments.map(x => x.title).includes(a.name) )\n                .map(a => ({ label: a.name, value: a.id }))}\n              onCreateOption={(name: string) => this.addAssignment(name)}\n              onChange={(e) => this.addAssignment(e!.label.toString())}\n              value={null}\n            />\n          </div>\n        </Space>\n      </div>\n    );\n  }\n}","import {Button} from \"antd\";\nimport { DeleteOutlined, CheckCircleOutlined, CloseCircleOutlined } from \"@ant-design/icons\";\nimport React from \"react\";\nimport {TileEntry} from \"../../../../models/app/Tile\";\nimport {CanvasDiscussion} from \"../../../../models/canvas/Discussion\";\n\nexport const getColumns = (\n  removeDiscussion: (entry: TileEntry) => any,\n  canvasDiscussions: CanvasDiscussion[]\n) => {\n  return [\n    {\n      title: 'Title',\n      dataIndex: 'title',\n      key: 'title',\n    }, {\n      title: 'On Canvas',\n      dataIndex: 'onCanvas',\n      key: 'onCanvas',\n      render: (text: string, obj: TileEntry) => {\n        const discussion = canvasDiscussions.find(d => d.title === obj.title);\n        return discussion !== undefined ?\n          <span className={\"binary success\"}><CheckCircleOutlined /> Yes</span> :\n          <span className={\"binary fail\"}><CloseCircleOutlined /> <b>No</b></span>\n      }\n    }, {\n      title: 'Posted by',\n      dataIndex: 'posted_by',\n      key: 'posted_by',\n      render: (text: string, obj: TileEntry) => {\n        const discussion = canvasDiscussions.find(d => d.title === obj.title);\n        return discussion ? discussion.posted_by : \"n/a\"\n      }\n    }, {\n      title: 'Posted at',\n      dataIndex: 'posted_at',\n      key: 'posted_at',\n      render: (text: string, obj: TileEntry) => {\n        const discussion = canvasDiscussions.find(d => d.title === obj.title);\n        return discussion ? discussion.posted_at : \"n/a\"\n      }\n    }, {\n      title: 'Action',\n      dataIndex: 'action',\n      key: 'action',\n      render: (_: string, obj: TileEntry) => {\n        return (\n          <Button danger\n            icon={<DeleteOutlined />}\n            shape={\"round\"}\n            type={\"primary\"}\n            size={\"large\"}\n            onClick={() => removeDiscussion(obj)}\n          />\n      )\n      }\n    }\n  ]\n}","import React, { Component } from \"react\";\nimport {Divider, Switch, Table} from \"antd\";\nimport {getColumns} from \"./helpers\";\nimport CreatableSelect from \"react-select/creatable\";\nimport FadeIn from \"react-fade-in\";\nimport {IManagerProps} from \"../types\";\nimport {IProps} from \"./types\";\nimport {editState, TileEntry} from \"../../../../models/app/Tile\";\n\ntype Props = IManagerProps & IProps;\n\nclass DiscussionManager extends Component<Props> {\n\n\n  addDiscussion = (title: string) => {\n    const { canvasDiscussions, tile }: Props = this.props;\n    const assignment = canvasDiscussions.find(d => d.title === title);\n\n    const entry: TileEntry = {\n      id: -1,\n      state: editState.new,\n      tile_id: tile ? tile.id : -1,\n      title: !assignment ? title : assignment.title,\n      type: \"DISCUSSION\"\n    }\n\n    this.props.addEntry(entry);\n  }\n\n  render(): React.ReactNode {\n    const { activeDiscussions, canvasDiscussions, wildcard } = this.props;\n\n    return (\n      <div id={\"discussionManager\"}>\n        <h2>Configure discussion metric.</h2>\n        <Divider />\n        <span>\n          <Switch checked={wildcard}\n                  onChange={(val) => {\n                    this.props.setWildcard(val)\n                  }}\n                  style={{zIndex: 0}}\n          />\n          &nbsp;\n          <strong>Count all user posts.</strong> When enabled all posted submissions will be extracted for all students. If you wish to count the replies to a certain post uncheck this functionality and specify the posts you wish to track the replies of.\n        </span>\n\n        { !wildcard &&\n          <FadeIn>\n            <div id={\"assignmentRegistry\"}>\n              <Table columns={getColumns(this.props.removeEntry, canvasDiscussions)}\n                     pagination={false}\n                     dataSource={activeDiscussions}\n              />\n            </div>\n\n            <div>\n              <CreatableSelect\n                options={canvasDiscussions\n                  .filter(a => !activeDiscussions.map(x => x.title).includes(a.title) )\n                  .map(a => ({ label: a.title, value: a.id }))}\n                onCreateOption={(title: string) => this.addDiscussion(title)}\n                onChange={(e) => this.addDiscussion(e!.label.toString())}\n                value={null}\n              />\n            </div>\n          </FadeIn>\n        }\n      </div>\n    )\n  }\n}\n\nexport default DiscussionManager;","import React, { Component } from \"react\";\nimport {Button, Col, InputNumber, Row} from \"antd\";\nimport {DeleteOutlined} from \"@ant-design/icons\";\nimport Select from \"react-select\";\nimport {IProps} from \"./types\";\nimport Swal from \"sweetalert2\";\nimport {RootState} from \"../../../../../../store\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport TileController from \"../../../../../../api/controllers/tile\";\nimport \"./style.scss\";\nimport { editState } from \"../../../../../../models/app/Tile\";\n\nconst mapState = (state: RootState) => ({\n  tiles: state.tiles,\n  tileEntries: state.tileEntries\n});\n\nconst connector = connect(mapState)\ntype PropsFromRedux = ConnectedProps<typeof connector>\ntype Props = IProps & PropsFromRedux;\n\nclass GoalRequirement extends Component<Props> {\n\n  state = {\n    loading: false,\n    metaKeys: []\n  }\n\n  componentDidMount(): void {\n    const { requirement } = this.props;\n    if (requirement.entry_id !== -1 && requirement.entry_id !== null) {\n      this.loadMetaKeys(requirement.entry_id as number);\n    }\n  }\n\n  componentWillReceiveProps(nextProps: Readonly<Props>, nextContext: any): void {\n    if (nextProps.requirement.entry_id !== this.props.requirement.entry_id &&\n        !isNaN(nextProps.requirement.entry_id as number)) {\n      this.loadMetaKeys(nextProps.requirement.entry_id as number);\n    }\n\n    if (nextProps.requirement.entry_id === -1) {\n      this.setState({\n        loading: false, metaKeys: []\n      });\n    }\n  }\n\n  loadMetaKeys = (id: number) => {\n    this.setState({ loading: true }, () => {\n      TileController.getTileEntriesMetaKeys(id).then(metaKeys => {\n        this.setState({\n          loading: false, metaKeys\n        });\n      });\n    });\n  }\n\n  getExpressionLabel = (expression: string | null) => {\n    switch (expression) {\n      case \"lte\": return \"≤ (less than)\";\n      case \"gte\": return \"≥ (greater than)\";\n      case \"e\": return \"= (equal to)\";\n      default: return \"\";\n    }\n  }\n\n  getMetaKeyLabel = (key: string) => {\n    switch (key) {\n      case \"grade\": return \"Grade (default)\";\n      default: return key;\n    }\n  }\n\n  render(): React.ReactNode {\n    let { requirement, tiles, tileEntries } = this.props;\n\n    let entryOptions: {label: string, value: number | string }[] = tileEntries\n      .filter(e => e.tile_id === requirement.tile_id)\n      .map(e => ({ label: e.title, value: e.id }));\n\n    const targetTile = tiles.find(t => t.id === requirement.tile_id);\n    if (targetTile && targetTile.content === \"BINARY\") {\n      entryOptions = [\n        { value: 'count', label: 'COUNT (success)' },\n        ...entryOptions\n      ];\n    }\n\n    if (requirement.state === editState.removed) {\n      return null;\n    }\n\n    return (\n      <div className={\"goalRequirement\"}>\n        <Row gutter={[10, 10]}>\n          <Col xs={3} md={2}>\n            <Button shape={\"circle\"}\n                    danger\n                    onClick={() => {\n                      Swal.fire({\n                        icon: 'warning',\n                        title: 'Do you really want to delete this requirement?',\n                        showCancelButton: true,\n                        confirmButtonText: 'Delete',\n                        showLoaderOnConfirm: true,\n                        allowOutsideClick: true\n                      }).then((result) => {\n                        if (result.isConfirmed) {\n                          requirement.state = editState.removed;\n                          this.props.updateRequirement(requirement);\n                          this.setState({requirement});\n                        }\n                      });\n                    }}\n                    icon={<DeleteOutlined />}/>\n          </Col>\n          <Col xs={21} md={8}>\n            Tile\n            <Select value={{\n                      value: requirement.tile_id,\n                      label: tiles.find(t => t.id === requirement.tile_id)?.title || \"Choose tile\"\n                    }}\n                    options={tiles.map(t => ({ value: t.id, label: t.title }))}\n                    onChange={(e) => {\n                      if (!e) return;\n\n                      requirement.tile_id = e.value;\n                      requirement.entry_id = -1;\n                      this.props.updateRequirement(requirement);\n                      this.setState({requirement});\n                    }}\n            />\n          </Col>\n          <Col xs={24} md={8}>\n            Entry\n            <Select value={{\n                      value: requirement.entry_id,\n                      label: requirement.entry_id === \"count\" ?\n                        \"COUNT (success)\" :\n                        (tileEntries.find(e => e.id === requirement.entry_id)?.title || \"Choose entry\")\n                    }}\n                    isDisabled={requirement.tile_id === -1}\n                    onChange={(e) => {\n                      if (!e) return;\n\n                      requirement.entry_id = e.value;\n                      this.props.updateRequirement(requirement);\n                      this.setState({requirement});\n\n                    }}\n                    options={entryOptions} />\n            <br />\n            Meta\n            <Select isLoading={this.state.loading}\n                    value={{ value: requirement.meta_key || \"\", label: this.getMetaKeyLabel(requirement.meta_key || \"\") }}\n                    onChange={e => {\n                      if (!e) return;\n                      requirement.meta_key = e.value;\n                      this.props.updateRequirement(requirement);\n                      this.setState({requirement});\n                    }}\n                    isDisabled={requirement.entry_id === -1 || requirement.entry_id === \"count\"}\n                    options={[\n                      { value: 'grade', label: 'Grade (default)' },\n                      ...this.state.metaKeys.map(k => ({\n                        value: k, label: k\n                      }))\n                    ]} />\n          </Col>\n          <Col xs={24} md={3}>\n            Expression\n            <Select isDisabled={requirement.entry_id === -1}\n                    value={requirement.expression ? { label: this.getExpressionLabel(requirement.expression), value: requirement.expression } : undefined}\n                    onChange={e => {\n                      if (!e) return;\n\n                      requirement.expression = e.value;\n                      this.props.updateRequirement(requirement);\n                      this.setState({requirement});\n                    }}\n                    options={[\n                      { value: 'lte', label: '≤ (less than)' },\n                      { value: 'e', label: '= (equal to)' },\n                      { value: 'gte', label: '≥ (greater than)' }\n                    ]}\n            />\n          </Col>\n          <Col xs={24} md={3}>\n            <br />\n            <InputNumber step={.5}\n                         size={\"large\"}\n                         disabled={requirement.expression === null}\n                         value={requirement.value}\n                         onChange={value => {\n                          requirement.value = Number(value);\n                          this.props.updateRequirement(requirement);\n                          this.setState({requirement});\n                        }}\n            />\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default connector(GoalRequirement);","import React, { Component } from \"react\";\nimport {Alert, Button, Divider, Input, Space} from \"antd\";\nimport {DeleteOutlined, PlusOutlined} from \"@ant-design/icons\";\nimport GoalRequirement from \"./GoalRequirement\";\nimport {GoalRequirement as GoalRequirementModel} from \"../../../../../models/app/LearningGoal\";\nimport {editState} from \"../../../../../models/app/Tile\";\nimport {IProps} from \"./types\";\nimport {LearningGoal} from \"../../../../../models/app/LearningGoal\";\nimport Swal from \"sweetalert2\";\nimport \"./style.scss\";\n\nexport default class GoalEntry extends Component<IProps> {\n\n  componentDidMount(): void {\n    this._initialize(this.props.goal);\n  }\n\n  componentWillReceiveProps(nextProps: Readonly<IProps>, nextContext: any): void {\n    this._initialize(nextProps.goal);\n  }\n\n  _initialize = (goal: LearningGoal) => {\n    this.setState({ goal });\n  }\n\n  addNewRequirement = () => {\n    const {goal, tile} = this.props;\n    goal.requirements = [{\n      id: -1,\n      state: editState.new,\n      expression: null,\n      goal_id: goal.id,\n      tile_id: tile ? tile.id : -1,\n      entry_id: -1,\n      meta_key: \"grade\",\n      value: 0\n    }, ...goal.requirements];\n    this.props.updateGoal(goal);\n  }\n\n  updateRequirement = (requirement: GoalRequirementModel) => {\n    if ((requirement.state !== editState.new) && (requirement.state !== editState.removed)) {\n      requirement.state = editState.updated;\n    }\n    this.props.updateGoal(this.props.goal);\n    this.setState({goal: this.props.goal});\n  }\n\n  render(): React.ReactNode {\n    let goal = this.props.goal;\n\n    if (goal.state === editState.removed) {\n      return null;\n    }\n\n    return (\n      <div className={\"goalEntry\"} >\n        <div className={\"title\"}>\n          <span><b>Title</b></span>\n          <Input value={goal.title}\n                 size={\"large\"}\n                 onChange={e => {\n                   goal.title = e.target.value;\n                   this.props.updateGoal(goal);\n                 }}\n          />\n        </div>\n\n        <div className={\"actions\"}>\n          <Space direction={\"horizontal\"}>\n            <Button shape={\"round\"}\n                    danger\n                    onClick={() => {\n                      Swal.fire({\n                        icon: 'warning',\n                        title: 'Do you really want to delete this goal?',\n                        text: `Goal: ${goal.title} will be deleted on save`,\n                        showCancelButton: true,\n                        confirmButtonText: 'Delete',\n                        showLoaderOnConfirm: true,\n                        allowOutsideClick: true\n                      }).then((result) => {\n                        if (result.isConfirmed) {\n                          goal.state = editState.removed;\n                          this.setState({goal});\n                        }\n                      });\n                    }}\n                    icon={<DeleteOutlined />}>\n              Delete goal\n            </Button>\n\n            <Button shape={\"round\"}\n                    onClick={this.addNewRequirement}\n                    icon={<PlusOutlined />}>\n              Requirement\n            </Button>\n          </Space>\n        </div>\n\n        <Divider />\n        <span><b>Requirements</b></span>\n\n        { goal.requirements.map(r => {\n          return (\n            <GoalRequirement updateRequirement={this.updateRequirement}\n                             requirement={r} />\n          );\n        })}\n\n        { goal.requirements.length === 0 &&\n          <Alert message=\"Goal doesn't have a requirement\" type=\"warning\" showIcon />\n        }\n      </div>\n    );\n  }\n}","import React, { Component } from \"react\";\nimport {Button, Divider} from \"antd\";\nimport {PlusOutlined} from \"@ant-design/icons\";\nimport GoalEntry from \"./GoalEntry\";\nimport {IProps, IState} from \"./types\";\nimport {LearningGoal} from \"../../../../models/app/LearningGoal\";\nimport { editState } from \"../../../../models/app/Tile\";\n\nexport default class LearningGoalsManager extends Component<IProps, IState> {\n\n  addNewGoal = () => {\n    const { tile, goals } = this.props;\n\n    this.props.setGoals([\n      { id: -1,\n        state: editState.new,\n        tile_id: tile ? tile.id : -1,\n        title: \"\",\n        requirements: []\n      },\n      ...goals\n    ]);\n  }\n\n  updateGoal = (goal: LearningGoal) => {\n    if ((goal.state !== editState.new) && (goal.state !== editState.removed)) {\n      goal.state = editState.updated;\n    }\n    this.props.setGoals(this.props.goals);\n  }\n\n  render(): React.ReactNode {\n    const { tile, goals } = this.props;\n\n    return (\n      <div id={\"learningGoalsManager\"}>\n        <h2>Construct learning goals.</h2>\n        <Button shape={\"round\"}\n                icon={<PlusOutlined />}\n                onClick={this.addNewGoal}\n        >\n          Goal\n        </Button>\n        <Divider />\n\n        { goals.map(goal => {\n          return (\n            <GoalEntry tile={tile}\n                       goal={goal}\n                       updateGoal={this.updateGoal}\n            />\n          )\n        })}\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport {IProps, IState} from \"./types\";\nimport ExternalDataManager from \"./ExternalDataManager\";\nimport CreationPreview from \"./CreationPreview\";\nimport AssignmentManager from \"./AssignmentManager\";\nimport TileController from \"../../../api/controllers/tile\";\nimport {Tile, TileEntry} from \"../../../models/app/Tile\";\nimport {RootState} from \"../../../store\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport Loading from \"../../utils/Loading\";\nimport DiscussionManager from \"./DiscussionManager\";\nimport {message} from \"antd\";\nimport LearningGoalsManager from \"./LearningGoalsManager\";\nimport \"./style.scss\";\n\nconst mapState = (state: RootState) => ({\n  assignments: state.assignments,\n  discussions: state.discussions\n});\n\nconst connector = connect(mapState)\ntype PropsFromRedux = ConnectedProps<typeof connector>\ntype Props = IProps & PropsFromRedux;\n\nclass TileCreateEntries extends Component<Props, IState> {\n\n  state = {\n    activeGoals: [],\n    activeEntries: [],\n    loading: false\n  }\n\n  componentDidMount(): void {\n    if (this.props.tile) {\n      this.setState({loading: true}, () => {\n        this._initializeTile(this.props.tile!);\n      });\n    }\n  }\n\n  componentWillReceiveProps(nextProps: Readonly<Props>, nextContext: any): void {\n    if (\n          (nextProps.tile?.id !== this.props.tile?.id) ||\n          (nextProps.contentType !== this.props.contentType) ||\n          (nextProps.tileType !== this.props.tileType)\n        ) {\n      if (nextProps.tile) this._initializeTile(nextProps.tile);\n      else this.setState({ activeEntries: [], activeGoals: [] });\n    }\n  }\n\n  _initializeTile = (tile: Tile) => {\n    if (tile.content === \"LEARNING_OUTCOMES\") {\n      TileController.getTileGoals(tile.id).then(goals => {\n        this.setState({ activeGoals: goals, loading: false }, () => {\n          this.props.updateGoals(goals);\n        });\n      });\n    } else {\n      TileController.getTileEntries(tile.id).then(entries => {\n        this.setState({ activeEntries: entries, loading: false }, () => {\n          this.props.updateEntries(entries);\n        });\n      });\n    }\n  }\n\n  addEntry = (entryRegistry: TileEntry) => {\n    if (this.state.activeEntries.find((x: TileEntry) => x.title === entryRegistry.title)) {\n      message.error(\"Entry is already registered!\");\n      console.error(\"Entry is already registered!\");\n      return;\n    }\n\n    this.setState(\n      { activeEntries: [...this.state.activeEntries, entryRegistry] },\n      () => {\n        this.props.updateEntries(this.state.activeEntries);\n      }\n    );\n  }\n\n  removeEntry = (entryRegistry: TileEntry) => {\n    if (!this.state.activeEntries.find((x: TileEntry) => x.title === entryRegistry.title)) {\n      message.error(\"Entry does not exist!\");\n      console.error(\"Entry is already registered!\");\n      return;\n    }\n\n    this.setState(\n      { activeEntries: this.state.activeEntries.filter((e: TileEntry) =>\n          e.title !== entryRegistry.title)\n      }, () => {\n        this.props.updateEntries(this.state.activeEntries);\n      }\n    );\n  }\n\n  render(): React.ReactNode {\n    const { activeEntries, loading, activeGoals }: IState = this.state;\n    const { tile, contentType, tileType, graphView, setGraphView } = this.props;\n\n    if (loading) return <Loading small={true} />\n\n    if (contentType && (contentType === \"LEARNING_OUTCOMES\")) {\n      return <LearningGoalsManager tile={tile}\n                                   setGoals={goals => {\n                                     this.setState({ activeGoals: goals });\n                                     this.props.updateGoals(goals)\n                                   }}\n                                   goals={activeGoals}\n                                   />\n    } else if (contentType && (contentType === \"PREDICTION\")) {\n\n    } else if (contentType && !tileType) {\n      return (<CreationPreview contentType={contentType} />);\n    }\n\n    if (!contentType || !tileType) return null;\n\n    switch (tileType!) {\n      case \"ASSIGNMENTS\":\n        return (<AssignmentManager tile={tile}\n                                   addEntry={this.addEntry}\n                                   removeEntry={this.removeEntry}\n                                   graphView={graphView}\n                                   setGraphView={setGraphView}\n                                   activeAssignments={activeEntries}\n                                   canvasAssignments={this.props.assignments} />);\n      case \"DISCUSSIONS\":\n        return (<DiscussionManager tile={tile}\n                                   addEntry={this.addEntry}\n                                   removeEntry={this.removeEntry}\n                                   wildcard={this.props.wildcard}\n                                   setWildcard={this.props.setWildcard}\n                                   activeDiscussions={activeEntries}\n                                   canvasDiscussions={this.props.discussions} />);\n      case \"EXTERNAL_DATA\":\n        return (<ExternalDataManager />);\n      default:\n        return null;\n    }\n  }\n}\n\nexport default connector(TileCreateEntries);","import React, { Component } from \"react\";\nimport {IProps} from \"./types\";\nimport {Button} from \"antd\";\n\nexport default class VisibilityButton extends Component<IProps> {\n  render(): React.ReactNode {\n    const { visible, setVisibility } = this.props;\n\n    return (\n      <div>\n        <Button size={\"large\"}\n                className={visible ? \"successButton\" : \"dangerButton\"}\n                onClick={() => setVisibility(!visible)}\n        >\n          { visible ? \"Visible\" : \"Hidden\" }\n        </Button>\n      </div>\n    )\n  }\n}","import React, { Component } from \"react\";\nimport {Col, Drawer, Input, Row, Statistic, Divider, Button} from \"antd\";\nimport {SaveOutlined} from \"@ant-design/icons\";\nimport {IProps, IState} from \"./types\";\nimport Select from \"react-select\";\nimport TileCreateEntries from \"../../../../../../components/managers/TileCreateEntries\";\nimport {editState, Tile, TileContentTypes, TileEntry, TileTypeTypes} from \"../../../../../../models/app/Tile\";\nimport VisibilityButton from \"./VisibilityButton\";\nimport {RootState} from \"../../../../../../store\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport TileController from \"../../../../../../api/controllers/tile\";\nimport {TileActions} from \"../../../../../../store/actions/tiles\";\n\nconst mapState = (state: RootState) => ({\n  tileEntries: state.tileEntries,\n  tileGoals: state.tileGoals\n});\n\nconst mapDispatch = {\n  loadTiles: () => TileActions.loadTiles(),\n  loadEntries: () => TileActions.loadTileEntries(),\n  loadTileGoals: () => TileActions.loadTileGoals()\n}\n\nconst connector = connect(mapState, mapDispatch)\ntype PropsFromRedux = ConnectedProps<typeof connector>\n\ntype Props = IProps & PropsFromRedux;\n\nclass EditTileDragger extends Component<Props, IState> {\n\n  state = {\n    updating: false,\n    title: \"\",\n    contentType: { label: undefined, value: undefined },\n    tileType: { label: undefined, value: undefined },\n    visible: true,\n    wildcard: false,\n    entries: [],\n    goals: [],\n    graphView: false,\n  }\n\n  componentWillReceiveProps(nextProps: Readonly<Props>, nextContext: any): void {\n    if (nextProps.tile !== undefined && nextProps.tile.id !== this.props.tile?.id) {\n      const { tile } = nextProps;\n\n      if (tile) {\n        this.setState({\n          title: tile.title,\n          contentType: { label: tile.content, value: tile.content },\n          tileType: { label: tile.type!, value: tile.type },\n          visible: tile.visible,\n          graphView: tile.graph_view\n        });\n      }\n    } else if (nextProps.tile === undefined) {\n      this.setState({\n        title: \"\",\n        contentType: { label: undefined, value: undefined },\n        tileType: { label: undefined, value: undefined },\n        visible: false,\n        graphView: false\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<{}>, snapshot?: any): void {\n    if (!prevProps.isOpen && this.props.isOpen) {\n      window.scrollTo(0, 0);\n    }\n  }\n\n  create = async () => {\n    const { entries, title, visible, contentType, tileType, wildcard, goals, graphView }: IState = this.state;\n    const { tileGroup } = this.props;\n\n    const newTile: Tile = {\n      id: -1,\n      group_id: tileGroup.id,\n      title,\n      position: -1,\n      visible,\n      content: contentType.value as TileContentTypes,\n      type: tileType.value as TileTypeTypes,\n      notifications: false,\n      graph_view: graphView,\n      wildcard\n    }\n\n    TileController.createTile(newTile).then(async tile => {\n      if (['ASSIGNMENTS', 'DISCUSSIONS'].includes(tile.type || \"\")) {\n        await this.createEntries(entries.map(e => {\n          e.tile_id = tile.id;\n          return e;\n        }));\n      } else if (tile.content === \"LEARNING_OUTCOMES\") {\n        for (let i = 0; i < goals.length; i++) {\n          goals[i].tile_id = tile.id;\n          let response = await TileController.createTileGoal(goals[i]);\n          console.log(\"goal\", response)\n        }\n      }\n\n      this.props.loadTiles().then(() => {\n        this.props.loadEntries().then(() => {\n          this.props.loadTileGoals().then(() => {\n            this.setState({ updating: false }, () => {\n              this.props.setOpen(false);\n            });\n          });\n        });\n      });\n    });\n  }\n\n  save = async () => {\n    const { entries, goals, graphView, wildcard, title }: IState = this.state;\n    const { tileEntries, tile }: Props = this.props;\n\n    tile!.title = title;\n    tile!.graph_view = graphView;\n    tile!.wildcard = wildcard;\n\n    const patchedTile = await TileController.updateTile(tile!)\n    this.setState({ updating: true }, async () => {\n      let removedEntries = tileEntries.filter(\n        e => e.tile_id === ( tile ? tile.id : -1 )\n      ).filter(\n        e => !entries.map(_e => _e.title).includes(e.title));\n\n      let newEntries = entries.filter(e => e.id === -1);\n\n      if (tile!.type === 'ASSIGNMENTS' || tile!.type === 'DISCUSSIONS' ) {\n        removedEntries = tileEntries.filter(\n          e => e.tile_id === patchedTile.id\n        ).filter(\n          e => !entries.map(_e => _e.title).includes(e.title));\n\n        newEntries = entries.filter(e => e.id === -1);\n\n      }\n      else if (tile!.content === \"LEARNING_OUTCOMES\") {\n        for (let i = 0; i < goals.length; i++) {\n          if (goals[i].state != null) {\n            switch (goals[i].state) {\n              case editState.new:\n                goals[i].state = editState.unchanged;\n                await TileController.createTileGoal(goals[i]);\n                break;\n              case editState.updated:\n                goals[i].state = editState.unchanged;\n                await TileController.updateTileGoal(goals[i]);\n                break;\n              case editState.removed:\n                goals[i].state = editState.unchanged;\n                await TileController.deleteTileGoal(goals[i].id);\n                break;\n              case editState.unchanged:\n                break;\n            }\n          }\n        }\n      }\n\n      await this.deleteEntries(removedEntries);\n      await this.createEntries(newEntries);\n\n      this.props.loadTiles().then(() => {\n        this.props.loadEntries().then(() => {\n          this.props.loadTileGoals().then(() => {\n            this.setState({ updating: false }, () => {\n              this.props.setOpen(false);\n            });\n          });\n        });\n      });\n    });\n  }\n\n  createEntries = async (entries: TileEntry[]) => {\n    for (const entry of entries) {\n      await TileController.createTileEntry(entry);\n    }\n  }\n\n  deleteEntries = async (entries: TileEntry[]) => {\n    for (const entry of entries) {\n      await TileController.deleteTileEntry(entry.id);\n    }\n  }\n\n  render(): React.ReactNode {\n    const { tileGroup, tiles, tile } = this.props;\n    const { title, contentType, tileType, visible }: IState = this.state;\n\n    return (\n      <Drawer\n        width={'100%'}\n        destroyOnClose={true}\n        title={tile === undefined ? \"Create new tile\" : \"Edit \" + tile.title}\n        placement={\"right\"}\n        closable={true}\n        onClose={() => this.props.setOpen(false)}\n        open={this.props.isOpen}\n        getContainer={false}\n        style={{ position: 'absolute' }}\n      >\n        <Row gutter={[10, 25]} style={{marginBottom: 10}}>\n          <Col xs={24}>\n            <Row gutter={50}>\n              <Col>\n                <Statistic\n                  title={\"Tile Group\"}\n                  value={tileGroup.title}\n                />\n              </Col>\n              <Col>\n                <Statistic\n                  title={\"Children\"}\n                  value={tiles.filter(t => t.group_id === tileGroup.id).length}\n                  suffix={\"tiles\"}\n                />\n              </Col>\n              <Col>\n                <Statistic\n                  title={\"Manage\"}\n                  valueRender={() => (\n                    <Button type=\"primary\"\n                            shape=\"round\"\n                            loading={this.state.updating}\n                            onClick={() => this.props.tile === undefined ? this.create() : this.save()}\n                            icon={<SaveOutlined />}>\n                      { this.props.tile === undefined ? \"Create\" : \"Save\" }\n                    </Button>)\n                  }\n                />\n              </Col>\n            </Row>\n\n            <Divider />\n            <h2>Tile Configuration</h2>\n          </Col>\n\n          <Col xs={12}>\n            <span>Title</span>\n            <Input size={\"large\"}\n                   placeholder={\"Specify\"}\n                   value={title}\n                   onChange={e => this.setState({ title: e.target.value })}/>\n          </Col>\n          <Col xs={12}>\n            <span>Visibility</span>\n            <br />\n            <VisibilityButton visible={visible}\n                              setVisibility={visible => this.setState({ visible })}\n            />\n          </Col>\n\n          <Col xs={12}>\n            <span>Content type</span>\n            <Select value={{label: contentType.label as string, value: contentType.value as string}}\n                    style={{zIndex: 100}}\n                    options={[\n                      { label: 'Binary', value: 'BINARY'},\n                      { label: 'Entries', value: 'ENTRIES' },\n                      { label: 'Prediction', value: 'PREDICTION' },\n                      { label: 'Learning Outcome', value: 'LEARNING_OUTCOMES' }\n                    ]}\n                    isClearable={true}\n                    onChange={e => {\n                      if (!e) {\n                        this.setState({\n                          contentType: {label: undefined, value: undefined},\n                          tileType: {label: undefined, value: undefined}\n                        });\n                      } else {\n                        this.setState({\n                          contentType: {\n                            label: e!.label,\n                            value: e!.value as TileContentTypes\n                          },\n                          tileType: {label: undefined, value: undefined}\n                        });\n                      }\n                    }\n                  }\n            />\n          </Col>\n\n          <Col xs={12}>\n            <span>Tile type</span>\n            { ((contentType.value === \"LEARNING_OUTCOMES\") || (contentType.value === \"PREDICTION\")) ?\n              <h3>N/A</h3> :\n              <Select value={{label: tileType.label as string, value: tileType.value as string}}\n                      isDisabled={!contentType}\n                      isClearable={true}\n                      style={{zIndex: 100}}\n                      options={[\n                        { label: 'Assignments', value: 'ASSIGNMENTS'},\n                        { label: 'Discussions', value: 'DISCUSSIONS', isDisabled: (contentType ? contentType!.value : \"\") !== \"ENTRIES\" },\n                        { label: 'External Data', value: 'EXTERNAL_DATA' }\n                      ]}\n                      onChange={e => this.setState({ tileType: e ? {\n                          label: e.label,\n                          value: e.value as TileTypeTypes\n                        } : { label: undefined, value: undefined } })\n                      }\n                      placeholder={\n                        contentType ? \"Select type\" : \"Specify content first\"\n                      }\n              />\n            }\n          </Col>\n        </Row>\n\n        <TileCreateEntries tile={tile}\n                           graphView={this.state.graphView}\n                           setGraphView={(graphView) => this.setState({ graphView })}\n                           wildcard={this.state.wildcard}\n                           setWildcard={wildcard => this.setState({ wildcard })}\n                           updateEntries={(entries) => this.setState({ entries })}\n                           updateGoals={(goals) => this.setState({ goals })}\n                           contentType={this.state.contentType.value}\n                           tileType={this.state.tileType.value}\n        />\n      </Drawer>\n    )\n  }\n}\n\nexport default connector(EditTileDragger);","import {Tile, TileGroup} from \"../../../../../models/app/Tile\";\n\nexport const getStyle = (group: TileGroup, tiles: Tile[]) => {\n\n  if (tiles.filter((tile: Tile) => tile.group_id === group.id).length === 0) {\n    return {\n      width: '100%',\n      minHeight: 200,\n      border: \"2px dotted #EAEAEA\",\n      borderRadius: 5,\n    }\n  }\n\n  return {}\n}\n\nexport const handleDrop = async (group: TileGroup,\n                                 evt: { removedIndex: number | null, addedIndex: number | null, payload?: Tile },\n                                 tiles: Tile[]): Promise<Tile[]> => {\n  const { addedIndex, payload, removedIndex } = evt;\n  void payload; // discard while keeping eslint happy\n\n  let tilesInGroup: Tile[] = JSON.parse(JSON.stringify(getTilesInGroup(tiles, group.id)));\n\n  if (removedIndex !== null && addedIndex !== null) {\n    const dragged = tilesInGroup[removedIndex - 1];\n    tilesInGroup.splice(addedIndex, 0, dragged);\n\n    if (removedIndex < addedIndex)\n      tilesInGroup = tilesInGroup.filter((t, i) => i !== removedIndex - 1);\n    else\n      tilesInGroup = tilesInGroup.filter((t, i) => i !== removedIndex);\n\n    for (let i = 0; i < tilesInGroup.length; i ++) {\n      tilesInGroup[i].position = i + 1;\n    }\n\n    tiles = [\n      ...tiles.filter(t => !tilesInGroup.map(x => x.id).includes(t.id)),\n      ...tilesInGroup\n    ];\n\n    return Promise.resolve(tiles);\n  } else {\n    return Promise.resolve(tiles);\n  }\n}\n\nexport const getTilesInGroup = (tiles: Tile[], groupId: number) => {\n  return tiles.filter(\n    (tile: Tile) => tile.group_id === groupId)\n    .sort(\n      (a: Tile, b: Tile) => a.position - b.position\n    );\n}","import React, { Component } from \"react\";\nimport { IProps, IState } from \"./types\";\nimport {Button, Space} from \"antd\";\nimport { PlusOutlined, DeleteOutlined } from \"@ant-design/icons\";\nimport DraggableTile from \"../../../../../components/DraggableTile\";\nimport EditTileDragger from \"./EditTileDragger\";\nimport {Container} from \"react-smooth-dnd\";\nimport {getStyle, getTilesInGroup, handleDrop} from \"./helpers\";\nimport {Tile} from \"../../../../../models/app/Tile\";\nimport \"./style.scss\";\nimport Swal from \"sweetalert2\";\nimport TileController from \"../../../../../api/controllers/tile\";\nimport {RootState} from \"../../../../../store\";\nimport {TileActions} from \"../../../../../store/actions/tiles\";\nimport {connect, ConnectedProps} from \"react-redux\";\n\nconst mapState = (state: RootState) => ({\n  tileGroups: state.tileGroups,\n});\n\nconst mapDispatch = {\n  loadGroups: () => TileActions.loadGroups(),\n  loadTiles: () => TileActions.loadTiles()\n}\n\nconst connector = connect(mapState, mapDispatch)\ntype PropsFromRedux = ConnectedProps<typeof connector>\n\ntype Props = IProps & PropsFromRedux;\n\nclass TileWrapper extends Component<Props, IState> {\n\n  state = {\n    updating: [],\n    editTile: undefined,\n    isDraggerOpen: false\n  }\n\n  deleteTile = async (id: number) => {\n    TileController.deleteTile(id).then(() => {\n      this.props.loadGroups().then(() => {\n        this.props.loadTiles().then(() => {\n          this.setState({isDraggerOpen: false});\n        });\n      });\n    });\n  }\n\n\n  render(): React.ReactNode {\n    const { editTile, isDraggerOpen, updating }: IState = this.state;\n    const { group, tiles, updateTiles } = this.props;\n    const historicTiles: Tile[] = JSON.parse(JSON.stringify(tiles));\n\n    return (\n      <div className={\"tileWrapper\"} key={\"group-\" + group.id.toString()}>\n        <h2>{ group.title }</h2>\n        <div className={\"tileContainer\"}>\n          <EditTileDragger\n            tile={editTile}\n            tiles={tiles}\n            tileGroup={group}\n            isOpen={isDraggerOpen}\n            setOpen={(isDraggerOpen) => this.setState({ isDraggerOpen })}\n            updateTiles={updateTiles}\n          />\n\n          <Container groupName={`primary`}\n                     key={\"containerGroup\" + group.id.toString()}\n                     style={{...getStyle(group, tiles)}}\n                     getChildPayload={i => getTilesInGroup(tiles, group.id)[i]}\n                     orientation={\"horizontal\"}\n                     dragClass={'dragged'}\n                     onDrop={e => {\n                       handleDrop(group, e, tiles).then(async (newTiles: Tile[]) => {\n                         if (newTiles.map(t => {\n                           const target = historicTiles.find(_t => _t.id === t.id);\n                           if (!target) return false;\n                           return (target.group_id !== t.group_id || target.position !== t.position);\n                         }).some(x => x)) {\n                           this.setState({ updating: [...updating, group.id] }, async () => {\n                             const changedTiles = newTiles.filter(t => {\n                               const target = historicTiles.find(ht => ht.id === t.id);\n                               if (!target) return true;\n\n                               return target.position !== t.position || target.group_id !== t.group_id;\n                             });\n\n                             for (const tile of changedTiles) {\n                               await TileController.updateTile(tile);\n                             }\n\n                             TileController.getTiles().then(async fetchedTiles => {\n                               await updateTiles(fetchedTiles);\n\n                               this.setState({ updating: updating.filter(x => x !== group.id)});\n                             })\n                           });\n                         }\n                       })\n                     }}>\n            <div className={\"updateOverlay \" + (updating.includes(group.id) ? \"active\" : \"\")}>\n              <div className={\"overlayBackground\"} />\n              <h1>Saving changes...</h1>\n            </div>\n            { tiles.sort((a, b) => a.position - b.position).map(t => {\n              return (\n                <DraggableTile key={\"dragMem\" + t.id.toString()} {...{\n                  tile: t, editTile: () => this.setState({editTile: t, isDraggerOpen: true}), deleteTile: this.deleteTile\n                }} />\n              );\n            })}\n          </Container>\n\n          <br />\n\n          <Space direction={\"horizontal\"}>\n            <Button type={\"link\"}\n                    onClick={() => this.setState({\n                      isDraggerOpen: true,\n                      editTile: undefined,\n                    })}\n                    icon={<PlusOutlined />}>\n              Create Tile\n            </Button>\n            <Button type={\"link\"}\n                    danger={true}\n                    onClick={() => {\n                      Swal.fire({\n                        title: 'Do you really want to delete this group?',\n                        text: 'All tiles within this group will be deleted as a result.',\n                        showCancelButton: true,\n                        confirmButtonText: 'Delete',\n                        confirmButtonColor: 'rgb(255, 110, 90)',\n                        showLoaderOnConfirm: true,\n                        allowOutsideClick: () => !Swal.isLoading()\n                      }).then((result) => {\n                        if (result.isConfirmed) {\n                          TileController.deleteTileGroup(group.id).then(() => {\n                            this.props.loadGroups().then(() => {\n                              Swal.fire('Task completed!', '', 'success');\n                            });\n                          });\n                        }\n                      });\n                    }}\n                    icon={<DeleteOutlined />}>\n              Delete Group\n            </Button>\n          </Space>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default connector(TileWrapper);","import React, { Component } from \"react\";\nimport Admin from \"../../index\";\nimport ManageTileGroups from \"../../../../containers/ManageTileGroups\";\nimport { Divider } from \"antd\";\nimport TileWrapper from \"./TileWrapper\";\nimport {Tile, TileGroup} from \"../../../../models/app/Tile\";\nimport \"./style.scss\";\nimport {RootState} from \"../../../../store\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport {TileActions} from \"../../../../store/actions/tiles\";\nimport {DataMartActions} from \"../../../../store/actions/datamart\";\nimport {getTilesInGroup} from \"./TileWrapper/helpers\";\n\nconst mapState = (state: RootState) => ({\n  tiles: state.tiles,\n  tileGroups: state.tileGroups,\n});\n\nconst mapDispatch = {\n  loadAssignments: () => DataMartActions.loadAssignments(),\n  loadDiscussions: () => DataMartActions.loadDiscussions(),\n  updateTiles: (tiles: Tile[]) => TileActions.updateTiles(tiles)\n}\n\nconst connector = connect(mapState, mapDispatch)\ntype PropsFromRedux = ConnectedProps<typeof connector>\n\nclass Tiles extends Component<PropsFromRedux> {\n\n  componentDidMount(): void {\n    this.props.loadDiscussions();\n    this.props.loadAssignments();\n  }\n\n  render(): React.ReactNode {\n    const { tiles, tileGroups } = this.props;\n\n    return (\n      <Admin menuKey={\"tiles\"}>\n        <div id={\"adminTiles\"}>\n          <ManageTileGroups />\n          <h1>Tiles</h1>\n          <p>The overview shows all groups with their respective tiles. Drag around tiles to re-arrange them or create new ones!</p>\n          <Divider />\n\n          { tileGroups.map((group: TileGroup) => (\n            <TileWrapper group={group}\n                         updateTiles={this.props.updateTiles}\n                         tiles={getTilesInGroup(tiles, group.id)}\n                         key={group.id}\n            />\n          ))}\n        </div>\n      </Admin>\n    )\n  }\n}\n\nexport default connector(Tiles);"],"names":["connector","connect","state","user","AdminMenu","this","props","id","name","UserOutlined","selectedKeys","menuKey","icon","DatabaseOutlined","to","AppstoreOutlined","LaptopOutlined","TeamOutlined","TrophyOutlined","title","FundProjectionScreenOutlined","DotChartOutlined","CloudUploadOutlined","NotificationOutlined","ControlOutlined","Component","Admin","isAdmin","AdminHeader","xs","className","children","withAdminRole","mapDispatch","loadGroups","TileActions","tileGroups","ManageTileGroups","text","drawerOpen","direction","PlusOutlined","onClick","setState","width","placement","closable","onClose","open","getContainer","style","position","placeholder","value","onChange","e","target","type","TileController","length","then","tiles","dispatch","updateTile","tile","ActionButtons","loading","handleMenuClick","key","editTile","Swal","showCancelButton","confirmButtonText","confirmButtonColor","showLoaderOnConfirm","allowOutsideClick","result","isConfirmed","deleteTile","items","label","EditOutlined","DeleteOutlined","danger","float","menu","buttonsRender","leftButton","rightButton","visible","React","t","newTile","size","ContentType","getName","content","getIcon","FieldBinaryOutlined","StockOutlined","TileType","tileEntries","DraggableTile","entriesLoaded","entries","updatingNotifications","toggleNotifications","notifications","filter","x","prevProps","prevState","snapshot","undefined","Draggable","gutter","marginTop","textAlign","margin","toString","includes","shape","BellTwoTone","twoToneColor","ExternalDataManager","CreationPreview","getTitle","contentType","getDescription","console","log","md","toLowerCase","getColumns","removeAssignment","canvasAssignments","dataIndex","render","obj","find","c","CheckCircleOutlined","CloseCircleOutlined","assignment","published","_","QuizzesTutorial","centered","onCancel","setOpen","footer","src","height","maxHeight","alt","AssignmentManager","tutorialOpen","addAssignment","a","entry","editState","tile_id","addEntry","activeAssignments","val","checked","graphView","setGraphView","zIndex","message","QuestionOutlined","background","border","padding","cursor","color","textDecoration","columns","removeEntry","pagination","dataSource","options","map","onCreateOption","removeDiscussion","canvasDiscussions","d","discussion","posted_by","posted_at","DiscussionManager","addDiscussion","activeDiscussions","wildcard","setWildcard","GoalRequirement","metaKeys","loadMetaKeys","getExpressionLabel","expression","getMetaKeyLabel","requirement","entry_id","nextProps","nextContext","isNaN","entryOptions","targetTile","updateRequirement","isDisabled","isLoading","meta_key","k","step","disabled","Number","GoalEntry","_initialize","goal","addNewRequirement","requirements","goal_id","updateGoal","r","showIcon","LearningGoalsManager","addNewGoal","goals","setGoals","assignments","discussions","TileCreateEntries","activeGoals","activeEntries","_initializeTile","updateGoals","updateEntries","entryRegistry","error","tileType","Loading","small","VisibilityButton","setVisibility","loadTiles","loadEntries","loadTileGoals","tileGoals","EditTileDragger","updating","create","tileGroup","group_id","graph_view","createEntries","i","response","save","patchedTile","removedEntries","_e","newEntries","deleteEntries","isOpen","window","scrollTo","destroyOnClose","marginBottom","suffix","valueRender","SaveOutlined","isClearable","getStyle","group","minHeight","borderRadius","handleDrop","evt","addedIndex","payload","removedIndex","tilesInGroup","JSON","parse","stringify","getTilesInGroup","dragged","splice","Promise","resolve","groupId","sort","b","TileWrapper","isDraggerOpen","updateTiles","historicTiles","Container","groupName","getChildPayload","orientation","dragClass","onDrop","newTiles","_t","some","changedTiles","ht","fetchedTiles","loadAssignments","DataMartActions","loadDiscussions","Tiles"],"sourceRoot":""}