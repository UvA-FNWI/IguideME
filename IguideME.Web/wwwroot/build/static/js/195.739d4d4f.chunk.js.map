{"version":3,"file":"static/js/195.739d4d4f.chunk.js","mappings":"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","sources":["common/Admin/AdminMenu/index.tsx","common/Admin/index.tsx","components/analytics/ApplicationAnalytics/helpers.ts","components/analytics/ApplicationAnalytics/index.tsx","components/analytics/ApplicationAnalytics/linkcomponent.tsx","components/analytics/TileTraffic/index.tsx","components/analytics/TileConversions/index.tsx","components/analytics/TileConversions/helpers.ts","common/Admin/sections/Analytics/index.tsx"],"sourcesContent":["import React, { Component } from \"react\";\nimport {\n    AppstoreOutlined,\n    ControlOutlined,\n    CloudUploadOutlined,\n    ClusterOutlined,\n    DotChartOutlined,\n    FundProjectionScreenOutlined,\n    LaptopOutlined,\n    TrophyOutlined,\n    NotificationOutlined,\n    DatabaseOutlined,\n    UserOutlined,\n    TeamOutlined\n} from \"@ant-design/icons\";\nimport { Menu } from \"antd\";\nimport { Link } from \"react-router-dom\";\nimport \"./style.scss\";\nimport { RootState } from \"../../../store\";\nimport { connect, ConnectedProps } from \"react-redux\";\n\nconst mapState = (state: RootState) => ({\n    user: state.user\n});\n\nconst connector = connect(mapState)\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\ntype Props = { menuKey: string } & PropsFromRedux;\n\nclass AdminMenu extends Component<Props> {\n\n    render(): React.ReactNode {\n        const { user } = this.props;\n\n        return (\n            <div id={\"adminMenu\"}>\n                <div id={\"user\"}>\n                    <h3>{user ? user.name : \"Loading profile...\"}</h3>\n                    <strong><UserOutlined /> Instructor</strong>\n                </div>\n\n                <Menu selectedKeys={[this.props.menuKey]}>\n                    <Menu.Item key={\"datamart\"} icon={<DatabaseOutlined />}>\n                        <Link to={'/admin'}>\n                            Datamart\n            </Link>\n                    </Menu.Item>\n\n                    <Menu.Item key={\"tiles\"} icon={<AppstoreOutlined />}>\n                        <Link to={'/admin/tiles'}>\n                            Tiles\n            </Link>\n                    </Menu.Item>\n\n                    <Menu.Item key={\"dashboard\"} icon={<LaptopOutlined />}>\n                        <Link to={'/admin/dashboard'}>\n                            Dashboard\n            </Link>\n                    </Menu.Item>\n\n                    <Menu.Item key={\"studentOverview\"} icon={<TeamOutlined />}>\n                        <Link to={'/admin/student-overview'}>\n                            Student Overview\n            </Link>\n                    </Menu.Item>\n                    <Menu.SubMenu key={\"submenu\"} icon={<TrophyOutlined />} title={\"Grades\"}>\n                        {/* TODO: completely remove oldpredictor from code */}\n                        {/* <Menu.Item key={\"gradePredictorOld\"} icon={<FundProjectionScreenOutlined />}>\n                            <Link to={'/admin/grade-predictor-old'}>\n                                Old Predictor\n              </Link>\n                        </Menu.Item> */}\n                        <Menu.Item key={\"gradePredictor\"} icon={<FundProjectionScreenOutlined />}>\n                            <Link to={'/admin/grade-predictor'}>\n                                Predictor\n              </Link>\n                        </Menu.Item>\n                        <Menu.Item key={\"gradeAnalyzer\"} icon={<DotChartOutlined />}>\n                            <Link to={'/admin/grade-analyzer'}>\n                                Analyzer\n              </Link>\n                        </Menu.Item>\n                    </Menu.SubMenu>\n                    <Menu.Item key={\"dataWizard\"} icon={<CloudUploadOutlined />}>\n                        <Link to={'/admin/data-wizard'}>\n                            Data Wizard\n            </Link>\n                    </Menu.Item>\n                    <Menu.Item key={\"analytics\"} icon={<ClusterOutlined />}>\n                        <Link to={'/admin/analytics'}>\n                            Analytics\n            </Link>\n                    </Menu.Item>\n                    <Menu.Item key={\"notificationCentre\"} icon={<NotificationOutlined />}>\n                        <Link to={'/admin/notification-centre'}>\n                            Notification Centre\n            </Link>\n                    </Menu.Item>\n                    <Menu.Item key={\"settings\"} icon={<ControlOutlined />}>\n                        <Link to={'/admin/settings'}>\n                            Settings\n            </Link>\n                    </Menu.Item>\n                </Menu>\n            </div>\n        )\n    }\n}\n\nexport default connector(AdminMenu);\n","import React, { Component } from \"react\";\nimport { withAdminRole } from \"../../hoc/withAdminRole\";\nimport AdminHeader from \"../../containers/AdminHeader\";\nimport { Redirect } from \"react-router-dom\";\nimport { Col, Row } from \"antd\";\nimport AdminMenu from \"./AdminMenu\";\nimport \"./style.scss\";\n\nclass Admin extends Component<any> {\n\n  render(): React.ReactNode {\n    const { isAdmin, menuKey } = this.props;\n    if (!isAdmin) return (<Redirect to={'/'} />);\n\n    return (\n      <div id={\"admin\"}>\n        <AdminHeader />\n        <Row>\n          <Col xs={4}>\n            <AdminMenu menuKey={menuKey} />\n          </Col>\n          <Col xs={20} id={'wrapper'} className={`${ menuKey !== \"settings\" && \"noOverflow\"}`}>\n            { this.props.children }\n          </Col>\n        </Row>\n      </div>\n    )\n  }\n}\n\nexport default withAdminRole(Admin);","export interface TreeNode {\n  name: string;\n  isExpanded?: boolean;\n  children?: TreeNode[];\n}\n\nexport const defaultMargin = { top: 30, left: 30, right: 30, bottom: 70 };\n\nexport const data: TreeNode = {\n  name: 'Start',\n  children: [\n    {\n      name: \"Home\",\n      children: [\n        {\n          name: \"Quizzes\",\n          children: [\n            {\n              name: \"Home\",\n              children: [\n                { name: \"Perusall\" },\n                { name: \"Quizzes\" }\n              ]\n            }\n          ]\n        }\n      ]\n    },\n    {\n      name: 'Quizzes',\n      children: [\n        { name: 'Perusall' },\n        { name: 'Attendance' },\n        {\n          name: 'C',\n          children: [\n            {\n              name: 'C1',\n            },\n            {\n              name: 'D',\n              children: [\n                {\n                  name: 'D1',\n                },\n                {\n                  name: 'D2',\n                },\n              ],\n            },\n          ],\n        },\n      ],\n    },\n    {\n      name: 'Perusall',\n      children: [\n        { name: 'Attendance' },\n        { name: 'B2' },\n        { name: 'B3' }\n      ],\n    },\n  ],\n};\n","import React, { Component } from \"react\";\nimport { Group } from '@visx/group';\nimport { hierarchy, Tree } from '@visx/hierarchy';\nimport { LinearGradient } from '@visx/gradient';\nimport { ParentSize } from '@visx/responsive';\nimport { data, defaultMargin } from \"./helpers\";\nimport getLinkComponent from \"./linkcomponent\";\n\nexport default class ApplicationAnalytics extends Component {\n  render(): React.ReactNode {\n    const margin = defaultMargin;\n\n    return (\n      <div style={{ width: '100%' }}>\n        <ParentSize>\n          { size => {\n            const width = Math.max(size.width, 400);\n            const height = 500;\n\n            const innerWidth = width - margin.left - margin.right;\n            const innerHeight = height - margin.top - margin.bottom;\n\n            let sizeWidth = innerHeight;\n            let sizeHeight = innerWidth;\n            let origin: { x: number; y: number } = { x: 0, y: 0 };\n\n            const LinkComponent = getLinkComponent({\n              layout: \"cartesian\", linkType: \"diagonal\", orientation: \"horizontal\"\n            });\n\n            return (\n              <svg width={width} height={height}>\n                <LinearGradient id=\"links-gradient\" from=\"#fd9b93\" to=\"#fe6e9e\" />\n                <rect width={width} height={height} rx={14} fill=\"#272b4d\" />\n                <Group top={margin.top} left={margin.left}>\n                  <Tree\n                    root={hierarchy(data, d => (d.isExpanded ? null : d.children))}\n                    size={[sizeWidth, sizeHeight]}\n                    separation={(a, b) => (a.parent === b.parent ? 1 : 0.5) / a.depth}\n                  >\n                    { tree => (\n                      <Group top={origin.y} left={origin.x}>\n                        { tree.links().map((link, i) => {\n                          return (\n                            <LinkComponent\n                              key={i}\n                              data={link}\n                              percent={0.5}\n                              stroke=\"rgb(254,110,158,0.6)\"\n                              strokeWidth=\"10\"\n                              fill=\"none\"\n                            />\n                          )\n                        })}\n\n                        { tree.descendants().map((node, key) => {\n                          const width = 80;\n                          const height = 30;\n\n                          let top: number;\n                          let left: number;\n\n                          top = node.x;\n                          left = node.y;\n\n                          return (\n                            <Group top={top} left={left} key={key}>\n                              {node.depth === 0 && (\n                                <circle\n                                  r={12}\n                                  fill=\"url('#links-gradient')\"\n                                  onClick={() => {\n                                    node.data.isExpanded = !node.data.isExpanded;\n                                    console.log(node);\n                                    this.forceUpdate();\n                                  }}\n                                />\n                              )}\n                              {node.depth !== 0 && (\n                                <rect\n                                  height={height}\n                                  width={width}\n                                  y={-height / 2}\n                                  x={-width / 2}\n                                  fill=\"#272b4d\"\n                                  stroke={node.data.children ? '#03c0dc' : '#26deb0'}\n                                  strokeWidth={1}\n                                  strokeDasharray={node.data.children ? '0' : '2,2'}\n                                  strokeOpacity={node.data.children ? 1 : 0.6}\n                                  rx={node.data.children ? 0 : 10}\n                                  onClick={() => {\n                                    node.data.isExpanded = !node.data.isExpanded;\n                                    console.log(node);\n                                    this.forceUpdate();\n                                  }}\n                                />\n                              )}\n                              <text\n                                dy=\".33em\"\n                                fontSize={9}\n                                fontFamily=\"Arial\"\n                                textAnchor=\"middle\"\n                                style={{ pointerEvents: 'none' }}\n                                fill={node.depth === 0 ? '#71248e' : node.children ? 'white' : '#26deb0'}\n                              >\n                                {node.data.name}\n                              </text>\n                            </Group>\n                          );\n                        })}\n                      </Group>\n                    )}\n                  </Tree>\n                </Group>\n              </svg>\n            )\n          }}\n        </ParentSize>\n      </div>\n    )\n  }\n}","import {\n  LinkHorizontal,\n  LinkVertical,\n  LinkRadial,\n  LinkHorizontalStep,\n  LinkVerticalStep,\n  LinkRadialStep,\n  LinkHorizontalCurve,\n  LinkVerticalCurve,\n  LinkRadialCurve,\n  LinkHorizontalLine,\n  LinkVerticalLine,\n  LinkRadialLine,\n} from '@visx/shape';\n\nexport default function getLinkComponent({\n                                           layout,\n                                           linkType,\n                                           orientation,\n                                         }: {\n  layout: string;\n  linkType: string;\n  orientation: string;\n}): React.ComponentType<any> {\n  let LinkComponent: React.ComponentType<any>;\n\n  if (layout === 'polar') {\n    if (linkType === 'step') {\n      LinkComponent = LinkRadialStep;\n    } else if (linkType === 'curve') {\n      LinkComponent = LinkRadialCurve;\n    } else if (linkType === 'line') {\n      LinkComponent = LinkRadialLine;\n    } else {\n      LinkComponent = LinkRadial;\n    }\n  } else if (orientation === 'vertical') {\n    if (linkType === 'step') {\n      LinkComponent = LinkVerticalStep;\n    } else if (linkType === 'curve') {\n      LinkComponent = LinkVerticalCurve;\n    } else if (linkType === 'line') {\n      LinkComponent = LinkVerticalLine;\n    } else {\n      LinkComponent = LinkVertical;\n    }\n  } else if (linkType === 'step') {\n    LinkComponent = LinkHorizontalStep;\n  } else if (linkType === 'curve') {\n    LinkComponent = LinkHorizontalCurve;\n  } else if (linkType === 'line') {\n    LinkComponent = LinkHorizontalLine;\n  } else {\n    LinkComponent = LinkHorizontal;\n  }\n  return LinkComponent;\n}\n","import React, { Component } from \"react\";\nimport { ParentSize } from '@visx/responsive';\nimport { Arc } from '@visx/shape';\nimport { Group } from '@visx/group';\nimport { Chord, Ribbon } from '@visx/chord';\n// import { scaleOrdinal } from '@visx/scale';\nimport { LinearGradient } from '@visx/gradient';\n\n// const pink = '#ff2fab';\n// const orange = '#ffc62e';\n// const purple = '#dc04ff';\n// const purple2 = '#7324ff';\n// const red = '#d04376';\n// const green = '#52f091';\n// const blue = '#04a6ff';\n// const lime = '#00ddc6';\nconst bg = '#e4e3d8';\n\nconst dataMatrix = [\n  [11975, 5871, 8916, 2868, 4229],\n  [1951, 10048, 2060, 6171, 3021],\n  [8010, 16145, 8090, 8045, 312],\n  [1013, 990, 940, 6907, 9210],\n  [4201, 3992, 3912, 6329, 5302]\n];\n\nfunction descending(a: number, b: number): number {\n  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;\n}\n\n// const color = scaleOrdinal<number, string>({\n//   domain: [0, 1, 2, 3, 4],\n//   range: ['url(#gpinkorange)', 'url(#gpurplered)', 'url(#gpurplegreen)', 'url(#gbluelime)', 'url(#gtest)'],\n// });\n\nexport default class TileTraffic extends Component {\n  render(): React.ReactNode {\n    const colors = [\"blue\", \"red\", \"orange\", \"green\", \"pink\"];\n    let colorCombos: string[][] = [];\n\n    for (let i = 0; i < colors.length - 1; i++) {\n      // This is where you'll capture that last value\n      colorCombos.push([colors[i], colors[i]]);\n      for (let j = i + 1; j < colors.length; j++) {\n        colorCombos.push([colors[i], colors[j]]);\n        colorCombos.push([colors[j], colors[i]]);\n      }\n    }\n\n    return (\n      <div style={{width: '100%'}}>\n        <ParentSize>\n          { (parent) => {\n            const centerSize = 10;\n            const height = ((parent.width || 200)) / 2;\n            const width = ((parent.width || 200));\n\n            const outerRadius = Math.min(width, height) * 0.5 - (centerSize + 10);\n            const innerRadius = outerRadius - centerSize;\n\n            console.log(colorCombos);\n            return (\n              <svg width={width} height={height}>\n                { colorCombos.map(([from, to]) =>\n                  <LinearGradient id={\"g\" + from + to} from={from} to={to} vertical={false} />\n                )}\n\n                <rect width={width} height={height} fill={bg} rx={14} />\n                <Group top={height / 2} left={width / 2}>\n                  <Chord matrix={dataMatrix} padAngle={0.05} sortSubgroups={descending}>\n                    {(master) => (\n                      <g>\n                        { master.chords.groups.map((group, i) => {\n                          return (\n                            <Arc\n                              key={`key-${i}`}\n                              data={group}\n                              innerRadius={innerRadius}\n                              outerRadius={outerRadius}\n                              fill={colors[i]}//color(i)}//color(i)}\n                              onClick={() => {\n                              }}\n                            />\n                          )\n                        })}\n                        { master.chords.map((chord, i) => {\n                          return (\n                            <Ribbon\n                              key={`ribbon-${i}`}\n                              chord={chord}\n                              radius={innerRadius}\n                              fill={`url(#g${colors[chord.source.index]}${colors[chord.target.index]})`}\n                              fillOpacity={0.75}\n                              onClick={() => {\n                                alert(`${chord.source.index}/${chord.target.index}`);\n                              }}\n                            />\n                          );\n                        })}\n                      </g>\n                    )}\n                  </Chord>\n                </Group>\n              </svg>\n            )\n          }}\n        </ParentSize>\n      </div>\n    )\n  }\n}\n","import React, { Component } from \"react\";\nimport { Group } from '@visx/group';\nimport { AxisBottom } from '@visx/axis';\nimport { ParentSize } from '@visx/responsive';\nimport {getDateScale, getTemperatureScale} from \"./helpers\";\nimport moment from \"moment\";\nimport {Select} from \"antd\";\n\n// const purple1 = '#6c5efb';\n// const purple2 = '#c998ff';\nconst purple3 = '#a44afe';\nconst background = '#eaedff';\nconst margin = { top: 40, right: 0, bottom: 0, left: 0 };\n\nconst data = [\n  { date: moment().add(0, \"days\"), \"Quizzes\": \"100\", \"Perusall\": \"83\" },\n  { date: moment().add(1, \"days\"), \"Quizzes\": \"104\", \"Perusall\": \"63\" },\n  { date: moment().add(2, \"days\"), \"Quizzes\": \"140\", \"Perusall\": \"98\" },\n  { date: moment().add(3, \"days\"), \"Quizzes\": \"170\", \"Perusall\": \"112\" },\n  { date: moment().add(4, \"days\"), \"Quizzes\": \"130\", \"Perusall\": \"120\" },\n  { date: moment().add(5, \"days\"), \"Quizzes\": \"120\", \"Perusall\": \"140\" },\n  { date: moment().add(6, \"days\"), \"Quizzes\": \"180\", \"Perusall\": \"195\" },\n]\n\nexport default class TileConversions extends Component {\n  render(): React.ReactNode {\n    return (\n      <div style={{width: '100%'}}>\n        <Select\n          mode=\"multiple\"\n          allowClear\n          style={{ marginBottom: 20, width: 300 }}\n          placeholder=\"Please select\"\n          defaultValue={['quizzes', 'perusall']}\n          onChange={() => {}}\n        >\n          <Select.Option value={'quizzes'}>\n            Quizzes\n          </Select.Option>\n          <Select.Option value={'perusall'}>\n            Perusall\n          </Select.Option>\n        </Select>\n\n        <ParentSize>\n          { (parent) => {\n            const width = parent.width;\n            const height = 500;\n\n            const xMax = width;\n            const yMax = height - margin.top - 100;\n            const keys = Object.keys(data[0]).filter(x => x !== 'date');\n\n            const temperatureTotals = data.reduce((allTotals, currentDate: any) => {\n              const totalTemperature = keys.reduce((dailyTotal, k) => {\n                dailyTotal += Number(currentDate[k]);\n                return dailyTotal;\n              }, 0);\n              allTotals.push(totalTemperature);\n              return allTotals;\n            }, [] as number[]);\n\n            const dateScale = getDateScale(data);\n            const temperatureScale = getTemperatureScale(temperatureTotals);\n            // const colorScale = getColorScale(keys, [purple1, purple2, purple3]);\n\n            dateScale.rangeRound([0, xMax]);\n            temperatureScale.range([yMax, 0]);\n            return (\n              <svg width={width} height={height}>\n                <rect x={0} y={0} width={width} height={height} fill={background} rx={14} />\n\n\n                <Group top={margin.top}>\n\n                </Group>\n                <AxisBottom\n                  top={yMax + margin.top}\n                  scale={dateScale}\n                  tickFormat={(d: any) => d}\n                  stroke={purple3}\n                  tickStroke={purple3}\n                  tickLabelProps={() => ({\n                    fill: purple3,\n                    fontSize: 11,\n                    textAnchor: 'middle',\n                  })}\n                />\n              </svg>\n            )\n          }}\n        </ParentSize>\n      </div>\n    )\n  }\n}","import { scaleBand, scaleLinear, scaleOrdinal } from \"d3-scale\";\n\nconst getDate = (d: any) => d.date.format(\"YYYY-MM-DD\");\n\nexport const getDateScale = (data: any) => {\n  return scaleBand<string>()\n    .domain(data.map((d: any) => getDate(d)))\n    .padding(0.2);\n}\n\nexport const getTemperatureScale = (totals: number[]) => {\n  return scaleLinear<number>()\n    .domain([0, Math.max(...totals)])\n    .nice();\n}\n\nexport const getColorScale = (keys: string[], colors: string[]) => {\n  return scaleOrdinal<string, string>()\n    .domain(keys)\n    .range(colors);\n}","import React, { Component } from \"react\";\nimport Admin from \"../../index\";\nimport { Divider } from \"antd\";\nimport { IProps } from \"./types\";\nimport ApplicationAnalytics from \"../../../../components/analytics/ApplicationAnalytics\";\nimport TileTraffic from \"../../../../components/analytics/TileTraffic\";\nimport TileConversions from \"../../../../components/analytics/TileConversions\";\n\nexport default class Analytics extends Component<IProps> {\n  render(): React.ReactNode {\n    return (\n      <Admin menuKey={\"analytics\"}>\n        <h1>Analytics</h1>\n\n        <Divider />\n\n        <h2>User interactions</h2>\n        <p>Graph overview of all user interactions.</p>\n        {/* TODO: Sadly this is not usable and we need to create a graph ourselves */}\n        <ApplicationAnalytics />\n\n        <Divider />\n\n        <h2>Tile traffic</h2>\n        <p>Each ribbon shows the traffic volume between all views.</p>\n        <TileTraffic />\n\n        <Divider />\n\n        <h2>Tile conversions</h2>\n        <TileConversions />\n      </Admin>\n    )\n  }\n}"],"names":["connector","connect","state","user","AdminMenu","this","props","id","name","UserOutlined","selectedKeys","menuKey","icon","DatabaseOutlined","to","AppstoreOutlined","LaptopOutlined","TeamOutlined","TrophyOutlined","title","FundProjectionScreenOutlined","DotChartOutlined","CloudUploadOutlined","ClusterOutlined","NotificationOutlined","ControlOutlined","Component","Admin","isAdmin","AdminHeader","xs","className","children","withAdminRole","defaultMargin","top","left","right","bottom","data","ApplicationAnalytics","margin","style","width","ParentSize","size","Math","max","sizeWidth","sizeHeight","origin","LinkComponent","layout","linkType","orientation","LinkRadialStep","LinkRadialCurve","LinkRadialLine","LinkRadial","LinkVerticalStep","LinkVerticalCurve","LinkVerticalLine","LinkVertical","LinkHorizontalStep","LinkHorizontalCurve","LinkHorizontalLine","LinkHorizontal","getLinkComponent","height","LinearGradient","from","rx","fill","Group","Tree","root","hierarchy","d","isExpanded","separation","a","b","parent","depth","tree","links","map","link","i","percent","stroke","strokeWidth","descendants","node","key","x","y","r","onClick","console","log","forceUpdate","strokeDasharray","strokeOpacity","dy","fontSize","fontFamily","textAnchor","pointerEvents","dataMatrix","descending","NaN","TileTraffic","colors","colorCombos","length","push","j","outerRadius","min","innerRadius","vertical","Chord","matrix","padAngle","sortSubgroups","master","chords","groups","group","Arc","chord","Ribbon","radius","source","index","target","fillOpacity","alert","purple3","date","moment","add","TileConversions","mode","allowClear","marginBottom","placeholder","defaultValue","onChange","value","totals","xMax","yMax","keys","Object","filter","temperatureTotals","reduce","allTotals","currentDate","totalTemperature","dailyTotal","k","Number","dateScale","scaleBand","domain","format","getDate","padding","getDateScale","temperatureScale","scaleLinear","nice","rangeRound","range","AxisBottom","scale","tickFormat","tickStroke","tickLabelProps","Analytics"],"sourceRoot":""}