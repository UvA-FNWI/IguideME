{"version":3,"file":"static/js/493.7d388997.chunk.js","mappings":"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","sources":["api/controllers/student.ts","common/Admin/AdminMenu/index.tsx","common/Admin/index.tsx","models/app/SyncProvider.ts","components/managers/SyncManager/SyncOverview/index.tsx","components/managers/SyncManager/helpers.ts","components/managers/SyncManager/index.tsx","common/Admin/sections/DataMart/index.tsx","containers/AdminHeader/index.tsx"],"sourcesContent":["import { debug } from \"../../config/config\";\nimport Controller from \"../controller\";\nimport {CanvasStudent} from \"../../models/canvas/Student\";\nimport {ConsentData} from \"../../models/app/ConsentData\";\nimport {GoalData} from \"../../models/app/GoalData\";\nimport {MOCK_STUDENTS, MOCK_CONSENTS, MOCK_GOALS} from \"../../mocks/students\";\nimport {delay} from \"../../utils/mockRequest\";\n\nexport default class StudentController extends Controller {\n\n  static getStudents(): Promise<CanvasStudent[]> {\n    if (debug()) return delay(MOCK_STUDENTS);\n\n    return this.client.get(\n      `students`\n    ).then(response => response.data);\n  }\n\n  static getConsents(): Promise<ConsentData[]> {\n    if (debug()) return delay(MOCK_CONSENTS);\n\n    return this.client.get(\n      `consents`\n    ).then(response => response.data);\n\n  }\n  static getGoalgrades(): Promise<GoalData[]> {\n    if (debug()) return delay(MOCK_GOALS);\n\n    return this.client.get(\n      `goal-grades`\n    ).then(response => response.data);\n  }\n}","import React, { Component } from \"react\";\nimport {\n    AppstoreOutlined,\n    ControlOutlined,\n    CloudUploadOutlined,\n    ClusterOutlined,\n    DotChartOutlined,\n    FundProjectionScreenOutlined,\n    LaptopOutlined,\n    TrophyOutlined,\n    NotificationOutlined,\n    DatabaseOutlined,\n    UserOutlined,\n    TeamOutlined\n} from \"@ant-design/icons\";\nimport { Menu } from \"antd\";\nimport { Link } from \"react-router-dom\";\nimport \"./style.scss\";\nimport { RootState } from \"../../../store\";\nimport { connect, ConnectedProps } from \"react-redux\";\n\nconst mapState = (state: RootState) => ({\n    user: state.user\n});\n\nconst connector = connect(mapState)\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\ntype Props = { menuKey: string } & PropsFromRedux;\n\nclass AdminMenu extends Component<Props> {\n\n    render(): React.ReactNode {\n        const { user } = this.props;\n\n        return (\n            <div id={\"adminMenu\"}>\n                <div id={\"user\"}>\n                    <h3>{user ? user.name : \"Loading profile...\"}</h3>\n                    <strong><UserOutlined /> Instructor</strong>\n                </div>\n\n                <Menu selectedKeys={[this.props.menuKey]}>\n                    <Menu.Item key={\"datamart\"} icon={<DatabaseOutlined />}>\n                        <Link to={'/admin'}>\n                            Datamart\n            </Link>\n                    </Menu.Item>\n\n                    <Menu.Item key={\"tiles\"} icon={<AppstoreOutlined />}>\n                        <Link to={'/admin/tiles'}>\n                            Tiles\n            </Link>\n                    </Menu.Item>\n\n                    <Menu.Item key={\"dashboard\"} icon={<LaptopOutlined />}>\n                        <Link to={'/admin/dashboard'}>\n                            Dashboard\n            </Link>\n                    </Menu.Item>\n\n                    <Menu.Item key={\"studentOverview\"} icon={<TeamOutlined />}>\n                        <Link to={'/admin/student-overview'}>\n                            Student Overview\n            </Link>\n                    </Menu.Item>\n                    <Menu.SubMenu key={\"submenu\"} icon={<TrophyOutlined />} title={\"Grades\"}>\n                        <Menu.Item key={\"gradePredictorOld\"} icon={<FundProjectionScreenOutlined />}>\n                            <Link to={'/admin/grade-predictor-old'}>\n                                Old Predictor\n              </Link>\n                        </Menu.Item>\n                        <Menu.Item key={\"gradePredictor\"} icon={<FundProjectionScreenOutlined />}>\n                            <Link to={'/admin/grade-predictor'}>\n                                Predictor\n              </Link>\n                        </Menu.Item>\n                        <Menu.Item key={\"gradeAnalyzer\"} icon={<DotChartOutlined />}>\n                            <Link to={'/admin/grade-analyzer'}>\n                                Analyzer\n              </Link>\n                        </Menu.Item>\n                    </Menu.SubMenu>\n                    <Menu.Item key={\"dataWizard\"} icon={<CloudUploadOutlined />}>\n                        <Link to={'/admin/data-wizard'}>\n                            Data Wizard\n            </Link>\n                    </Menu.Item>\n                    <Menu.Item key={\"analytics\"} icon={<ClusterOutlined />}>\n                        <Link to={'/admin/analytics'}>\n                            Analytics\n            </Link>\n                    </Menu.Item>\n                    <Menu.Item key={\"notificationCentre\"} icon={<NotificationOutlined />}>\n                        <Link to={'/admin/notification-centre'}>\n                            Notification Centre\n            </Link>\n                    </Menu.Item>\n                    <Menu.Item key={\"settings\"} icon={<ControlOutlined />}>\n                        <Link to={'/admin/settings'}>\n                            Settings\n            </Link>\n                    </Menu.Item>\n                </Menu>\n            </div>\n        )\n    }\n}\n\nexport default connector(AdminMenu);\n","import React, { Component } from \"react\";\nimport { withAdminRole } from \"../../hoc/withAdminRole\";\nimport AdminHeader from \"../../containers/AdminHeader\";\nimport { Redirect } from \"react-router-dom\";\nimport { Col, Row } from \"antd\";\nimport AdminMenu from \"./AdminMenu\";\nimport \"./style.scss\";\n\nclass Admin extends Component<any> {\n\n  render(): React.ReactNode {\n    const { isAdmin, menuKey } = this.props;\n    if (!isAdmin) return (<Redirect to={'/'} />);\n\n    return (\n      <div id={\"admin\"}>\n        <AdminHeader />\n        <Row>\n          <Col xs={4}>\n            <AdminMenu menuKey={menuKey} />\n          </Col>\n          <Col xs={20} id={'wrapper'} className={`${ menuKey !== \"settings\" && \"noOverflow\"}`}>\n            { this.props.children }\n          </Col>\n        </Row>\n      </div>\n    )\n  }\n}\n\nexport default withAdminRole(Admin);","export enum SyncProvider {\n  'BOOT_UP' = 'tasks.boot-up',\n  'STUDENTS' = 'tasks.students',\n  'QUIZZES' = 'tasks.quizzes',\n  'DISCUSSIONS' = 'tasks.discussions',\n  'ASSIGNMENTS' = 'tasks.assignments',\n  'SUBMISSIONS' = 'tasks.submissions',\n  'GRADE_PREDICTOR' = 'tasks.grade-predictor',\n  'PEER_GROUPS' = 'tasks.peer-groups',\n  'DONE' = 'tasks.done'\n}\n\nexport interface Synchronization {\n  key: string,\n  start_timestamp: string,\n  end_timestamp: string | null,\n  hash: string,\n  duration: string,\n  invoked: string,\n  status: string\n}","import React, { Component } from \"react\";\nimport { Button, Card, /* Subtitle2, Caption, Divider */ } from 'ui-neumorphism'\nimport {Col, Row} from \"antd\";\nimport \"./style.scss\";\nimport {IProps, IState} from \"./types\";\nimport Swal from \"sweetalert2\";\n\nexport default class SyncOverview extends Component<IProps, IState> {\n\n  render(): React.ReactNode {\n    const { startSync, abortSync, elapsed } = this.props;\n    return (\n      <div>\n        <div>\n          <Card\n            width={208}\n            height={208}\n            elevation={3}\n            className='clock-wrapper'\n            style={{ borderRadius: '208px' }}\n          >\n            <Card\n              flat\n              width={208}\n              height={208}\n              style={{ borderRadius: '208px' }}\n              className={`clock-dashed ${elapsed ? 'clock-dashed--animating' : ''}`}\n            />\n            <span className='elapsed-time'>\n              <h3><small>elapsed time</small><br />{ elapsed ? elapsed : \"Idle\"}</h3>\n            </span>\n          </Card>\n        </div>\n\n        <br />\n\n        <Row gutter={10}>\n          <Col xs={12}>\n            <Button color='rgb(0, 185, 120)'\n                    disabled={elapsed !== undefined}\n                    block\n                    onClick={startSync}>\n              synchronize\n            </Button>\n          </Col>\n\n          <Col xs={12}>\n            <Button disabled={elapsed === undefined}\n                    color={'rgb(255, 110, 90)'}\n                    block\n                    onClick={() => {\n              Swal.fire({\n                title: 'Do you really want to abort the synchronization?',\n                text: `It will be unsuccessful!`,\n                icon: 'warning',\n                focusCancel: true,\n                showCancelButton: true,\n                confirmButtonText: 'Abort',\n                cancelButtonText: 'Cancel',\n                customClass: {\n                }\n              }).then((result) => {\n                if (result.value) {\n                  abortSync();\n                  Swal.fire(\n                    'Synchronization aborted!',\n                    'The synchronization has stopped and the most recent data will be used instead.',\n                    'error',\n                  )\n                }\n              }\n            )}}>\n              abort\n            </Button>\n          </Col>\n        </Row>\n      </div>\n    )\n  }\n}","import moment from \"moment\";\nimport { SyncProvider } from \"../../../models/app/SyncProvider\";\n\nexport const elapsedTime = (start: moment.Moment | undefined) => {\n  if (!start) return undefined;\n\n  return moment(moment.utc().diff(start)).utcOffset(0).format(\"HH:mm:ss\");\n}\n\n// TODO: change to a enum or dict/map probably.\nexport const syncStates = [\n  {\n    id: SyncProvider.BOOT_UP, title: \"Boot-up\", description: \"Establish a connection.\"\n  }, {\n    id: SyncProvider.STUDENTS, title: \"Students\", description: \"Register enrolled students.\"\n  }, {\n    id: SyncProvider.QUIZZES, title: \"Quizzes\", description: \"Obtain available quizzes.\"\n  }, {\n    id: SyncProvider.DISCUSSIONS, title: \"Discussions\", description: \"Obtain posted discussions.\"\n  }, {\n    id: SyncProvider.ASSIGNMENTS, title: \"Assignments\", description: \"Obtain available assignments.\"\n  }, {\n    id: SyncProvider.SUBMISSIONS, title: \"Submissions\", description: \"Obtain submissions from students.\"\n  }, {\n    id: SyncProvider.GRADE_PREDICTOR, title: \"Grade Prediction\", description: \"Predict grade per student.\"\n  }, {\n    id: SyncProvider.PEER_GROUPS, title: \"Peer Groups\", description: \"Assign student peer groups.\"\n  }\n]","import React, { Component } from \"react\";\nimport { Badge, Col, message, Row } from \"antd\";\nimport SyncOverview from \"./SyncOverview\";\nimport { elapsedTime, syncStates } from \"./helpers\";\nimport { Alert, Caption, Card } from \"ui-neumorphism\";\nimport { IProps, IState } from \"./types\";\nimport DataMartController from \"../../../api/controllers/datamart\";\nimport moment from \"moment\";\nimport { SyncProvider } from \"../../../models/app/SyncProvider\";\nimport Loading from \"../../utils/Loading\";\nimport { debug } from \"../../../config/config\";\n\nexport default class SyncManager extends Component<IProps, IState> {\n    private interval: NodeJS.Timeout | undefined;\n\n    state = {\n        loaded: false,\n        start: undefined,\n        elapsedTime: undefined,\n        datamartError: false,\n        currentTask: null,\n        completedTasks: [],\n        currentTasks: []\n    }\n\n    componentDidMount(): void {\n        this.setState({ loaded: true });\n    }\n\n    componentWillUnmount(): void {\n        if (debug()) localStorage.removeItem(\"debugHandshake\");\n    }\n\n    badgeStyle = (task: string): { color: \"success\" | \"warning\" | \"error\", text: string } => {\n        const { currentTask } = this.state;\n        const idx = syncStates.findIndex(ss => ss.id === task);\n        const currentIdx = syncStates.findIndex(ss => ss.id === currentTask);\n\n        if (idx < currentIdx) {\n            return { color: 'success', text: \"Completed\" }\n        } else if (idx === currentIdx) {\n            return { color: 'warning', text: \"In-progress\" }\n        } else return { color: 'error', text: \"Unstarted\" }\n    }\n\n    startSync = () => {\n        // initialize error prompts\n        this.setState({ datamartError: false });\n\n        DataMartController.startNewSync().then(success => {\n            if (success) {\n                message.success(\"Sync started!\");\n                this.setState({ start: moment.utc() })\n                this.pollSync();\n            } else this.setState({ datamartError: true });\n        });\n    }\n\n    pollSync = () => {\n        // start interval updating the admin's UI every second\n        this.interval = setInterval(async () => {\n            //export const MOCK_DATAMART_STATUS = MOCK_DATAMART_STATUS_BUSY;\n            await DataMartController.getStatus().then(data => {\n                const keys = Object.keys(data);\n                const current = keys.find(k => data[k].progressInformation !== SyncProvider.DONE);\n\n                if (!current) {\n                    this.setState({ start: undefined });\n                    clearInterval(this.interval!);\n                    return;\n                }\n\n                this.setState({\n                    elapsedTime: elapsedTime(moment.utc(data[current].startTime)),\n                    currentTask: data[current].progressInformation\n                })\n            });\n        }, 1000);\n    }\n\n    abortSync = () => {\n        // TODO: stop sync on server as well x)\n        if (this.interval) clearInterval(this.interval);\n        this.setState({ start: undefined, completedTasks: [], currentTasks: [] });\n    }\n\n    render(): React.ReactNode {\n        const { loaded, datamartError } = this.state;\n\n        if (!loaded) return <Loading small={true} />;\n\n        return (\n            <Row gutter={[20, 20]}>\n                <Col xs={24} md={12} lg={9}>\n                    <SyncOverview startSync={this.startSync}\n                        abortSync={this.abortSync}\n                        elapsed={elapsedTime(this.state.start)} />\n\n                    {datamartError &&\n                        <Alert type='error' outlined style={{ marginTop: 20 }}>\n                            Failed to reach datamart. Try again later!\n          </Alert>\n                    }\n                </Col>\n                <Col xs={24} md={12} lg={15}>\n                    <Card elevation={1} style={{ padding: 10, backgroundColor: 'rgb(246, 248, 250)' }}>\n                        <Row gutter={[10, 10]}>\n                            {syncStates.map(state => (\n                                <Col key={state.id} xs={24} lg={12}>\n                                    <Card style={{ display: 'flex', alignItems: 'center' }} elevation={1}>\n                                        <Card flat style={{ width: '100%', padding: 20 }}>\n                                            <Badge status={this.badgeStyle(state.id).color}\n                                                text={this.badgeStyle(state.id).text}\n                                                style={{ float: 'right' }} />\n                                            <h4 style={{ margin: 0 }}>{state.title}</h4>\n                                            <Caption secondary component='span'>\n                                                {state.description}\n                                            </Caption>\n                                        </Card>\n                                    </Card>\n                                </Col>\n                            ))}\n                        </Row>\n                    </Card>\n                </Col>\n            </Row>\n        )\n    }\n}\n","import React, { Component } from \"react\";\nimport { Divider } from 'ui-neumorphism'\nimport { Spin, Table } from \"antd\";\nimport Admin from \"../../index\";\nimport { IProps, IState } from \"./types\";\nimport SyncManager from \"../../../../components/managers/SyncManager\";\nimport DataMartController from \"../../../../api/controllers/datamart\";\nimport { Synchronization } from \"../../../../models/app/SyncProvider\";\nimport moment from \"moment\";\nimport \"./style.scss\";\n\nexport default class DataMart extends Component<IProps, IState> {\n\n    state = {\n        loaded: false,\n        synchronizations: []\n    }\n\n    componentDidMount(): void {\n        DataMartController.getSynchronizations().then((synchronizations: Synchronization[]) =>\n            this.setState({\n                // sort synchronizations by their start datetime\n                synchronizations: synchronizations.sort((a, b) =>\n                    moment(a.start_timestamp, 'MM/DD/YYYY HH:mm:ss').isBefore(\n                        moment(b.start_timestamp, 'MM/DD/YYYY HH:mm:ss')\n                    ) ? 1 : -1\n                    ),\n                loaded: true,\n            })\n        );\n    }\n\n    render(): React.ReactNode {\n        const { loaded, synchronizations }: IState = this.state;\n        const backendFormat = 'MM/DD/YYYY HH:mm:ss'\n        const timeFormat = 'MMMM Do[,] YYYY [at] HH:mm';\n\n        synchronizations.map(s => {\n            const start = moment.utc(s.start_timestamp, backendFormat).local()\n            const end = moment.utc(s.end_timestamp, backendFormat).local()\n            s.start_timestamp = start.format(timeFormat);\n            if (end.isBefore(start)) {\n                s.end_timestamp = \"\";\n                s.duration = \"\";\n            } else {\n                s.end_timestamp = end.format(timeFormat);\n                s.duration = moment.utc(parseInt(s.duration)*1000).format('HH:mm:ss');\n            }\n            return s;\n        });\n\n        const successfulSyncs = loaded ? synchronizations.filter(a => a.status === \"COMPLETE\") : [];\n        const latestSuccessful = successfulSyncs.length > 0 ? successfulSyncs[0] : null;\n\n        return (\n            <Admin menuKey={\"datamart\"}>\n                <div id={\"datamart\"}>\n                    <h1>Datamart</h1>\n                    {loaded ?\n                        (latestSuccessful ?\n                            <p>\n                                The latest successful synchronization took place on\n                                <b> {moment.utc(latestSuccessful.start_timestamp, timeFormat).format(timeFormat)} </b>\n                                    <small>({moment.utc(latestSuccessful.start_timestamp, timeFormat).fromNow()})</small>.\n                                Synchronizations run automatically at 03:00AM (UTC time).\n                            </p> :\n                            <p>No historic synchronizations available.</p>) :\n                        <div><Spin /> Retrieving latest synchronization...</div>\n                    }\n\n                    <Divider dense style={{ margin: '10px 0' }} />\n\n                    <SyncManager />\n\n                    {loaded &&\n                        <React.Fragment>\n                            <h1 style={{ marginTop: 20 }}>Historic versions</h1>\n                            <Divider dense style={{ margin: '10px 0' }} />\n\n                            <Table scroll={{ x: 240 }} dataSource={synchronizations} columns={[\n                                {\n                                    title: 'Start timestamp',\n                                    dataIndex: 'start_timestamp',\n                                    key: 'start_timestamp',\n                                },\n                                {\n                                    title: 'End timestamp',\n                                    dataIndex: 'end_timestamp',\n                                    key: 'end_timestamp',\n                                },\n                                {\n                                    title: 'Duration',\n                                    dataIndex: 'duration',\n                                    key: 'duration',\n                                },\n                                {\n                                    title: 'Hash',\n                                    dataIndex: 'hash',\n                                    key: 'hash',\n                                    render: (val, row) => <code>{val}</code>\n                                },\n                                {\n                                    title: 'Status',\n                                    dataIndex: 'status',\n                                    key: 'status',\n                                },\n                            ]} />\n                        </React.Fragment>\n                    }\n                </div>\n            </Admin>\n        )\n    }\n}\n","import React, { Component } from \"react\";\nimport Select from \"react-select\";\nimport {Button, Tooltip} from \"antd\";\nimport {SyncOutlined} from \"@ant-design/icons\";\nimport { Link } from \"react-router-dom\";\nimport {IProps, IState} from \"./types\";\nimport StudentController from \"../../api/controllers/student\";\nimport {CanvasStudent} from \"../../models/canvas/Student\";\nimport {debug} from \"../../config/config\";\nimport {RootState} from \"../../store\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport \"./style.scss\";\n\nconst mapState = (state: RootState) => ({\n  course: state.course,\n  user: state.user\n});\n\nconst connector = connect(mapState);\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\ntype Props = IProps & PropsFromRedux;\n\nclass AdminHeader extends Component<Props, IState> {\n\n  state = {\n    loaded: false,\n    students: []\n  }\n\n  componentDidMount(): void {\n    const { studentPickView } = this.props;\n\n    if (studentPickView) {\n      StudentController.getStudents().then(students => this.setState({ students, loaded: true }));\n    }\n\n    this.setState({ loaded: true });\n  }\n\n  renderInner(): React.ReactNode {\n    if (this.props.studentPickView) {\n      const { students, loaded } = this.state;\n      return (\n        <Select id={\"studentPicker\"}\n                isLoading={!loaded}\n                options={students.sort(\n                  (a: CanvasStudent, b: CanvasStudent) => a.name.localeCompare(b.name)\n                ).map((s: CanvasStudent) => ({ label: s.name, value: s.login_id}))}\n                placeholder={\"Choose a student\"}\n                onChange={(e) => this.props.setStudent!(\n                  e ? students.find((s: CanvasStudent) => s.login_id === e!.value)! : null\n                )}\n                isClearable={true}\n                styles={{\n                  control: (provided, state) => ({\n                    ...provided,\n                    backgroundColor: 'transparent',\n                    color: 'white',\n                    border: '1px solid white'\n                  }),\n                  singleValue: (provided, state) => {\n                    return {...provided, color: 'white'};\n                  }\n                }}\n        />\n      );\n    }\n\n    return (\n      <div id={\"inner\"}>\n        <h2>{ this.props.course ? this.props.course.course_name : \"Loading course...\" }</h2>\n      </div>\n    );\n  }\n\n  render(): React.ReactNode {\n    return (\n      <React.Fragment>\n        <div id={\"adminHeader\"}>\n          { this.props.studentPickView ?\n            <Link to={'/admin'} style={{ float: 'right' }}>\n              <h3>Admin Panel</h3>\n            </Link> :\n            <div style={{float: 'right', padding: 20}}>\n              <Tooltip title={\"Reload data\"}>\n                <Button id={\"reload\"}\n                        shape=\"circle\"\n                        style={{backgroundColor: 'rgba(255, 255, 255, 0.5)', color: 'white'}}\n                        icon={<SyncOutlined />} />\n              </Tooltip>\n            </div>\n          }\n\n          <div id={\"navbarContent\"}>\n            <div id={\"brand\"}>\n              <Link to={'/'}>\n                <h1>IGuideME</h1>\n              </Link>\n            </div>\n\n            { this.renderInner() }\n          </div>\n        </div>\n        { debug() &&\n          (<div id={\"debugNotice\"}>\n            Application is running in <strong>demo</strong> mode. Changes will not be saved!\n          </div>)\n        }\n      </React.Fragment>\n    );\n  }\n}\n\nexport default connector(AdminHeader);"],"names":["StudentController","debug","delay","MOCK_STUDENTS","this","client","get","then","response","data","MOCK_CONSENTS","MOCK_GOALS","Controller","connector","connect","state","user","AdminMenu","props","id","name","UserOutlined","selectedKeys","menuKey","icon","DatabaseOutlined","to","AppstoreOutlined","LaptopOutlined","TeamOutlined","TrophyOutlined","title","FundProjectionScreenOutlined","DotChartOutlined","CloudUploadOutlined","ClusterOutlined","NotificationOutlined","ControlOutlined","Component","Admin","isAdmin","AdminHeader","xs","className","children","withAdminRole","SyncProvider","SyncOverview","startSync","abortSync","elapsed","width","height","elevation","style","borderRadius","flat","gutter","color","disabled","undefined","block","onClick","Swal","text","focusCancel","showCancelButton","confirmButtonText","cancelButtonText","customClass","result","value","elapsedTime","start","moment","diff","utcOffset","format","syncStates","BOOT_UP","description","STUDENTS","QUIZZES","DISCUSSIONS","ASSIGNMENTS","SUBMISSIONS","GRADE_PREDICTOR","PEER_GROUPS","SyncManager","interval","loaded","datamartError","currentTask","completedTasks","currentTasks","badgeStyle","task","idx","findIndex","ss","currentIdx","setState","DataMartController","success","message","pollSync","setInterval","current","Object","keys","find","k","progressInformation","DONE","clearInterval","startTime","localStorage","removeItem","md","lg","type","outlined","marginTop","padding","backgroundColor","map","display","alignItems","status","float","margin","secondary","component","Loading","small","DataMart","synchronizations","sort","a","b","start_timestamp","isBefore","backendFormat","timeFormat","s","local","end","end_timestamp","duration","parseInt","successfulSyncs","filter","latestSuccessful","length","fromNow","dense","scroll","x","dataSource","columns","dataIndex","key","render","val","row","course","students","studentPickView","isLoading","options","localeCompare","label","login_id","placeholder","onChange","e","setStudent","isClearable","styles","control","provided","border","singleValue","course_name","shape","SyncOutlined","renderInner"],"sourceRoot":""}