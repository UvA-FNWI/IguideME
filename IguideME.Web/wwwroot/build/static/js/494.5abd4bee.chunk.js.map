{"version":3,"file":"static/js/494.5abd4bee.chunk.js","mappings":"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","sources":["api/controllers/student.ts","components/StudentDashboard/TileGroup/Tile/PeerComparison/index.tsx","utils/grades.ts","components/StudentDashboard/TileGroup/Tile/helpers.ts","containers/GradeStatistic/index.tsx","components/StudentDashboard/TileGroup/Tile/index.tsx","components/StudentDashboard/TileGroup/index.tsx","components/StudentDashboard/TileDetail/BinaryGrades/index.tsx","components/StudentDashboard/TileDetail/EntriesList/EntryItem/index.tsx","components/StudentDashboard/TileDetail/EntriesList/index.tsx","components/StudentDashboard/TileDetail/GradePrediction/index.tsx","components/StudentDashboard/TileDetail/DiscussionsList/index.tsx","components/StudentDashboard/TileDetail/LearningOutcomes/index.tsx","components/StudentDashboard/TileDetail/index.tsx","components/StudentDashboard/TileBars/index.tsx","components/StudentDashboard/UserProfile/index.tsx","components/StudentDashboard/index.tsx","components/AdminDashboard/index.tsx","common/App/index.tsx","components/visuals/Notifications/index.tsx","containers/AdminHeader/index.tsx"],"sourcesContent":["import { debug } from \"../../config/config\";\nimport Controller from \"../controller\";\nimport {CanvasStudent} from \"../../models/canvas/Student\";\nimport {ConsentData} from \"../../models/app/ConsentData\";\nimport {GoalData} from \"../../models/app/GoalData\";\nimport {MOCK_STUDENTS, MOCK_CONSENTS, MOCK_GOALS} from \"../../mocks/students\";\nimport {delay} from \"../../utils/mockRequest\";\n\nexport default class StudentController extends Controller {\n\n  static getStudents(): Promise<CanvasStudent[]> {\n    if (debug()) return delay(MOCK_STUDENTS);\n\n    return this.client.get(\n      `students`\n    ).then(response => response.data);\n  }\n\n  static getConsents(): Promise<ConsentData[]> {\n    if (debug()) return delay(MOCK_CONSENTS);\n\n    return this.client.get(\n      `consents`\n    ).then(response => response.data);\n\n  }\n  static getGoalgrades(): Promise<GoalData[]> {\n    if (debug()) return delay(MOCK_GOALS);\n\n    return this.client.get(\n      `goal-grades`\n    ).then(response => response.data);\n  }\n}","import React, { Component } from \"react\";\nimport \"./style.scss\";\nimport {PeerGrades} from \"../../../types\";\n\nexport default class PeerComparison extends Component<{peerGrades: PeerGrades | undefined}> {\n  render(): React.ReactNode {\n    const { peerGrades } = this.props;\n\n    const round = (val: number) => {\n      return Math.round(val * 100) / 100;\n    }\n\n    return (\n      <div className={\"peerComparison\"}>\n        <span className={\"title\"}>Peer Comparison</span>\n\n        { peerGrades ?\n          <div className={\"distribution\"}>\n            <div className={\"min\"}>\n              <small>min.</small>\n              <br />\n              { round(peerGrades.min) }\n            </div>\n\n            <div className={\"avg\"}>\n              <small>avg.</small>\n              <br />\n              { round(peerGrades.avg) }\n            </div>\n\n            <div className={\"max\"}>\n              <small>max.</small>\n              <br />\n              { round(peerGrades.max) }\n            </div>\n          </div> :\n          <p>Not available</p>\n        }\n      </div>\n    )\n  }\n}","import {TilesGradeSummary} from \"../components/StudentDashboard/types\";\nconst compute = require( 'compute.io' );\n\nexport const getAverageGrade = (submissions: TilesGradeSummary[],\n                                precision: number = 2): number | null => {\n  const grades = submissions.map(s => s.average);\n\n  if (grades.length === 0) return null;\n\n  return Math.round(compute.mean(grades) * (10 ** precision)) / (10 ** precision);\n}","import {Tile, TileEntry, TileEntrySubmission} from \"../../../../models/app/Tile\";\n\nexport const getProgression = (tile: Tile, entries: TileEntry[], submissions: TileEntrySubmission[]): number => {\n  if (tile.content === \"BINARY\") {\n    return submissions.length > 0 ?\n      Math.round((\n        submissions.filter(s => parseFloat(s.grade) > .8).length /\n        entries.length\n      ) * 100) : 0;\n  }\n\n  return Math.round((submissions.length / entries.length) * 100);\n}","import React, { Component } from \"react\";\nimport {Statistic} from \"antd\";\nimport { WarningOutlined, LikeOutlined } from \"@ant-design/icons\";\nimport \"./style.scss\";\n\nexport default class GradeStatistic extends Component<\n  { grade: string },\n  { loading: boolean, passed: boolean }\n  > {\n\n  state = { loading: true, passed: false }\n\n  componentDidMount(): void {\n    this.setup();\n  }\n\n  setup = () => {\n    const { grade } = this.props;\n\n    this.setState({ loading: false, passed: parseFloat(grade) >= 5.5 });\n  }\n\n  render(): React.ReactNode {\n    const { loading, passed } = this.state;\n    const { grade } = this.props;\n\n    return (\n      <div className={\"gradeStatistic\"}>\n        <Statistic title={\"Grade\"}\n                   value={grade}\n                   loading={loading}\n                   prefix={passed ?\n                     <LikeOutlined className={\"pass\"} /> :\n                     <WarningOutlined  className={\"fail\"} />\n                   }\n        />\n      </div>\n    );\n  }\n}","import React, { Component } from \"react\";\nimport { Progress, Space } from \"antd\";\nimport PeerComparison from \"./PeerComparison\";\nimport {IProps, IState} from \"./types\";\nimport {getAverageGrade} from \"../../../../utils/grades\";\nimport {getProgression} from \"./helpers\";\nimport GradeStatistic from \"../../../../containers/GradeStatistic\";\nimport \"./style.scss\";\n\nexport default class Tile extends Component<IProps, IState> {\n\n  state = { loaded: false }\n\n  getHeader = () => {\n    const { tile, tileEntries, submissions, userGrades, discussions, learningOutcomes } = this.props;\n    const avg: number | null = getAverageGrade(userGrades);\n\n    switch (tile.type) {\n      case \"DISCUSSIONS\":\n      return (\n        <span style={{textAlign: 'center'}}>\n          <strong>{ discussions.length }</strong> discussion{discussions.length !== 1 && \"s\"}\n        </span>\n      );\n    }\n\n    switch (tile.content){\n      case \"LEARNING_OUTCOMES\":\n        const success = learningOutcomes.filter(lo => lo.success).length;\n        return (\n          <span style={{textAlign: 'center'}}>\n            <strong>{ success }<small>/{ learningOutcomes.length }</small></strong> completed\n          </span>\n        );\n      case \"PREDICTION\":\n        return <GradeStatistic grade={avg ? avg!.toString() : \"-\"} />;\n      case \"BINARY\":\n      case \"ENTRIES\":\n        return (\n          <>\n            { !!avg && <Progress percent={getProgression(tile, tileEntries, submissions)} /> }\n            <GradeStatistic grade={avg ? avg!.toString() : \"-\"} />\n          </>\n        );\n      default:\n        return null;\n    }\n  }\n\n  render(): React.ReactNode {\n    const { tile, peerGrades, userGrades } = this.props;\n    return (\n      <div className={\"tile\"}\n           onClick={() => {\n             window.dispatchEvent(new CustomEvent(\"selectTile\", { detail: { tile, userGrades } }))\n           }}\n      >\n        <div className={\"wrapper\"}>\n          <div className={\"content\"}>\n            <h2>{ tile.title }</h2>\n            <Space direction={\"vertical\"} style={{ width: '100%' }}>\n              { this.getHeader() }\n            </Space>\n          </div>\n\n          <PeerComparison peerGrades={peerGrades.find(pg => pg.tileID === tile.id)} />\n        </div>\n      </div>\n    )\n  }\n}\n","import React, { Component } from \"react\";\nimport Tile from \"./Tile\";\nimport { IProps } from \"./types\";\nimport \"./style.scss\";\n\nexport default class TileGroup extends Component<IProps> {\n\n  render(): React.ReactNode {\n    const {\n      tileGroup,\n      tileEntries,\n      tiles,\n      student,\n      tilesGradeSummary,\n      peerGrades,\n      submissions,\n      discussions,\n      learningOutcomes\n    } = this.props;\n\n    return (\n      <div className={`tileGroup`}>\n        <h2>{ tileGroup.title }</h2>\n\n        <div className={`tileWrapper`}>\n          { tiles.sort((a, b) => a.position - b.position).map(t => {\n            return (\n              <Tile tile={t}\n                    tileEntries={tileEntries.filter(e => e.tile_id === t.id)}\n                    discussions={discussions}\n                    student={student}\n                    submissions={submissions.get(t.id)!}\n                    userGrades={tilesGradeSummary.filter(tgs => tgs.tile.id === t.id)}\n                    peerGrades={peerGrades.filter(pg => pg.tileID === t.id)}\n                    learningOutcomes={learningOutcomes}\n              key={t.id}/>\n            );\n          })}\n        </div>\n      </div>\n    )\n  }\n}\n","import React, { Component } from \"react\";\nimport { TileEntry, TileEntrySubmission } from \"../../../../models/app/Tile\";\nimport { Col, Row } from \"antd\";\nimport { CheckOutlined } from \"@ant-design/icons\";\nimport \"./style.scss\";\n\nexport default class BinaryGrades extends Component<{\n    submissions: TileEntrySubmission[],\n    tileEntries: TileEntry[]\n}> {\n    render(): React.ReactNode {\n        const { submissions, tileEntries } = this.props;\n\n        return (\n            <div id={\"binaryEntries\"}>\n                <Row gutter={[5, 5]}>\n                    {submissions.map(s => {\n                        const success = s.grade.slice(0, 1) !== \"0\";\n                        const entry = tileEntries.find(e => e.id === s.entry_id);\n\n                        return (\n                            <Col key={s.entry_id} xs={12} md={8} lg={6}>\n                                <div className={`entry ${success ? \"success\" : \"fail\"}`}>\n                                    <h2>{entry ? entry.title : null}</h2>\n                                    {success ?\n                                        <span><CheckOutlined /> Present</span> :\n                                        <span>Absent</span>}\n                                </div>\n                            </Col>\n                        );\n                    })}\n                </Row>\n            </div>\n        )\n    }\n}\n","import React, { Component } from \"react\";\nimport { TileEntry, TileEntrySubmission } from \"../../../../../models/app/Tile\";\nimport { Divider, Table } from \"antd\";\nimport GradeStatistic from \"../../../../../containers/GradeStatistic\";\n\nexport default class EntryItem extends Component<{\n    submission: TileEntrySubmission,\n    tileEntry: TileEntry\n}> {\n    render(): React.ReactNode {\n        const { tileEntry, submission } = this.props;\n\n        // FIXME: the check for type is done because when the mocks were made, no consideration was given to the type of meta. To remove this check, convert the meta objects in the mocks to JSON strings.\n        const meta = typeof submission.meta === \"string\" ? JSON.parse(submission.meta || \"{}\") : submission.meta || {};\n\n        return (\n            <div className={\"tileEntry\"}>\n                <h2>{tileEntry.title}</h2>\n                <Divider style={{ margin: '5px 0' }} />\n\n                <GradeStatistic grade={submission.grade} />\n\n                { Object.keys(meta).length > 0 &&\n                    <div>\n                        <Table dataSource={Object.keys(meta).map((key, i) => ({\n                            key: i,\n                            label: key,\n                            value: meta[key]\n                        }))} columns={[\n                            {\n                                title: 'Key',\n                                dataIndex: 'label',\n                                key: 'label',\n                                width: '40%',\n                                ellipsis: true\n                            },\n                            {\n                                title: 'Value',\n                                dataIndex: 'value',\n                                key: 'value',\n                            }]} />\n                    </div>\n                }\n            </div>\n        )\n    }\n}\n","import React, { Component } from \"react\";\nimport {Tile, TileEntry, TileEntrySubmission} from \"../../../../models/app/Tile\";\nimport {Col, Row} from \"antd\";\nimport EntryItem from \"./EntryItem\";\nimport {Bar} from \"react-chartjs-2\";\nimport \"./style.scss\";\nimport {CanvasDiscussion} from \"../../../../models/canvas/Discussion\";\n\nexport default class EntriesList extends Component<{\n  submissions: TileEntrySubmission[],\n  tileEntries: TileEntry[],\n  discussions: CanvasDiscussion[],\n  tile: Tile\n}> {\n  render(): React.ReactNode {\n    const { tile, tileEntries, submissions } = this.props;\n\n    if (tile.graph_view) {\n      const data = {\n        labels: submissions.map((s, i) => {\n          const entry = tileEntries.find(e => e.id === s.entry_id);\n          return entry?.title ?? \"???\";\n        }),\n        datasets: [\n          {\n            label: tile.title + \" grades\",\n            data: submissions.map(s => s.grade),\n            fill: false,\n            backgroundColor: \"rgba(75,192,192,1)\"\n          }\n        ]\n      };\n\n      return (\n        <div id={\"tileEntriesGraph\"} style={{minHeight: '60vh'}}>\n          <div>\n            <Bar options={{ legend: { display: false }}}\n                  width={500}\n                  data={data} />\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div id={\"tileEntriesList\"}>\n        <Row gutter={[10, 10]}>\n          { tileEntries.map(entry => {\n            const submission = submissions.find(s => s.entry_id === entry.id);\n            if (!submission) return null;\n\n            return (\n              <Col key={entry.id} xs={24} sm={12} md={8} lg={6} className={\"entryCol\"}>\n                <EntryItem submission={submission} tileEntry={entry} />\n              </Col>\n            )\n          })}\n        </Row>\n      </div>\n    )\n  }\n}\n","import React, { Component } from \"react\";\nimport {PredictedGrade} from \"../../../../models/app/PredictiveModel\";\nimport {Bar} from \"react-chartjs-2\";\nimport {TileEntry} from \"../../../../models/app/Tile\";\nimport \"./style.scss\";\nimport {store} from \"../../../../utils/configureStore\";\n\nexport default class GradePrediction extends Component<{\n  predictions: PredictedGrade[],\n  tileEntries: TileEntry[]\n}> {\n  render(): React.ReactNode {\n    const { predictions, tileEntries } = this.props;\n    const tiles = store.getState().tiles;\n    let maxComponents = tiles.filter(t => t.content === \"BINARY\").length + 1;\n\n    for (const entry of tileEntries) {\n      const tile = tiles.find(t => t.id === entry.tile_id);\n      if (!tile) continue;\n\n      if (tile.content === \"BINARY\") continue;\n      maxComponents += 1;\n    }\n\n    const round = (val: number) => Math.round(val * 100) / 100;\n\n    const errors = Array.from(Array(maxComponents).keys()).map(i => 5 - ((4.5 / maxComponents) * i));\n    if (predictions.length === 0) {\n      return (\n        <div id={\"gradePrediction\"}>\n          <h2>No predictions available.</h2>\n          <p>Try again later when more grades are available.</p>\n        </div>\n      );\n    }\n\n    const sortedPredictions = predictions.sort(\n      (a, b) => a.graded_components - b.graded_components);\n\n    const data = (canvas: any) => {\n      const ctx = canvas.getContext(\"2d\")\n      const gradient1 = ctx.createLinearGradient(0,0,0,350);\n      gradient1.addColorStop(0, \"#FFF\");\n      gradient1.addColorStop(1, \"rgb(90, 50, 255)\");\n\n      const gradient2 = ctx.createLinearGradient(0,0,0,350);\n      gradient2.addColorStop(1, \"#FFF\");\n      gradient2.addColorStop(0, \"rgb(90, 50, 255)\");\n\n      return {\n        labels: sortedPredictions.map((pg) => pg.graded_components + \" graded components\"),\n        datasets: [\n          {\n            label: \"Predicted grade\",\n            type: \"line\",\n            backgroundColor: \"rgb(90, 50, 255)\",\n            borderColor: \"rgb(90, 50, 255)\",\n            hoverBorderColor: \"rgb(90, 50, 255)\",\n            fill: false,\n            tension: 0,\n            data: sortedPredictions.map(sp => round(sp.grade)),\n            yAxisID: 'y',\n            xAxisID: 'x'\n          },\n          {\n            label: \"UpperConfidence\",\n            type: \"line\",\n            backgroundColor: gradient1,\n            borderColor: \"transparent\",\n            pointRadius: 0,\n            fill: 0,\n            tension: 0,\n            data: sortedPredictions.map((sp, i) => sp.grade + errors[i + 3]),\n            yAxisID: 'y',\n            xAxisID: 'x'\n          },\n          {\n            label: \"LowerConfidence\",\n            type: \"line\",\n            backgroundColor: gradient2,\n            borderColor: \"transparent\",\n            pointRadius: 0,\n            fill: 0,\n            tension: 0,\n            data: sortedPredictions.map((sp, i) => sp.grade - errors[i + 3]),\n            yAxisID: 'y',\n            xAxisID: 'x'\n          }\n        ]\n      }\n    };\n\n    return (\n      <div id={\"gradePrediction\"}>\n        <h3>Your predicted grade is a <strong>{round(sortedPredictions[sortedPredictions.length - 1].grade)}</strong></h3>\n\n        <Bar options={{   legend: { display: false },\n                          scales: {\n                            xAxes: [{\n                              id: 'x',\n                              type: 'category'\n                            }],\n                            yAxes: [{\n                              id: 'y',\n                              type: 'linear',\n                              position: \"left\",\n                              ticks: {\n                                beginAtZero: true,\n                                min: 0,\n                                max: 10\n                              }\n                            }]\n                          }}}\n              width={500}\n              data={data} />\n\n        <p>Grade predictions will grow more accurate as the course progresses.</p>\n      </div>\n    );\n  }\n}","import { Col, Divider, Row } from \"antd\";\nimport React, { Component } from \"react\";\nimport { Tile } from \"../../../../models/app/Tile\";\nimport { CanvasDiscussion } from \"../../../../models/canvas/Discussion\";\nimport \"./style.scss\";\n\nexport default class DiscussionsList extends Component<{\n    discussions: CanvasDiscussion[],\n    tile: Tile\n}> {\n    render(): React.ReactNode {\n        const { discussions } = this.props;\n        return (\n            <div id={\"discussionsList\"}>\n                <Row gutter={[10, 10]}>\n                    {discussions.map(d => {\n                        return (\n                            <Col key={d.id} xs={24} md={12} lg={8}>\n                                <div className={\"discussion\"}>\n                                    <h2>{d.title}</h2>\n                                    <small>{d.posted_at}</small>\n                                    <Divider />\n                                    <p dangerouslySetInnerHTML={{ __html: d.message }} />\n                                </div>\n                            </Col>\n                        )\n                    })}\n                </Row>\n            </div>\n        )\n    }\n}\n","import React, { Component } from \"react\";\nimport { TileEntry} from \"../../../../models/app/Tile\";\nimport { Badge, Card} from \"antd\";\nimport \"./style.scss\";\nimport { LearningOutcome } from \"../../../../models/app/LearningGoal\";\n\nexport default class LearningOutcomes extends Component<{\n    learningOutcomes: LearningOutcome[],\n    tileEntries: TileEntry[]\n}> {\n    render(): React.ReactNode {\n        const { learningOutcomes, tileEntries } = this.props;\n\n        const formatExpression = (exp: string | null) => {\n            switch (exp) {\n                case \"lte\": return \"≤\";\n                case \"gte\": return \"≥\";\n                default: return \"=\";\n            }\n        }\n\n        return (\n            <div id={\"learningOutcomes\"}>\n                <div style={{ margin: \"0 auto\", maxWidth: '400px', width: '100%' }}>\n                    {learningOutcomes.map((lo, i) => {\n                        return (\n                            <div key={lo.goal.id} style={{ margin: \"5px 0\" }}>\n                                <Badge.Ribbon text={lo.success ? \"Completed\" : \"Not completed\"} color={lo.success ? \"green\" : \"red\"}>\n                                    <Card title={`Goal ${i}`} size=\"small\">\n                                        <strong>\n                                            {lo.goal.title}\n                                        </strong>\n                                        <br />\n                                        {lo.goal.requirements.map(r => {\n                                            const entry = tileEntries.find(e => e.id === r.entry_id);\n\n                                            return (\n                                                <span>{entry ? entry.title : \"???\"} {formatExpression(r.expression)} { r.value}<br /></span>\n                                            )\n                                        })}\n                                    </Card>\n                                </Badge.Ribbon>\n                            </div>\n                        );\n                    })}\n                </div>\n            </div>\n        )\n    }\n}\n","import React, { Component } from \"react\";\nimport {Tile, TileEntry, TileEntrySubmission} from \"../../../models/app/Tile\";\nimport BinaryGrades from \"./BinaryGrades\";\nimport {Button} from \"antd\";\nimport { ArrowLeftOutlined } from \"@ant-design/icons\";\nimport EntriesList from \"./EntriesList\";\nimport GradePrediction from \"./GradePrediction\";\nimport {PredictedGrade} from \"../../../models/app/PredictiveModel\";\nimport DiscussionsList from \"./DiscussionsList\";\nimport {CanvasDiscussion} from \"../../../models/canvas/Discussion\";\nimport LearningOutcomes from \"./LearningOutcomes\";\nimport { LearningOutcome } from \"../../../models/app/LearningGoal\";\n\nexport default class TileDetail extends Component<{\n  tile: Tile,\n  submissions: TileEntrySubmission[],\n  discussions: CanvasDiscussion[],\n  tileEntries: TileEntry[],\n  predictions: PredictedGrade[],\n  learningOutcomes: LearningOutcome[]\n}> {\n\n  content = () => {\n    const { tile, submissions, tileEntries, predictions, discussions, learningOutcomes } = this.props;\n\n    switch(tile.content) {\n      case \"BINARY\":\n        return (\n          <BinaryGrades submissions={submissions}\n                        tileEntries={tileEntries.filter(e => e.tile_id === tile.id)}\n          />\n        );\n      case \"ENTRIES\":\n        switch (tile.type) {\n          case \"DISCUSSIONS\":\n            return (\n              <DiscussionsList discussions={discussions}\n                               tile={tile} />\n            );\n          default:\n            return (\n              <EntriesList submissions={submissions}\n                           tileEntries={tileEntries.filter(e => e.tile_id === tile.id)}\n                           discussions={discussions}\n                           tile={tile}\n              />\n            );\n        }\n      case \"PREDICTION\":\n        return (\n          <GradePrediction tileEntries={tileEntries}\n                           predictions={predictions} />\n        );\n      case \"LEARNING_OUTCOMES\":\n        return (\n          <LearningOutcomes learningOutcomes={learningOutcomes} tileEntries={tileEntries} />\n        );\n      default:\n        return null;\n    }\n  }\n\n  render(): React.ReactNode {\n    const { tile } = this.props;\n\n    return (\n      <div style={{padding: 20}}>\n        <Button type={\"ghost\"}\n                icon={<ArrowLeftOutlined />}\n                onClick={() => {\n                  window.dispatchEvent(new CustomEvent('selectTile', { detail: undefined }))\n                }}\n        >\n          Return to dashboard\n        </Button>\n\n        <h1 style={{margin: '10px 0'}}>{ tile.title }</h1>\n        { this.content() }\n      </div>\n    )\n  }\n}","import React, { Component } from \"react\";\n// import {createBarData, getBarOptions} from \"../helpers\";\nimport {HorizontalBar} from \"react-chartjs-2\";\nimport {Tile} from \"../../../models/app/Tile\"\nimport { CanvasDiscussion } from \"../../../models/canvas/Discussion\";\nimport { LearningOutcome } from \"../../../models/app/LearningGoal\";\nimport { PeerGrades, TilesGradeSummary } from \"../types\";\nimport {Data} from \"./types\"\nimport { IProps } from \"./types\";\n\nexport default class GradeBar extends Component<IProps> {\n\n  bar_options = {\n    maintainAspectRatio: true,\n    legend: {\n      display: true\n    },\n    scales: {\n      xAxes: [{\n        gridLines : {\n          display : false\n        },\n        scaleLabel: {\n          display: false\n          // labelString: 'Grade'\n        },\n        ticks: {\n          display: false\n        },\n        stacked: false,\n      }],\n      yAxes: [{\n        barPercentage: .95,\n        categoryPercentage: .95,\n        gridLines : {\n          display : false\n        },\n        scaleLabel: {\n          display: false\n          // labelString: '# of students'\n        },\n        stacked: false\n      }]\n    }\n  }\n\n  createBarData(tiles: Tile[], tilesGradeSummary: TilesGradeSummary[] , peerGrades: PeerGrades[], discussions: CanvasDiscussion[], learningOutcomes: LearningOutcome[]) {\n    let datadict = new Map<number, Data>();\n\n    for (let i = 0; i < tiles.length; i++) {\n      // TODO: Very ugly but everything is hardcoded so that discussions and learning_outcomes are only on 1 tile.\n      let grade = 0\n      if (tiles[i].content === \"LEARNING_OUTCOMES\") {\n        grade = learningOutcomes.filter(lo => lo.success).length;\n      } else if (tiles[i].type === \"DISCUSSIONS\") {\n        grade = discussions.length;\n      }\n\n      datadict.set(tiles[i].id, {title: tiles[i].title, grade: grade, peergrade: 0, max: 10});\n    }\n\n    for (let i = 0; i < tilesGradeSummary.length; i++) {\n      let grade = tilesGradeSummary[i].average\n      let entry = datadict.get(tilesGradeSummary[i].tile.id)!;\n      if (tilesGradeSummary[i].tile.content === \"BINARY\"){\n        entry.max = 100\n      }\n\n      // TODO:\n      grade = grade * 10 / entry.max;\n\n      entry.grade = grade;\n\n    }\n\n    for (let i = 0; i < peerGrades.length; i++) {\n      let pgrade = peerGrades[i].avg;\n      let entry = datadict.get(peerGrades[i].tileID)!;\n\n      pgrade = pgrade * 10/ entry.max;\n\n      entry.peergrade = pgrade;\n    }\n\n    let titles: any[] = [];\n    let grades: any[] = [];\n    let peergrades: any[] = [];\n\n    datadict.forEach((value) => {\n      titles.push(value.title);\n      grades.push(value.grade);\n      peergrades.push(value.peergrade);\n    });\n\n    return {\n      labels: titles,\n      datasets: [\n        {\n          label: \"You\",\n          backgroundColor: \"rgba(47,44,232, 0.5)\",\n          borderColor: \"rgba(0,0,255, 1)\",\n          borderWidth: 2,\n          data: grades,\n          skipNull: true\n        },\n        {\n          label: \"Peers\",\n          backgroundColor: \"rgba(255, 50, 50, .5)\",\n          borderColor: \"rgba(255,0,0, 1)\",\n          borderWidth: 2,\n          data: peergrades,\n          skipNull: true\n        }\n      ]\n    }\n  }\n\n  render(): React.ReactNode {\n    const { tiles, tilesGradeSummary, peerGrades, discussions, learningOutcomes} = this.props;\n\n    return (\n      <div>\n        <HorizontalBar height={300} data={this.createBarData(tiles, tilesGradeSummary, peerGrades, discussions, learningOutcomes)} options={this.bar_options} />\n      </div>\n    );\n  }\n}","import React, { Component } from \"react\";\nimport {Link} from \"react-router-dom\";\nimport {Button, Col, Divider, Row} from \"antd\";\nimport {RootState} from \"../../../store\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport {CanvasStudent} from \"../../../models/canvas/Student\";\nimport DataMartController from \"../../../api/controllers/datamart\";\nimport {PerformanceNotification} from \"../../../models/app/Notification\";\nimport PerformanceNotifications from \"../../../components/visuals/Notifications\";\n\nconst mapState = (state: RootState) => ({\n  course: state.course,\n  tiles: state.tiles\n});\n\nconst connector = connect(mapState)\ntype PropsFromRedux = ConnectedProps<typeof connector>\ntype Props = PropsFromRedux & { student: CanvasStudent | undefined };\ntype IState = { notifications: PerformanceNotification[] };\n\nclass UserProfile extends Component<Props, IState> {\n\n  _isMounted = false;\n\n  state = {\n    notifications: []\n  }\n\n  componentDidMount(): void {\n    this._isMounted = true;\n    this.loadNotifications(this.props);\n  }\n\n  componentWillReceiveProps(nextProps: Readonly<Props>, nextContext: any): void {\n    if (nextProps.student?.login_id !== this.props.student?.login_id) {\n      this.loadNotifications(nextProps);\n    }\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  loadNotifications = (props: Props) => {\n    const { student } = props;\n    if (!student) return;\n\n    DataMartController.getNotifications(student.login_id).then(notifications => {\n      // TODO: I think this may be a race condition, try to do away with the isMounted flag and resolve the console error. If noone complains about missing functionality by 2023, remove this todo.\n      this._isMounted && this.setState({ notifications });\n    });\n  }\n\n  render(): React.ReactNode {\n    const { course, student, tiles } = this.props;\n    const { notifications }: IState = this.state;\n\n    const outperforming = notifications\n      .filter(n => n.status === \"outperforming peers\");\n\n    const closing = notifications\n      .filter(n => n.status === \"closing the gap\");\n\n    const moreEffort = notifications\n      .filter(n => n.status === \"more effort required\");\n\n    return (\n      <div id={\"userProfile\"}>\n        <Row>\n          <Col xs={24} style={{textAlign: 'center'}}>\n            <Link to={'/goal-grade'}>\n              <Button size={\"large\"} color={\"primary\"}>\n                Goal Grade\n              </Button>\n            </Link>\n          </Col>\n\n          <Col xs={24} md={8} lg={6}>\n            <h3>{ student && student.name }</h3>\n            <strong>{ course && course.course_name }</strong>\n          </Col>\n\n          <Col xs={24} md={0}>\n            <Divider />\n          </Col>\n\n          <Col xs={24} md={16} lg={18}>\n            <PerformanceNotifications outperforming = {outperforming}\n                                      closing = {closing}\n                                      moreEffort = {moreEffort}\n                                      tiles = {tiles}\n            />\n            <div style={{textAlign: 'right'}}>\n              <Link to={'/consent'}>Informed Consent</Link>\n            </div>\n          </Col>\n        </Row>\n        <br />\n        <div style={{textAlign: 'center'}}>\n          <small>\n            IGuideME is a product by the University of Amsterdam.\n          </small>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default connector(UserProfile);\n","import React, { Component } from \"react\";\nimport {IProps, IState, TilesGradeSummary, ViewTypes} from \"./types\";\nimport TileGroup from \"./TileGroup\";\nimport {Tile, TileEntrySubmission, TileGroup as TileGroupModel} from \"../../models/app/Tile\";\nimport FadeIn from \"react-fade-in\";\nimport TileController from \"../../api/controllers/tile\";\nimport Loading from \"../utils/Loading\";\nimport {DashboardColumn} from \"../../models/app/Layout\";\nimport TileDetail from \"./TileDetail\";\nimport { Radio } from \"antd\";\nimport { AppstoreOutlined, BarChartOutlined } from \"@ant-design/icons\";\n// import TileRadar from \"./TileRadar\";\nimport TileBars from \"./TileBars\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport {RootState} from \"../../store\";\nimport \"./style.scss\";\nimport {DataMartActions} from \"../../store/actions/datamart\";\nimport {PredictedGrade} from \"../../models/app/PredictiveModel\";\nimport UserProfile from \"./UserProfile\";\nimport {CanvasDiscussion} from \"../../models/canvas/Discussion\";\nimport {LearningOutcome} from \"../../models/app/LearningGoal\";\n\nconst mapState = (state: RootState) => ({\n  dashboardColumns: state.dashboardColumns,\n  tiles: state.tiles.filter((t: Tile) => t.visible),\n  tileGroups: state.tileGroups,\n  tileEntries: state.tileEntries,\n  predictions: state.predictions,\n});\n\nconst mapDispatch = {\n  loadPredictions: (user: string = 'self') => DataMartActions.loadPredictions(user)\n}\n\nconst connector = connect(mapState, mapDispatch)\ntype PropsFromRedux = ConnectedProps<typeof connector>\ntype Props = PropsFromRedux & IProps;\n\nclass StudentDashboard extends Component<Props, IState> {\n\n  state = {\n    tilesGradeSummary: [],\n    peerGrades: [],\n    userSubmissions: new Map<number, TileEntrySubmission[]>(),\n    loaded: true,\n    displayTile: null,\n    discussions: [] as CanvasDiscussion[],\n    learningOutcomes: [] as LearningOutcome[],\n    viewType: \"bar\" as ViewTypes\n  }\n\n  componentDidMount(): void {\n    window.addEventListener('selectTile', (event: any) => {\n      this.setState({ displayTile: event?.detail});\n    });\n\n    this.setup(this.props);\n  }\n\n  componentWillReceiveProps(nextProps: Readonly<Props>, nextContext: any): void {\n    if (nextProps.student && nextProps.student?.login_id !== this.props.student?.login_id) {\n      this.props.loadPredictions(nextProps.student.login_id).then(({ payload }) => {\n        this.setup(nextProps, payload);\n      });\n    }\n\n    if (nextProps.predictions.length !== this.props.predictions.length) {\n      this.setup(nextProps);\n    }\n  }\n\n  setup = async (props: Props, propPredictions: PredictedGrade[] = []) => {\n    let { tiles, student, predictions } = props;\n    if (!student) return;\n\n    if (propPredictions.length >= 0) predictions = propPredictions;\n\n    this.setState({ loaded: false });\n\n    let submissions = new Map<number, TileEntrySubmission[]>();\n\n\n    const sortedPredictions = predictions.sort(\n      (a, b) => b.graded_components - a.graded_components);\n\n    let p_discussions: Promise<CanvasDiscussion[]>[] = [];\n    let p_goals: Promise<LearningOutcome[]>[] = [];\n\n    let data = [];\n    let grade;\n\n    for (const tile of tiles) {\n      if (tile.content === \"LEARNING_OUTCOMES\") {\n        p_goals.push(TileController.getUserGoals(tile.id, student.login_id));\n        continue;\n      }\n      if (tile.type === \"DISCUSSIONS\") {\n        p_discussions.push(TileController.getDiscussions(tile.id, student.login_id));\n        continue;\n      }\n\n      if (tile.content === \"PREDICTION\") {\n        data.push({\n          tile: tile,\n          average: sortedPredictions.length > 0 ? sortedPredictions[0].grade : 0\n        })\n        continue;\n      }\n\n      submissions.set(tile.id, await TileController.getTileSubmissions(tile.id, student.login_id));\n\n      let avg = 0, total = 0;\n\n      for (const sub of submissions.get(tile.id)!) {\n        grade = parseFloat(sub.grade);\n        avg += (tile.content === \"BINARY\") ? Number(grade !== 0) : grade;\n        total++;\n      }\n\n      avg = total ? avg/total : avg;\n      data.push({ tile: tile, average: avg}\n      );\n    }\n\n    let discussions = (await Promise.all(p_discussions)).flat();\n    let goals = (await Promise.all(p_goals)).flat();\n\n    this.setState({\n      discussions,\n      learningOutcomes: goals,\n      tilesGradeSummary: data,\n      userSubmissions: submissions\n    }, () => {\n      TileController.getPeerResults(student!.login_id).then(peerGrades =>\n        this.setState({ peerGrades, loaded: true })\n      ).catch(() => this.setState({ loaded: true }));\n    });\n  }\n\n  render(): React.ReactNode {\n    const {\n      loaded,\n      displayTile,\n      viewType,\n      tilesGradeSummary,\n      peerGrades,\n      userSubmissions,\n      discussions,\n      learningOutcomes\n    } = this.state;\n\n    const { tiles, tileGroups, dashboardColumns, tileEntries, student, predictions } = this.props;\n    console.log(\"tiles\", tiles);\n    console.log(\"Predictions\", predictions);\n\n    if (!loaded || !student) return (<Loading small={true} />);\n\n    if (displayTile) {\n      return <TileDetail tile={(displayTile as any).tile}\n                         tileEntries={tileEntries}\n                         discussions={discussions}\n                         predictions={predictions}\n                         submissions={userSubmissions.get((displayTile as any).tile.id)!}\n                         learningOutcomes={learningOutcomes}\n      />\n    }\n\n    return (\n      <div id={\"studentDashboard\"}>\n        <Radio.Group value={viewType}\n                     buttonStyle=\"solid\"\n                     onChange={e => this.setState({ viewType: e.target.value })}\n        >\n          <Radio.Button value=\"bar\"><BarChartOutlined /> Bar</Radio.Button>\n          <Radio.Button value=\"grid\"><AppstoreOutlined /> Grid</Radio.Button>\n        </Radio.Group>\n\n        { viewType === \"grid\" ?\n          <FadeIn>\n            <div>\n              { dashboardColumns.map((c: DashboardColumn) => {\n                return (\n                  <div className={`column ${c.container_width}`}\n                       key={c.id}>\n                    { tileGroups\n                      .filter((tg: TileGroupModel) => tg.column_id === c.id)\n                      .sort((a: TileGroupModel, b: TileGroupModel) => a.position - b.position)\n                      .map((tg: TileGroupModel) =>\n                        <TileGroup tileGroup={tg}\n                                   tiles={tiles.filter((t: Tile) => t.group_id === tg.id) }\n                                   discussions={discussions}\n                                   tileEntries={tileEntries.filter(e => tiles.filter(\n                                     (t: Tile) => t.group_id === tg.id).map(x => x.id).includes(e.tile_id))}\n                                   student={student}\n                                   tilesGradeSummary={tilesGradeSummary.filter(\n                                     (tgs: TilesGradeSummary) => tgs.tile.group_id === tg.id)}\n                                   peerGrades={peerGrades}\n                                   submissions={userSubmissions}\n                                   learningOutcomes={learningOutcomes}\n                        key={tg.id}\n                        />\n                      )\n                    }\n                  </div>\n                )\n              })}\n            </div>\n          </FadeIn>\n          :\n          // <TileRadar tiles={tiles}\n          //            tileEntries={tileEntries}\n          //            student={student}\n          //            tilesGradeSummary={tilesGradeSummary}\n          //            peerGrades={peerGrades}\n          // />\n          <div style={{ padding: '0 8%'}}>\n            <TileBars tiles={tiles}\n                      tilesGradeSummary = {tilesGradeSummary}\n                      peerGrades = {peerGrades}\n                      discussions = {discussions}\n                      learningOutcomes={learningOutcomes}\n            />\n          </div>\n        }\n\n        <UserProfile student={this.props.student} />\n      </div>\n    )\n  }\n}\n\nexport default connector(StudentDashboard);\n","import React, { Component } from \"react\";\nimport { IProps } from \"./types\";\nimport { Result } from \"antd\";\nimport { SmileOutlined } from \"@ant-design/icons\";\nimport StudentDashboard from \"../StudentDashboard\";\nimport \"./style.scss\";\n\nexport default class AdminDashboard extends Component<IProps> {\n  render(): React.ReactNode {\n    if (!this.props.student) {\n      return (\n        <div id={\"getStarted\"}>\n          <Result\n            icon={<SmileOutlined />}\n            title={\n              <div>\n                <h2>Pick a student to start!</h2>\n                <h1 id={\"brand\"}>IGuideME</h1>\n              </div>\n            }\n          />\n        </div>\n      );\n    }\n\n    return (<StudentDashboard student={this.props.student} />);\n  }\n}","import React, { Component } from \"react\";\nimport { withConsent } from \"../../hoc/withConsent\";\nimport { withAdminRole } from \"../../hoc/withAdminRole\";\nimport {UserDataProps} from \"../../hoc/types\";\nimport AdminHeader from \"../../containers/AdminHeader\";\nimport StudentDashboard from \"../../components/StudentDashboard\";\nimport AdminDashboard from \"../../components/AdminDashboard\";\nimport {CanvasStudent} from \"../../models/canvas/Student\";\nimport UserController from \"../../api/controllers/app\";\nimport {RootState} from \"../../store\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport Loading from \"../../components/utils/Loading\";\nimport { Redirect } from \"react-router-dom\";\n\nconst mapState = (state: RootState) => ({\n  user: state.user,\n  predictions: state.predictions\n});\n\nconst connector = connect(mapState)\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\ntype Props = PropsFromRedux & UserDataProps;\n\nclass App extends Component<Props, { student: CanvasStudent | null, goalGrade: number | undefined }> {\n\n  state = { student: null, goalGrade: undefined }\n\n  componentDidMount(): void {\n    const { isAdmin } = this.props;\n    if (!isAdmin) {\n      UserController.getUser().then(student => this.setState({ student }));\n      UserController.getGoalGrade().then(goalGrade => this.setState({ goalGrade }));\n    } else {\n      this.setState({ goalGrade: 10 });\n    }\n  }\n\n  render(): React.ReactNode {\n    const { isAdmin } = this.props;\n    const { student, goalGrade } = this.state;\n\n    if (goalGrade === undefined) return <Loading />;\n    if (goalGrade === -1) return <Redirect to={'goal-grade'} />;\n\n    return (\n      <div id={\"app\"}>\n        { isAdmin && <AdminHeader studentPickView={true}\n                                  setStudent={student => {\n                                    this.setState({ student }, () =>\n                                      window.dispatchEvent(\n                                        new CustomEvent('selectTile', {\n                                          detail: undefined\n                                        })\n                                      )\n                                    )\n                                  }}\n        /> }\n        { isAdmin ?\n          <AdminDashboard student={student} /> :\n          student === null ?\n            <h1>Your account has not yet been processed, try again tomorrow!</h1>:\n            <StudentDashboard student={student || undefined} />\n        }\n      </div>\n    )\n  }\n}\n\nexport default withConsent(withAdminRole(connector(App)));","import React, {Component} from \"react\";\nimport {TrophyOutlined, RiseOutlined, WarningOutlined} from \"@ant-design/icons\";\nimport { IProps } from \"./types\";\n\n\nexport default class PerformanceNotifications extends Component<IProps> {\n\n    _getTileTitle = (tileID: number): string => {\n        return this.props.tiles.find(t => t.id === tileID)?.title ?? \"\";\n    }\n\n    render(): React.ReactNode {\n\n        let {outperforming, closing, moreEffort} = this.props\n\n        return (\n        <div className=\"Notifications\">\n            { outperforming.length > 0 &&\n            <div>\n                <TrophyOutlined />\n                {' '}\n                You are outperforming your peers in:\n                <ul style={{boxSizing: 'border-box', paddingLeft: 30}}>\n                { outperforming.map((n, i) => <li key={i}>{this._getTileTitle(n.tile_id)}</li>)}\n                </ul>\n            </div> }\n\n            { closing.length > 0 &&\n            <div>\n                <RiseOutlined />\n                {' '}\n                You are closing the gap to your peers in:\n                <ul style={{boxSizing: 'border-box', paddingLeft: 30}}>\n                { closing.map((n, i) => <li key={i}>{this._getTileTitle(n.tile_id)}</li>)}\n                </ul>\n            </div> }\n\n            { moreEffort.length > 0 &&\n            <div>\n                <WarningOutlined />\n                {' '}\n                You have to put more effort in:\n                <ul style={{boxSizing: 'border-box', paddingLeft: 30}}>\n                { moreEffort.map(n => <li>{this._getTileTitle(n.tile_id)}</li>)}\n                </ul>\n            </div> }\n        </div>\n        );\n    }\n}","import React, { Component } from \"react\";\nimport Select from \"react-select\";\nimport {Button, Tooltip} from \"antd\";\nimport {SyncOutlined} from \"@ant-design/icons\";\nimport { Link } from \"react-router-dom\";\nimport {IProps, IState} from \"./types\";\nimport StudentController from \"../../api/controllers/student\";\nimport {CanvasStudent} from \"../../models/canvas/Student\";\nimport {debug} from \"../../config/config\";\nimport {RootState} from \"../../store\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport \"./style.scss\";\n\nconst mapState = (state: RootState) => ({\n  course: state.course,\n  user: state.user\n});\n\nconst connector = connect(mapState);\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\ntype Props = IProps & PropsFromRedux;\n\nclass AdminHeader extends Component<Props, IState> {\n\n  state = {\n    loaded: false,\n    students: []\n  }\n\n  componentDidMount(): void {\n    const { studentPickView } = this.props;\n\n    if (studentPickView) {\n      StudentController.getStudents().then(students => this.setState({ students, loaded: true }));\n    }\n\n    this.setState({ loaded: true });\n  }\n\n  renderInner(): React.ReactNode {\n    if (this.props.studentPickView) {\n      const { students, loaded } = this.state;\n      return (\n        <Select id={\"studentPicker\"}\n                isLoading={!loaded}\n                options={students.sort(\n                  (a: CanvasStudent, b: CanvasStudent) => a.name.localeCompare(b.name)\n                ).map((s: CanvasStudent) => ({ label: s.name, value: s.login_id}))}\n                placeholder={\"Choose a student\"}\n                onChange={(e) => this.props.setStudent!(\n                  e ? students.find((s: CanvasStudent) => s.login_id === e!.value)! : null\n                )}\n                isClearable={true}\n                styles={{\n                  control: (provided, state) => ({\n                    ...provided,\n                    backgroundColor: 'transparent',\n                    color: 'white',\n                    border: '1px solid white'\n                  }),\n                  singleValue: (provided, state) => {\n                    return {...provided, color: 'white'};\n                  }\n                }}\n        />\n      );\n    }\n\n    return (\n      <div id={\"inner\"}>\n        <h2>{ this.props.course ? this.props.course.course_name : \"Loading course...\" }</h2>\n      </div>\n    );\n  }\n\n  render(): React.ReactNode {\n    return (\n      <React.Fragment>\n        <div id={\"adminHeader\"}>\n          { this.props.studentPickView ?\n            <Link to={'/admin'} style={{ float: 'right' }}>\n              <h3>Admin Panel</h3>\n            </Link> :\n            <div style={{float: 'right', padding: 20}}>\n              <Tooltip title={\"Reload data\"}>\n                <Button id={\"reload\"}\n                        shape=\"circle\"\n                        style={{backgroundColor: 'rgba(255, 255, 255, 0.5)', color: 'white'}}\n                        icon={<SyncOutlined />} />\n              </Tooltip>\n            </div>\n          }\n\n          <div id={\"navbarContent\"}>\n            <div id={\"brand\"}>\n              <Link to={'/'}>\n                <h1>IGuideME</h1>\n              </Link>\n            </div>\n\n            { this.renderInner() }\n          </div>\n        </div>\n        { debug() &&\n          (<div id={\"debugNotice\"}>\n            Application is running in <strong>demo</strong> mode. Changes will not be saved!\n          </div>)\n        }\n      </React.Fragment>\n    );\n  }\n}\n\nexport default connector(AdminHeader);"],"names":["StudentController","debug","delay","MOCK_STUDENTS","this","client","get","then","response","data","MOCK_CONSENTS","MOCK_GOALS","Controller","PeerComparison","peerGrades","props","round","val","Math","className","min","avg","max","Component","compute","require","getAverageGrade","submissions","precision","grades","map","s","average","length","mean","getProgression","tile","entries","content","filter","parseFloat","grade","GradeStatistic","state","loading","passed","setup","setState","title","value","prefix","LikeOutlined","WarningOutlined","Tile","loaded","getHeader","tileEntries","userGrades","discussions","learningOutcomes","type","style","textAlign","success","lo","toString","percent","onClick","window","dispatchEvent","CustomEvent","detail","direction","width","find","pg","tileID","id","TileGroup","tileGroup","tiles","student","tilesGradeSummary","sort","a","b","position","t","e","tile_id","tgs","BinaryGrades","gutter","slice","entry","entry_id","xs","md","lg","CheckOutlined","EntryItem","tileEntry","submission","meta","JSON","parse","margin","Object","keys","dataSource","key","i","label","columns","dataIndex","ellipsis","EntriesList","graph_view","labels","datasets","fill","backgroundColor","minHeight","options","legend","display","sm","GradePrediction","predictions","store","maxComponents","errors","Array","from","sortedPredictions","graded_components","scales","xAxes","yAxes","ticks","beginAtZero","canvas","ctx","getContext","gradient1","createLinearGradient","addColorStop","gradient2","borderColor","hoverBorderColor","tension","sp","yAxisID","xAxisID","pointRadius","DiscussionsList","d","posted_at","dangerouslySetInnerHTML","__html","message","LearningOutcomes","formatExpression","exp","maxWidth","text","color","size","goal","requirements","r","expression","TileDetail","padding","icon","ArrowLeftOutlined","undefined","GradeBar","bar_options","maintainAspectRatio","gridLines","scaleLabel","stacked","barPercentage","categoryPercentage","datadict","Map","set","peergrade","pgrade","titles","peergrades","forEach","push","borderWidth","skipNull","height","createBarData","connector","connect","course","UserProfile","_isMounted","notifications","loadNotifications","DataMartController","login_id","nextProps","nextContext","outperforming","n","status","closing","moreEffort","to","name","course_name","mapDispatch","loadPredictions","user","DataMartActions","dashboardColumns","visible","tileGroups","StudentDashboard","userSubmissions","displayTile","viewType","propPredictions","p_discussions","p_goals","TileController","total","sub","Number","Promise","all","flat","goals","catch","addEventListener","event","payload","console","log","buttonStyle","onChange","target","BarChartOutlined","AppstoreOutlined","c","container_width","tg","column_id","group_id","x","includes","Loading","small","AdminDashboard","SmileOutlined","App","goalGrade","isAdmin","UserController","AdminHeader","studentPickView","setStudent","withConsent","withAdminRole","PerformanceNotifications","_getTileTitle","boxSizing","paddingLeft","students","isLoading","localeCompare","placeholder","isClearable","styles","control","provided","border","singleValue","float","shape","SyncOutlined","renderInner"],"sourceRoot":""}