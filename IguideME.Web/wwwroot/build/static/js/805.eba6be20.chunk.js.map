{"version":3,"file":"static/js/805.eba6be20.chunk.js","mappings":"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","sources":["common/Admin/AdminMenu/index.tsx","common/Admin/index.tsx","common/Admin/sections/NotificationCentre/index.tsx"],"sourcesContent":["import React, { Component } from \"react\";\nimport {\n    AppstoreOutlined,\n    ControlOutlined,\n    CloudUploadOutlined,\n    // ClusterOutlined,\n    DotChartOutlined,\n    FundProjectionScreenOutlined,\n    LaptopOutlined,\n    TrophyOutlined,\n    NotificationOutlined,\n    DatabaseOutlined,\n    UserOutlined,\n    TeamOutlined\n} from \"@ant-design/icons\";\nimport { Menu } from \"antd\";\nimport { Link } from \"react-router-dom\";\nimport \"./style.scss\";\nimport { RootState } from \"../../../store\";\nimport { connect, ConnectedProps } from \"react-redux\";\n\nconst mapState = (state: RootState) => ({\n    user: state.user\n});\n\nconst connector = connect(mapState)\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\ntype Props = { menuKey: string } & PropsFromRedux;\n\nclass AdminMenu extends Component<Props> {\n\n    render(): React.ReactNode {\n        const { user } = this.props;\n\n        return (\n            <div id={\"adminMenu\"}>\n                <div id={\"user\"}>\n                    <h3>{user ? user.name : \"Loading profile...\"}</h3>\n                    <strong><UserOutlined /> Instructor</strong>\n                </div>\n\n                <Menu selectedKeys={[this.props.menuKey]}>\n                    <Menu.Item key={\"datamart\"} icon={<DatabaseOutlined />}>\n                        <Link to={'/admin'}>\n                            Datamart\n                        </Link>\n                    </Menu.Item>\n\n                    <Menu.Item key={\"tiles\"} icon={<AppstoreOutlined />}>\n                        <Link to={'/admin/tiles'}>\n                            Tiles\n                        </Link>\n                    </Menu.Item>\n\n                    <Menu.Item key={\"dashboard\"} icon={<LaptopOutlined />}>\n                        <Link to={'/admin/dashboard'}>\n                            Dashboard\n                        </Link>\n                    </Menu.Item>\n\n                    <Menu.Item key={\"studentOverview\"} icon={<TeamOutlined />}>\n                        <Link to={'/admin/student-overview'}>\n                            Student Overview\n                        </Link>\n                    </Menu.Item>\n                    <Menu.SubMenu key={\"submenu\"} icon={<TrophyOutlined />} title={\"Grades\"}>\n                        {/* TODO: completely remove oldpredictor from code */}\n                        {/* <Menu.Item key={\"gradePredictorOld\"} icon={<FundProjectionScreenOutlined />}>\n                            <Link to={'/admin/grade-predictor-old'}>\n                                Old Predictor\n                            </Link>\n                        </Menu.Item> */}\n                        <Menu.Item key={\"gradePredictor\"} icon={<FundProjectionScreenOutlined />}>\n                            <Link to={'/admin/grade-predictor'}>\n                                Predictor\n                            </Link>\n                        </Menu.Item>\n                        <Menu.Item key={\"gradeAnalyzer\"} icon={<DotChartOutlined />}>\n                            <Link to={'/admin/grade-analyzer'}>\n                                Analyzer\n                            </Link>\n                        </Menu.Item>\n                    </Menu.SubMenu>\n                    <Menu.Item key={\"dataWizard\"} icon={<CloudUploadOutlined />}>\n                        <Link to={'/admin/data-wizard'}>\n                            Data Wizard\n                        </Link>\n                    </Menu.Item>\n                    {/* <Menu.Item key={\"analytics\"} icon={<ClusterOutlined />}>\n                        <Link to={'/admin/analytics'}>\n                            Analytics\n                        </Link>\n                    </Menu.Item> */}\n                    <Menu.Item key={\"notificationCentre\"} icon={<NotificationOutlined />}>\n                        <Link to={'/admin/notification-centre'}>\n                            Notification Centre\n                        </Link>\n                    </Menu.Item>\n                    <Menu.Item key={\"settings\"} icon={<ControlOutlined />}>\n                        <Link to={'/admin/settings'}>\n                            Settings\n                        </Link>\n                    </Menu.Item>\n                </Menu>\n            </div>\n        )\n    }\n}\n\nexport default connector(AdminMenu);\n","import React, { Component } from \"react\";\nimport { withAdminRole } from \"../../hoc/withAdminRole\";\nimport AdminHeader from \"../../containers/AdminHeader\";\nimport { Redirect } from \"react-router-dom\";\nimport { Col, Row } from \"antd\";\nimport AdminMenu from \"./AdminMenu\";\nimport \"./style.scss\";\n\nclass Admin extends Component<any> {\n\n  render(): React.ReactNode {\n    const { isAdmin, menuKey } = this.props;\n    if (!isAdmin) return (<Redirect to={'/'} />);\n\n    return (\n      <div id={\"admin\"}>\n        <AdminHeader />\n        <Row>\n          <Col xs={4}>\n            <AdminMenu menuKey={menuKey} />\n          </Col>\n          <Col xs={20} id={'wrapper'} className={`${ menuKey !== \"settings\" && \"noOverflow\"}`}>\n            { this.props.children }\n          </Col>\n        </Row>\n      </div>\n    )\n  }\n}\n\nexport default withAdminRole(Admin);","import React, { Component } from \"react\";\nimport Admin from \"../../index\";\nimport { Divider, Table } from \"antd\";\nimport type { ColumnsType} from 'antd/es/table';\nimport DataMartController from \"../../../../api/controllers/datamart\";\nimport StudentController from \"../../../../api/controllers/student\";\nimport {PerformanceNotification, Notifications, Data, NotificationStatus} from \"../../../../models/app/Notification\"\nimport PerformanceNotifications from \"../../../../components/visuals/Notifications\"\nimport {CanvasStudent} from \"../../../../models/canvas/Student\"\nimport { IState } from \"./types\";\nimport TileController from \"../../../../api/controllers/tile\";\nimport { Tile } from \"../../../../models/app/Tile\";\n\nimport {CheckCircleOutlined, CloseCircleOutlined} from \"@ant-design/icons\";\nimport AppController from \"../../../../api/controllers/app\";\n\nimport DatePicker, { DateObject } from \"react-multi-date-picker\";\nimport { Switch } from \"antd\";\n\n\nexport default class NotificationCentre extends Component {\n\n  state = {\n    students: [],\n    notifications: [],\n    tiles: [],\n    dates: [],\n    rangeBool : false\n  }\n\n  componentDidMount(): void {\n    StudentController.getStudents().then(async (students: CanvasStudent[]) => {\n      for (let i = 0; i < students.length; i++) {\n        let enabled = await AppController.getNotificationEnable(students[i].userID)\n        students[i].notifications = enabled\n      }\n      this.setState({\n        students: students\n      });\n    });\n    DataMartController.getAllNotifications().then(async (notifications: PerformanceNotification[]) =>\n        this.setState({\n          notifications: notifications\n        })\n    );\n    TileController.getTiles().then(async (tiles: Tile[]) => {\n      this.setState({\n        tiles: tiles\n      })\n    })\n    AppController.getNotificationDates().then(async (notificationDates: string[]) =>{\n      if (notificationDates[0].includes(\"-\"))\n      {\n        var doubleDates : Date[][] = [];\n        notificationDates.forEach(element => doubleDates.push(element.split(\"-\").map(v=> new Date(Date.parse(v)))));\n        this.setState({dates: doubleDates, rangeBool: true})\n      } \n      else this.setState({\n          dates: notificationDates.map((value) => Date.parse(value))\n      })\n    })\n  }\n\n  getData(students: CanvasStudent[], notifications: PerformanceNotification[]): Data[] {\n    let data = new Map<string, Data>();\n    let student;\n    for (let i = 0; i < students.length; i++) {\n      student = students[i];\n      console.log(\"notifications\", student.notifications!)\n\n      data.set(student.userID, new Data(student.userID, student.name, student.notifications!));\n    }\n\n    let notification;\n    let entry;\n    for (let i = 0; i < notifications.length; i++) {\n      notification = notifications[i];\n      entry = data.get(notification.userID)!;\n\n      if (!entry) {\n        continue;\n      }\n\n      switch (notification.status) {\n        case NotificationStatus.outperforming:\n          if (notification.sent) {\n            entry.previous.outperforming.push(notification)\n          } else {\n            entry.current.outperforming.push(notification)\n          }\n          break;\n        case NotificationStatus.closing_gap:\n          if (notification.sent) {\n            entry.previous.closing.push(notification)\n          } else {\n            entry.current.closing.push(notification)\n          }\n          break;\n        case NotificationStatus.more_effort:\n          if (notification.sent) {\n            entry.previous.more_effort.push(notification)\n          } else {\n            entry.current.more_effort.push(notification)\n          }\n          break;\n      }\n    }\n\n    let results: Data[] = [];\n\n    data.forEach((value: Data) => results.push(value))\n\n    return results;\n  }\n\n  render(): React.ReactNode {\n    const { students, notifications, tiles, rangeBool }: IState = this.state;\n    const columns: ColumnsType<Data> = [\n        {\n          title: 'Student',\n          dataIndex: 'name',\n          sorter: (a, b) => a.name.localeCompare(b.name),\n          defaultSortOrder: 'ascend'\n        },\n        {\n          title: 'Upcoming',\n          dataIndex: 'current',\n          render: (value: Notifications) => {\n            return (\n              <PerformanceNotifications outperforming = {value.outperforming}\n                closing = {value.closing}\n                moreEffort = {value.more_effort}\n                tiles = {tiles}\n              />\n            )\n          }\n        },\n        {\n          title: 'Last Received',\n          dataIndex: 'previous',\n          render: (value: Notifications) => {\n            return (\n              <PerformanceNotifications outperforming = {value.outperforming}\n                closing = {value.closing}\n                moreEffort = {value.more_effort}\n                tiles = {tiles}\n              />\n            )\n          }\n        },\n        {\n          title: 'Enabled',\n          dataIndex: 'enabled',\n          render: (value: boolean) => {\n            console.log(\"value\", value);\n            if (value) {\n              return (\n                <span className={\"successText\"}>\n                  <CheckCircleOutlined />\n                </span>\n              );\n            } else {\n              return  (\n                <span className={\"dangerText\"}>\n                  <CloseCircleOutlined />\n                </span>\n              );\n            }\n          }\n        },\n      ]\n\n    return (\n      <Admin menuKey={\"notificationCentre\"}>\n        <h1>Notification Centre</h1>\n\n        <Divider />\n\n        Range?\n\n        <Switch\n          onClick={(value:any)=>{\n            this.setState({rangeBool:!rangeBool, dates:[]});\n          }}\n          checked={rangeBool}\n        />\n\n        <DatePicker\n          multiple = {true}\n          range = {rangeBool}\n          // rangeHover = {true}\n          value={this.state.dates}\n          onChange={dateObject=>{\n            this.setState({dates: dateObject})\n\n            if (rangeBool){\n              var datelist : string[] = [];\n              dateObject?.toString().split(\",\").map(date => datelist.push(date));\n              var rangedates = \"\";\n\n              for (let i = 0; i < datelist.length; i = i + 2) {\n                rangedates += datelist[i] + \"-\"\n                rangedates += datelist[i+1] ? datelist[i+1] : datelist[i];\n                if (datelist[i+2]) rangedates+=\",\";\n              }\n              AppController.setNotificationDates(rangedates);\n            }\n            else \n              AppController.setNotificationDates((dateObject?.toString())!)\n          }} \n        />\n\n\n        <div id={\"NotificationsTable\"} style={{position: 'relative', overflow: 'visible'}}>\n          <Table scroll={{ x: 900 }}\n                bordered\n                sticky={true}\n                columns={columns}\n                dataSource={this.getData(students, notifications)}\n          />\n\n        </div>\n\n      </Admin>\n    )\n  }\n}\n"],"names":["connector","connect","state","user","AdminMenu","_Component","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","this","props","_jsxs","id","children","_jsx","name","UserOutlined","Menu","selectedKeys","menuKey","icon","DatabaseOutlined","Link","to","AppstoreOutlined","LaptopOutlined","TeamOutlined","TrophyOutlined","title","FundProjectionScreenOutlined","DotChartOutlined","CloudUploadOutlined","NotificationOutlined","ControlOutlined","Component","Admin","_this$props","isAdmin","AdminHeader","Row","Col","xs","className","concat","Redirect","withAdminRole","NotificationCentre","_this","_len","length","args","Array","_key","call","students","notifications","tiles","dates","rangeBool","_this2","StudentController","then","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","i","enabled","wrap","_context","prev","next","AppController","userID","sent","setState","stop","_x","DataMartController","_ref2","_callee2","_context2","abrupt","_x2","TileController","_ref3","_callee3","_context3","_x3","_ref4","_callee4","notificationDates","doubleDates","_context4","includes","forEach","element","push","split","map","v","Date","parse","_x4","student","notification","entry","data","Map","console","log","set","Data","get","status","NotificationStatus","previous","outperforming","current","closing","more_effort","results","_this3","_this$state","columns","dataIndex","sorter","a","b","localeCompare","defaultSortOrder","render","PerformanceNotifications","moreEffort","CheckCircleOutlined","CloseCircleOutlined","Divider","Switch","onClick","checked","DatePicker","multiple","range","onChange","dateObject","datelist","toString","date","rangedates","style","position","overflow","Table","scroll","x","bordered","sticky","dataSource","getData"],"sourceRoot":""}