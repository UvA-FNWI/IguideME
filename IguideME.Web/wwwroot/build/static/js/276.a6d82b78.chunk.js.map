{"version":3,"file":"static/js/276.a6d82b78.chunk.js","mappings":"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","sources":["api/controllers/student.ts","models/canvas/Discussion.ts","api/controllers/consent.ts","common/Consent/index.tsx","hoc/withConsent.tsx","components/StudentDashboard/TileGroup/Tile/PeerComparison/index.tsx","utils/grades.ts","components/StudentDashboard/TileGroup/Tile/helpers.ts","containers/GradeStatistic/index.tsx","components/StudentDashboard/TileGroup/Tile/index.tsx","components/StudentDashboard/TileGroup/index.tsx","components/StudentDashboard/TileDetail/BinaryGrades/index.tsx","components/StudentDashboard/TileDetail/EntriesList/EntryItem/index.tsx","components/StudentDashboard/TileDetail/EntriesList/index.tsx","components/StudentDashboard/TileDetail/GradePrediction/index.tsx","components/StudentDashboard/TileDetail/DiscussionsList/index.tsx","components/StudentDashboard/TileDetail/LearningOutcomes/index.tsx","components/StudentDashboard/TileDetail/index.tsx","components/StudentDashboard/TileBars/index.tsx","components/StudentDashboard/UserProfile/index.tsx","common/DesiredGrade/index.tsx","common/UserSettings/index.tsx","components/StudentDashboard/index.tsx","components/AdminDashboard/index.tsx","common/App/index.tsx","components/visuals/Notifications/index.tsx","containers/AdminHeader/index.tsx","api/controllers/admin.ts","hoc/withAdminRole.tsx"],"sourcesContent":["import { debug } from \"../../config/config\";\nimport Controller from \"../controller\";\nimport {CanvasStudent} from \"../../models/canvas/Student\";\nimport {ConsentData} from \"../../models/app/ConsentData\";\nimport {GoalData} from \"../../models/app/GoalData\";\nimport {MOCK_STUDENTS, MOCK_CONSENTS, MOCK_GOALS} from \"../../mocks/students\";\nimport {delay} from \"../../utils/mockRequest\";\n\nexport default class StudentController extends Controller {\n\n  static getStudents(): Promise<CanvasStudent[]> {\n    if (debug()) return delay(MOCK_STUDENTS);\n\n    return this.client.get(\n      `students`\n    ).then(response => response.data);\n  }\n\n  static getConsents(): Promise<ConsentData[]> {\n    if (debug()) return delay(MOCK_CONSENTS);\n\n    return this.client.get(\n      `consents`\n    ).then(response => response.data);\n\n  }\n  static getGoalgrades(): Promise<GoalData[]> {\n    if (debug()) return delay(MOCK_GOALS);\n\n    return this.client.get(\n      `goal-grades`\n    ).then(response => response.data);\n  }\n}","export enum discussionType {\n  topic,\n  entry,\n  reply\n}\n\nexport interface CanvasDiscussion {\n  id: number;\n  type: discussionType;\n  discussion_id: number;\n  parent_id: number;\n  course_id: number;\n  title: string;\n  posted_at: string;\n  posted_by: string;\n  message: string;\n}","import {AxiosResponse} from \"axios\";\nimport { debug } from \"../../config/config\";\nimport Controller from \"../controller\";\nimport {delay} from \"../../utils/mockRequest\";\n\nexport default class ConsentController extends Controller {\n\n  static fetchConsent(): Promise<1 | 0 | -1> {\n    if (debug()) return Promise.resolve(1);\n\n    return this.client.get(\n      `datamart/consent`\n    ).then(response => response.data);\n  }\n\n  static setConsent(granted: boolean | null): Promise<AxiosResponse<boolean>> {\n    if (debug()) return delay(granted);\n\n    return this.client.post(\n      `datamart/consent`,\n      { granted: granted === null ? -1 : (granted ? 1 : 0) }\n    );\n  }\n\n  static isAccepted(): Promise<boolean> {\n    if (debug()) return Promise.resolve(true);\n\n    return this.client.get(\n      `/datamart/accept-list/self`\n    ).then(response => response.data);\n  }\n}","import React, { Component } from \"react\";\nimport {Button, Checkbox, message} from \"antd\";\nimport ConsentController from \"../../api/controllers/consent\";\nimport {store} from \"../../utils/configureStore\";\nimport { Redirect } from \"react-router-dom\";\n\nexport default class Consent extends Component<{\n  text?: string | null,\n}> {\n\n  state = {\n    hasRead: false,\n    redirect: false\n  }\n\n  handleAccept = () => {\n    ConsentController.setConsent(true).then(() => {\n      this.setState({ redirect: true });\n    });\n  }\n\n  handleDecline = () => {\n    ConsentController.setConsent(false).then(() => {\n      message.success(\"Consent declined!\");\n    });\n  }\n\n  render(): React.ReactNode {\n    const { text } = this.props;\n    const { hasRead, redirect } = this.state;\n\n    if (redirect) return <Redirect to={'/'} />\n\n    let consentText = text;\n\n    if (!text || text.length === 0) {\n      const {course} = store.getState();\n      consentText = course?.text;\n    }\n\n    if (consentText === null || consentText === undefined || consentText.length === 0) {\n      return (\n        <div>\n          <h1>Application improperly configured.</h1>\n          <p>Please notify your instructor that the informed consent is not configured. Once configured you will be able to accept to the terms to start using the application!</p>\n        </div>\n      );\n    }\n\n    return (\n      <div style={{maxWidth: 700, margin: '0 auto', boxSizing: 'border-box', padding: 20 }}>\n        <h1>Informed Consent</h1>\n        <p>Please read the informed consent carefully. You will be asked to accept the informed consent, if declined your data will not be processed. You can change your preference at any time.</p>\n        <div style={{ backgroundColor: '#eaeaea', padding: 20, borderRadius: 10 }}\n             dangerouslySetInnerHTML={{__html: consentText}} />\n\n        <div style={{marginTop: 20}}>\n          <Checkbox\n            checked={hasRead}\n            onChange={e => this.setState({ hasRead: e.target.checked })}\n          >\n            I have read and understood the informed consent\n          </Checkbox>\n\n          <br/>\n          <br/>\n\n          <Button type={\"primary\"} disabled={!hasRead} onClick={this.handleAccept}>\n            Accept\n          </Button>\n          {' '}\n          <Button disabled={!hasRead} danger onClick={() => {\n            this.handleDecline();\n            this.setState({ hasRead: false });\n          }}>\n            Decline\n          </Button>\n        </div>\n      </div>\n    )\n  }\n}","import React from \"react\";\nimport ConsentController from \"../api/controllers/consent\";\nimport Loading from \"../components/utils/Loading\";\nimport Consent from \"../common/Consent\";\nimport {store} from \"../utils/configureStore\";\n\ntype IState = {\n  accepted: boolean;\n  consentLoaded: boolean;\n  consentGranted: boolean | null;\n}\n\nexport const withConsent = <P extends object>(Component: React.ComponentType<P>) =>\n  class WithLoading extends React.Component<P, IState> {\n\n    state = {\n      accepted: false,\n      consentLoaded: false,\n      consentGranted: false\n    }\n\n    componentDidMount(): void {\n      ConsentController.fetchConsent().then(result => {\n        ConsentController.isAccepted().then(accepted => {\n          this.setState({\n            accepted,\n            consentLoaded: true,\n            consentGranted: result === 1\n          });\n        });\n      });\n    }\n\n    render() {\n      const { consentLoaded, consentGranted, accepted } = this.state;\n\n      const { course } = store.getState();\n\n      if (!consentLoaded || !course) return <Loading />;\n\n      if (!consentGranted && course.require_consent) {\n        return <Consent text={course.text} />;\n      }\n\n      if (!accepted) {\n        return (\n          <div>\n            <h2>You are not authorized to use this application.</h2>\n          </div>\n        )\n      }\n\n      return <Component {...this.props as P} />;\n    }\n  };","import React, { Component } from \"react\";\nimport \"./style.scss\";\nimport {PeerGrades} from \"../../../types\";\n\nexport default class PeerComparison extends Component<{peerGrades: PeerGrades | undefined}> {\n  render(): React.ReactNode {\n    const { peerGrades } = this.props;\n\n    const round = (val: number) => {\n      return Math.round(val * 100) / 100;\n    }\n\n    return (\n      <div className={\"peerComparison\"}>\n        <span className={\"title\"}>Peer Comparison</span>\n\n        { peerGrades ?\n          <div className={\"distribution\"}>\n            <div className={\"min\"}>\n              <small>min.</small>\n              <br />\n              { round(peerGrades.min) }\n            </div>\n\n            <div className={\"avg\"}>\n              <small>avg.</small>\n              <br />\n              { round(peerGrades.avg) }\n            </div>\n\n            <div className={\"max\"}>\n              <small>max.</small>\n              <br />\n              { round(peerGrades.max) }\n            </div>\n          </div> :\n          <p>Not available</p>\n        }\n      </div>\n    )\n  }\n}","import {TilesGradeSummary} from \"../components/StudentDashboard/types\";\nconst compute = require( 'compute.io' );\n\nexport const getAverageGrade = (submissions: TilesGradeSummary[],\n                                precision: number = 2): number | null => {\n  const grades = submissions.map(s => s.average);\n\n  if (grades.length === 0) return null;\n\n  return Math.round(compute.mean(grades) * (10 ** precision)) / (10 ** precision);\n}","import {Tile, TileEntry, TileEntrySubmission} from \"../../../../models/app/Tile\";\n\nexport const getProgression = (tile: Tile, entries: TileEntry[], submissions: TileEntrySubmission[]): number => {\n  if (tile.content === \"BINARY\") {\n    return submissions.length > 0 ?\n      Math.round((\n        submissions.filter(s => parseFloat(s.grade) > .8).length /\n        entries.length\n      ) * 100) : 0;\n  }\n\n  return Math.round((submissions.length / entries.length) * 100);\n}","import React, { Component } from \"react\";\nimport {Statistic} from \"antd\";\nimport { WarningOutlined, LikeOutlined } from \"@ant-design/icons\";\nimport \"./style.scss\";\n\nexport default class GradeStatistic extends Component<\n  { grade: string },\n  { loading: boolean, passed: boolean }\n  > {\n\n  state = { loading: true, passed: false }\n\n  componentDidMount(): void {\n    this.setup();\n  }\n\n  setup = () => {\n    const { grade } = this.props;\n\n    this.setState({ loading: false, passed: parseFloat(grade) >= 5.5 });\n  }\n\n  render(): React.ReactNode {\n    const { loading, passed } = this.state;\n    const { grade } = this.props;\n\n    return (\n      <div className={\"gradeStatistic\"}>\n        <Statistic title={\"Grade\"}\n                   value={grade}\n                   loading={loading}\n                   prefix={passed ?\n                     <LikeOutlined className={\"pass\"} /> :\n                     <WarningOutlined  className={\"fail\"} />\n                   }\n        />\n      </div>\n    );\n  }\n}","import React, { Component } from \"react\";\nimport { Progress, Space } from \"antd\";\nimport PeerComparison from \"./PeerComparison\";\nimport {IProps, IState} from \"./types\";\nimport {getAverageGrade} from \"../../../../utils/grades\";\nimport {getProgression} from \"./helpers\";\nimport GradeStatistic from \"../../../../containers/GradeStatistic\";\nimport \"./style.scss\";\nimport { discussionType } from \"../../../../models/canvas/Discussion\";\n\nexport default class Tile extends Component<IProps, IState> {\n\n  state = { loaded: false }\n\n  getHeader = () => {\n    const { tile, tileEntries, submissions, userGrades, discussions, learningOutcomes, student } = this.props;\n    const avg: number | null = getAverageGrade(userGrades);\n\n    switch (tile.type) {\n      case \"DISCUSSIONS\":\n        let disc_grade = 0;\n        discussions.map(discussion => {\n          if (discussion.type === discussionType.topic ){\n            if (discussion.posted_by === student.name)\n              disc_grade++;\n          } else {\n            disc_grade++;\n          }\n        })\n      return (\n        <span style={{textAlign: 'center'}}>\n          <strong>{ disc_grade }</strong> discussion{discussions.length !== 1 && \"s\"}\n        </span>\n      );\n    }\n\n    switch (tile.content){\n      case \"LEARNING_OUTCOMES\":\n        const success = learningOutcomes.filter(lo => lo.success).length;\n        return (\n          <span style={{textAlign: 'center'}}>\n            <strong>{ success }<small>/{ learningOutcomes.length }</small></strong> completed\n          </span>\n        );\n      case \"PREDICTION\":\n        return <GradeStatistic grade={avg ? avg!.toString() : \"-\"} />;\n      case \"BINARY\":\n        // TODO: this needs to be handled more systematically with types of grades etc and also test to see if/how prediction treats this.\n        return (\n          <>\n            { !!avg && <Progress percent={getProgression(tile, tileEntries, submissions)} /> }\n            <GradeStatistic grade={avg ? (avg * 10).toString() : \"-\"} />\n          </>\n        );\n      case \"ENTRIES\":\n        return (\n          <>\n            { !!avg && <Progress percent={getProgression(tile, tileEntries, submissions)} /> }\n            <GradeStatistic grade={avg ? avg!.toString() : \"-\"} />\n          </>\n        );\n      default:\n        return null;\n    }\n  }\n\n  render(): React.ReactNode {\n    const { tile, peerGrades, userGrades } = this.props;\n    return (\n      <div className={\"tile\"}\n           onClick={() => {\n             window.dispatchEvent(new CustomEvent(\"selectTile\", { detail: { tile, userGrades } }))\n           }}\n      >\n        <div className={\"wrapper\"}>\n          <div className={\"content\"}>\n            <h2>{ tile.title }</h2>\n            <Space direction={\"vertical\"} style={{ width: '100%' }}>\n              { this.getHeader() }\n            </Space>\n          </div>\n\n          <PeerComparison peerGrades={peerGrades.find(pg => pg.tileID === tile.id)} />\n        </div>\n      </div>\n    )\n  }\n}\n","import React, { Component } from \"react\";\nimport Tile from \"./Tile\";\nimport { IProps } from \"./types\";\nimport \"./style.scss\";\n\nexport default class TileGroup extends Component<IProps> {\n\n  render(): React.ReactNode {\n    const {\n      tileGroup,\n      tileEntries,\n      tiles,\n      student,\n      tilesGradeSummary,\n      peerGrades,\n      submissions,\n      discussions,\n      learningOutcomes\n    } = this.props;\n\n    return (\n      <div className={`tileGroup`}>\n        <h2>{ tileGroup.title }</h2>\n\n        <div className={`tileWrapper`}>\n          { tiles.sort((a, b) => a.position - b.position).map(t => {\n            return (\n              <Tile tile={t}\n                    tileEntries={tileEntries.filter(e => e.tile_id === t.id)}\n                    discussions={discussions}\n                    student={student}\n                    submissions={submissions.get(t.id)!}\n                    userGrades={tilesGradeSummary.filter(tgs => tgs.tile.id === t.id)}\n                    peerGrades={peerGrades.filter(pg => pg.tileID === t.id)}\n                    learningOutcomes={learningOutcomes}\n              key={t.id}/>\n            );\n          })}\n        </div>\n      </div>\n    )\n  }\n}\n","import React, { Component } from \"react\";\nimport { TileEntry, TileEntrySubmission } from \"../../../../models/app/Tile\";\nimport { Col, Row } from \"antd\";\nimport { CheckOutlined } from \"@ant-design/icons\";\nimport \"./style.scss\";\n\nexport default class BinaryGrades extends Component<{\n    submissions: TileEntrySubmission[],\n    tileEntries: TileEntry[]\n}> {\n    render(): React.ReactNode {\n        const { submissions, tileEntries } = this.props;\n\n        return (\n            <div id={\"binaryEntries\"}>\n                <Row gutter={[5, 5]}>\n                    {submissions.map(s => {\n                        const success = s.grade.slice(0, 1) !== \"0\";\n                        const entry = tileEntries.find(e => e.id === s.entry_id);\n\n                        return (\n                            <Col key={s.entry_id} xs={12} md={8} lg={6}>\n                                <div className={`entry ${success ? \"success\" : \"fail\"}`}>\n                                    <h2>{entry ? entry.title : null}</h2>\n                                    {success ?\n                                        <span><CheckOutlined /> Present</span> :\n                                        <span>Absent</span>}\n                                </div>\n                            </Col>\n                        );\n                    })}\n                </Row>\n            </div>\n        )\n    }\n}\n","import React, { Component } from \"react\";\nimport { TileEntry, TileEntrySubmission } from \"../../../../../models/app/Tile\";\nimport { Divider, Table } from \"antd\";\nimport GradeStatistic from \"../../../../../containers/GradeStatistic\";\n\nexport default class EntryItem extends Component<{\n    submission: TileEntrySubmission,\n    tileEntry: TileEntry\n}> {\n    render(): React.ReactNode {\n        const { tileEntry, submission } = this.props;\n\n        // FIXME: the check for type is done because when the mocks were made, no consideration was given to the type of meta. To remove this check, convert the meta objects in the mocks to JSON strings.\n        const meta = typeof submission.meta === \"string\" ? JSON.parse(submission.meta || \"{}\") : submission.meta || {};\n\n        return (\n            <div className={\"tileEntry\"}>\n                <h2>{tileEntry.title}</h2>\n                <Divider style={{ margin: '5px 0' }} />\n\n                <GradeStatistic grade={submission.grade} />\n\n                { Object.keys(meta).length > 0 &&\n                    <div>\n                        <Table dataSource={Object.keys(meta).map((key, i) => ({\n                            key: i,\n                            label: key,\n                            value: meta[key]\n                        }))} columns={[\n                            {\n                                title: 'Key',\n                                dataIndex: 'label',\n                                key: 'label',\n                                width: '40%',\n                                ellipsis: true\n                            },\n                            {\n                                title: 'Value',\n                                dataIndex: 'value',\n                                key: 'value',\n                            }]} />\n                    </div>\n                }\n            </div>\n        )\n    }\n}\n","import React, { Component } from \"react\";\nimport {Tile, TileEntry, TileEntrySubmission} from \"../../../../models/app/Tile\";\nimport {Col, Row} from \"antd\";\nimport EntryItem from \"./EntryItem\";\nimport {Bar} from \"react-chartjs-2\";\nimport \"./style.scss\";\nimport {CanvasDiscussion} from \"../../../../models/canvas/Discussion\";\n\nexport default class EntriesList extends Component<{\n  submissions: TileEntrySubmission[],\n  tileEntries: TileEntry[],\n  discussions: CanvasDiscussion[],\n  tile: Tile\n}> {\n  render(): React.ReactNode {\n    const { tile, tileEntries, submissions } = this.props;\n\n    if (tile.graph_view) {\n      const data = {\n        labels: submissions.map((s, i) => {\n          const entry = tileEntries.find(e => e.id === s.entry_id);\n          return entry?.title ?? \"???\";\n        }),\n        datasets: [\n          {\n            label: tile.title + \" grades\",\n            data: submissions.map(s => s.grade),\n            fill: false,\n            backgroundColor: \"rgba(75,192,192,1)\"\n          }\n        ]\n      };\n\n      return (\n        <div id={\"tileEntriesGraph\"} style={{minHeight: '60vh'}}>\n          <div>\n            <Bar options={{ legend: { display: false }}}\n                  width={500}\n                  data={data} />\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div id={\"tileEntriesList\"}>\n        <Row gutter={[10, 10]}>\n          { tileEntries.map(entry => {\n            const submission = submissions.find(s => s.entry_id === entry.id);\n            if (!submission) return null;\n\n            return (\n              <Col key={entry.id} xs={24} sm={12} md={8} lg={6} className={\"entryCol\"}>\n                <EntryItem submission={submission} tileEntry={entry} />\n              </Col>\n            )\n          })}\n        </Row>\n      </div>\n    )\n  }\n}\n","import React, { Component } from \"react\";\nimport {PredictedGrade} from \"../../../../models/app/PredictiveModel\";\nimport {Bar} from \"react-chartjs-2\";\nimport {TileEntry} from \"../../../../models/app/Tile\";\nimport \"./style.scss\";\nimport {store} from \"../../../../utils/configureStore\";\n\nexport default class GradePrediction extends Component<{\n  predictions: PredictedGrade[],\n  tileEntries: TileEntry[]\n}> {\n  render(): React.ReactNode {\n    const { predictions, tileEntries } = this.props;\n    const tiles = store.getState().tiles;\n    let maxComponents = tiles.filter(t => t.content === \"BINARY\").length + 1;\n\n    for (const entry of tileEntries) {\n      const tile = tiles.find(t => t.id === entry.tile_id);\n      if (!tile) continue;\n\n      if (tile.content === \"BINARY\") continue;\n      maxComponents += 1;\n    }\n\n    const round = (val: number) => Math.round(val * 100) / 100;\n\n    const errors = Array.from(Array(maxComponents).keys()).map(i => 5 - ((4.5 / maxComponents) * i));\n    if (predictions.length === 0) {\n      return (\n        <div id={\"gradePrediction\"}>\n          <h2>No predictions available.</h2>\n          <p>Try again later when more grades are available.</p>\n        </div>\n      );\n    }\n\n    const data = (canvas: any) => {\n      const ctx = canvas.getContext(\"2d\")\n      const gradient1 = ctx.createLinearGradient(0,0,0,350);\n      gradient1.addColorStop(0, \"#FFF\");\n      gradient1.addColorStop(1, \"rgb(90, 50, 255)\");\n\n      const gradient2 = ctx.createLinearGradient(0,0,0,350);\n      gradient2.addColorStop(1, \"#FFF\");\n      gradient2.addColorStop(0, \"rgb(90, 50, 255)\");\n\n      return {\n        labels: predictions.map((pg) => pg.date),\n        datasets: [\n          {\n            label: \"Predicted grade\",\n            type: \"line\",\n            backgroundColor: \"rgb(90, 50, 255)\",\n            borderColor: \"rgb(90, 50, 255)\",\n            hoverBorderColor: \"rgb(90, 50, 255)\",\n            fill: false,\n            tension: 0,\n            data: predictions.map(sp => round(sp.grade)),\n            yAxisID: 'y',\n            xAxisID: 'x'\n          },\n          {\n            label: \"UpperConfidence\",\n            type: \"line\",\n            backgroundColor: gradient1,\n            borderColor: \"transparent\",\n            pointRadius: 0,\n            fill: 0,\n            tension: 0,\n            data: predictions.map((sp, i) => sp.grade + errors[i + 3]),\n            yAxisID: 'y',\n            xAxisID: 'x'\n          },\n          {\n            label: \"LowerConfidence\",\n            type: \"line\",\n            backgroundColor: gradient2,\n            borderColor: \"transparent\",\n            pointRadius: 0,\n            fill: 0,\n            tension: 0,\n            data: predictions.map((sp, i) => sp.grade - errors[i + 3]),\n            yAxisID: 'y',\n            xAxisID: 'x'\n          }\n        ]\n      }\n    };\n\n    return (\n      <div id={\"gradePrediction\"}>\n        <h3>Your predicted grade is a <strong>{round(predictions[predictions.length - 1].grade)}</strong></h3>\n\n        <Bar options={{   legend: { display: false },\n                          scales: {\n                            xAxes: [{\n                              id: 'x',\n                              type: 'category'\n                            }],\n                            yAxes: [{\n                              id: 'y',\n                              type: 'linear',\n                              position: \"left\",\n                              ticks: {\n                                beginAtZero: true,\n                                min: 0,\n                                max: 10\n                              }\n                            }]\n                          }}}\n              width={500}\n              data={data} />\n\n        <p>Grade predictions will grow more accurate as the course progresses.</p>\n      </div>\n    );\n  }\n}","import { Col, Divider, Row } from \"antd\";\nimport React, { Component } from \"react\";\nimport { Tile } from \"../../../../models/app/Tile\";\nimport { CanvasDiscussion, discussionType } from \"../../../../models/canvas/Discussion\";\nimport { CanvasStudent } from \"../../../../models/canvas/Student\";\nimport \"./style.scss\";\n\ninterface data {\n    type: discussionType;\n    array: JSX.Element[];\n    title: string;\n}\n\nexport default class DiscussionsList extends Component<{\n    discussions: CanvasDiscussion[],\n    tile: Tile,\n    student: CanvasStudent\n}> {\n\n    handle_entry_or_reply(discussion: CanvasDiscussion, student: CanvasStudent): JSX.Element {\n        return (\n            <>\n            <Divider />\n            <p dangerouslySetInnerHTML={{ __html: discussion.message }} />\n            <small>{discussion.posted_at}</small>\n            </>\n        );\n    }\n\n    handle_topic(discussion: CanvasDiscussion, student: CanvasStudent): JSX.Element | null {\n        if (discussion.posted_by === student.name) {\n            return (\n                <Col key={discussion.id} xs={24} md={12} lg={8}>\n                    <div className={\"discussion\"}>\n                        <h2>{discussion.title}</h2>\n                        <small>{discussion.posted_at}</small>\n                        <Divider />\n                        <p dangerouslySetInnerHTML={{ __html: discussion.message }} />\n                    </div>\n                </Col>\n            )\n        } else {return null}\n    }\n\n    render(): React.ReactNode {\n        const { discussions, student } = this.props;\n\n        let html = new Map<string, data>();\n        let html_list: JSX.Element[] = [];\n        let elem: JSX.Element | null;\n        let data: data | undefined;\n        let discussion: CanvasDiscussion;\n\n        for (let i = 0; i < discussions.length; i++) {\n            discussion = discussions[i];\n\n            switch (discussion.type) {\n                case (discussionType.topic):\n                    elem = this.handle_topic(discussion, student);\n                    if (!elem) break;\n\n                    data = html.get(discussion.discussion_id.toString());\n                    if (data === undefined){\n                        html.set(discussion.discussion_id.toString(), {type: discussion.type, array:[elem], title: \"\"});\n                    } else {\n                        data.array.push(elem);\n                    }\n                    break;\n                case (discussionType.entry):\n                    elem = this.handle_entry_or_reply(discussion, student);\n                    data = html.get(`${discussion.parent_id}.entries`);\n                    if (data === undefined){\n                        html.set(`${discussion.parent_id}.entries`, {type: discussion.type, array:[elem], title: discussion.title});\n                    } else {\n                        data.array.push(elem);\n                    }\n                    break;\n                case (discussionType.reply):\n                    elem = this.handle_entry_or_reply(discussion, student);\n                    data = html.get(`${discussion.parent_id}.replies`);\n                    if (data === undefined){\n                        html.set(`${discussion.parent_id}.replies`, {type: discussion.type, array:[elem], title: discussion.title});\n                    } else {\n                        data.array.push(elem);\n                    }\n                    break;\n            }\n        }\n\n        for (let value of html.values()) {\n            switch (value.type) {\n                case (discussionType.topic):\n                    html_list = html_list.concat(value.array)\n                    break\n                case (discussionType.entry):\n                    html_list.push((\n                        <Col key=\"{value.array[0].parent_id}.entries\" xs={24} md={12} lg={8}>\n                            <div className={\"discussion\"}>\n                                <h2>Questions in: {value.title}</h2>\n                                {value.array}\n                            </div>\n                        </Col>\n                    ))\n                    break;\n                case (discussionType.reply):\n                    html_list.push((\n                        <Col key=\"{value.array[0].parent_id}.replies\" xs={24} md={12} lg={8}>\n                            <div className={\"discussion\"}>\n                                <h2>Replies in: {value.title}</h2>\n                                {value.array}\n                            </div>\n                        </Col>\n                    ))\n                    break;\n            }\n        }\n        return (\n            <div id={\"discussionsList\"}>\n                <Row gutter={[10, 10]}>\n                    {html_list}\n                </Row>\n            </div>\n        )\n    }\n}\n","import React, { Component } from \"react\";\nimport { TileEntry} from \"../../../../models/app/Tile\";\nimport { Badge, Card} from \"antd\";\nimport \"./style.scss\";\nimport { LearningOutcome } from \"../../../../models/app/LearningGoal\";\n\nexport default class LearningOutcomes extends Component<{\n    learningOutcomes: LearningOutcome[],\n    tileEntries: TileEntry[]\n}> {\n    render(): React.ReactNode {\n        const { learningOutcomes, tileEntries } = this.props;\n\n        const formatExpression = (exp: string | null) => {\n            switch (exp) {\n                case \"lte\": return \"≤\";\n                case \"gte\": return \"≥\";\n                default: return \"=\";\n            }\n        }\n\n        return (\n            <div id={\"learningOutcomes\"}>\n                <div style={{ margin: \"0 auto\", maxWidth: '400px', width: '100%' }}>\n                    {learningOutcomes.map((lo, i) => {\n                        return (\n                            <div key={lo.goal.id} style={{ margin: \"5px 0\" }}>\n                                <Badge.Ribbon text={lo.success ? \"Completed\" : \"Not completed\"} color={lo.success ? \"green\" : \"red\"}>\n                                    <Card title={`Goal ${i}`} size=\"small\">\n                                        <strong>\n                                            {lo.goal.title}\n                                        </strong>\n                                        <br />\n                                        {lo.goal.requirements.map(r => {\n                                            const entry = tileEntries.find(e => e.id === r.entry_id);\n\n                                            return (\n                                                <span>{entry ? entry.title : \"???\"} {formatExpression(r.expression)} { r.value}<br /></span>\n                                            )\n                                        })}\n                                    </Card>\n                                </Badge.Ribbon>\n                            </div>\n                        );\n                    })}\n                </div>\n            </div>\n        )\n    }\n}\n","import React, { Component } from \"react\";\nimport {Tile, TileEntry, TileEntrySubmission} from \"../../../models/app/Tile\";\nimport BinaryGrades from \"./BinaryGrades\";\nimport {Button} from \"antd\";\nimport { ArrowLeftOutlined } from \"@ant-design/icons\";\nimport EntriesList from \"./EntriesList\";\nimport GradePrediction from \"./GradePrediction\";\nimport {PredictedGrade} from \"../../../models/app/PredictiveModel\";\nimport DiscussionsList from \"./DiscussionsList\";\nimport {CanvasDiscussion} from \"../../../models/canvas/Discussion\";\nimport LearningOutcomes from \"./LearningOutcomes\";\nimport { LearningOutcome } from \"../../../models/app/LearningGoal\";\nimport { CanvasStudent } from \"../../../models/canvas/Student\";\n\nexport default class TileDetail extends Component<{\n  tile: Tile,\n  submissions: TileEntrySubmission[],\n  discussions: CanvasDiscussion[],\n  tileEntries: TileEntry[],\n  predictions: PredictedGrade[],\n  learningOutcomes: LearningOutcome[],\n  student: CanvasStudent\n}> {\n\n  content = () => {\n    const { tile, submissions, tileEntries, predictions, discussions, learningOutcomes, student } = this.props;\n\n    switch(tile.content) {\n      case \"BINARY\":\n        return (\n          <BinaryGrades submissions={submissions}\n                        tileEntries={tileEntries.filter(e => e.tile_id === tile.id)}\n          />\n        );\n      case \"ENTRIES\":\n        switch (tile.type) {\n          case \"DISCUSSIONS\":\n            return (\n              <DiscussionsList discussions={discussions}\n                               tile={tile}\n                               student={student} />\n            );\n          default:\n            return (\n              <EntriesList submissions={submissions}\n                           tileEntries={tileEntries.filter(e => e.tile_id === tile.id)}\n                           discussions={discussions}\n                           tile={tile}\n              />\n            );\n        }\n      case \"PREDICTION\":\n        return (\n          <GradePrediction tileEntries={tileEntries}\n                           predictions={predictions} />\n        );\n      case \"LEARNING_OUTCOMES\":\n        return (\n          <LearningOutcomes learningOutcomes={learningOutcomes} tileEntries={tileEntries} />\n        );\n      default:\n        return null;\n    }\n  }\n\n  render(): React.ReactNode {\n    const { tile } = this.props;\n\n    return (\n      <div style={{padding: 20}}>\n        <Button type={\"ghost\"}\n                icon={<ArrowLeftOutlined />}\n                onClick={() => {\n                  window.dispatchEvent(new CustomEvent('selectTile', { detail: undefined }))\n                }}\n        >\n          Return to dashboard\n        </Button>\n\n        <h1 style={{margin: '10px 0'}}>{ tile.title }</h1>\n        { this.content() }\n      </div>\n    )\n  }\n}","import React, { Component } from \"react\";\n// import {createBarData, getBarOptions} from \"../helpers\";\nimport {HorizontalBar} from \"react-chartjs-2\";\nimport {Tile} from \"../../../models/app/Tile\"\nimport { CanvasDiscussion, discussionType } from \"../../../models/canvas/Discussion\";\nimport { LearningOutcome } from \"../../../models/app/LearningGoal\";\nimport { PeerGrades, TilesGradeSummary } from \"../types\";\nimport {Data} from \"./types\"\nimport { IProps } from \"./types\";\nimport { CanvasStudent } from \"../../../models/canvas/Student\";\n\nexport default class GradeBar extends Component<IProps> {\n\n  bar_options = {\n    maintainAspectRatio: true,\n    legend: {\n      display: true\n    },\n    scales: {\n      xAxes: [{\n        gridLines : {\n          display : false\n        },\n        scaleLabel: {\n          display: false\n          // labelString: 'Grade'\n        },\n        ticks: {\n          display: false\n        },\n        stacked: false,\n      }],\n      yAxes: [{\n        barPercentage: .95,\n        categoryPercentage: .95,\n        gridLines : {\n          display : false\n        },\n        scaleLabel: {\n          display: false\n        },\n        stacked: false\n      }]\n    }\n  }\n\n  click = (evt: any, element: any, data: any) => {\n\n    if (!element[0]) return;\n    let tile = data.tiles[element[0]._index]\n\n    window.dispatchEvent(new CustomEvent('selectTile', { detail: {tile} }))\n    // TODO: fsr the chart does not like it when we go to another page like this.\n\n  }\n\n  createBarData(tiles: Tile[], tilesGradeSummary: TilesGradeSummary[] , peerGrades: PeerGrades[], discussions: CanvasDiscussion[], learningOutcomes: LearningOutcome[], student: CanvasStudent) {\n    let datadict = new Map<number, Data>();\n\n    for (let i = 0; i < tiles.length; i++) {\n      // TODO: Very ugly but everything is hardcoded so that discussions and learning_outcomes are only on 1 tile.\n      let grade = 0\n      if (tiles[i].content === \"LEARNING_OUTCOMES\") {\n        grade = learningOutcomes.filter(lo => lo.success).length;\n      } else if (tiles[i].type === \"DISCUSSIONS\") {\n        discussions.map(discussion => {\n          if (discussion.type === discussionType.topic ){\n            if (discussion.posted_by === student.name)\n              grade++;\n          } else {\n            grade++;\n          }\n        })\n      }\n\n      datadict.set(tiles[i].id, {title: tiles[i].title, grade: grade, peergrade: 0, max: 10, tile: tiles[i]});\n    }\n\n    for (let i = 0; i < tilesGradeSummary.length; i++) {\n      let grade = tilesGradeSummary[i].average\n      let entry = datadict.get(tilesGradeSummary[i].tile.id)!;\n      if (tilesGradeSummary[i].tile.content === \"BINARY\"){\n        entry.max = 100\n        grade = grade * 100 //TODO: this fixes the bars atm, but something is going wrong earlier I think\n      }\n\n      // TODO:\n      grade = grade * 10 / entry.max;\n\n      entry.grade = grade;\n\n    }\n\n    for (let i = 0; i < peerGrades.length; i++) {\n      let pgrade = peerGrades[i].avg;\n      let entry = datadict.get(peerGrades[i].tileID)!;\n\n      pgrade = pgrade * 10/ entry.max;\n\n      entry.peergrade = pgrade;\n    }\n\n    let data_tiles: Tile[] = [];\n    let titles: string[] = [];\n    let grades: any[] = [];\n    let peergrades: any[] = [];\n\n    datadict.forEach((value) => {\n      if (value.grade === 0 && value.peergrade === 0) return;\n\n      data_tiles.push(value.tile);\n      titles.push(value.title);\n      grades.push(value.grade);\n      peergrades.push(value.peergrade);\n    });\n\n    return {\n      tiles: data_tiles,\n      labels: titles,\n      datasets: [\n        {\n          label: \"You\",\n          backgroundColor: \"rgba(47,44,232, 0.5)\",\n          borderColor: \"rgba(0,0,255, 1)\",\n          borderWidth: 2,\n          data: grades,\n          skipNull: true\n        },\n        {\n          label: \"Peers\",\n          backgroundColor: \"rgba(255, 50, 50, .5)\",\n          borderColor: \"rgba(255,0,0, 1)\",\n          borderWidth: 2,\n          data: peergrades,\n          skipNull: true\n        }\n      ]\n    }\n  }\n\n  render(): React.ReactNode {\n    const { tiles, tilesGradeSummary, peerGrades, discussions, learningOutcomes, student} = this.props;\n    let data = this.createBarData(tiles, tilesGradeSummary, peerGrades, discussions, learningOutcomes, student)\n    return (\n      <div>\n        <HorizontalBar height={300}\n                       data={data}\n                       options={{...this.bar_options, onClick: (evt: any, e: any) => this.click(evt, e, data) }} />\n      </div>\n    );\n  }\n}","import React, { Component } from \"react\";\nimport {Button, Col, Row} from \"antd\";\nimport {RootState} from \"../../../store\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport {CanvasStudent} from \"../../../models/canvas/Student\";\nimport DataMartController from \"../../../api/controllers/datamart\";\nimport {PerformanceNotification} from \"../../../models/app/Notification\";\nimport PerformanceNotifications from \"../../../components/visuals/Notifications\";\nimport { SettingOutlined } from \"@ant-design/icons\";\n\nconst mapState = (state: RootState) => ({\n  course: state.course,\n  tiles: state.tiles\n});\n\nconst connector = connect(mapState)\ntype PropsFromRedux = ConnectedProps<typeof connector>\ntype Props = PropsFromRedux & { student: CanvasStudent | undefined , settings: (view: boolean) => void};\ntype IState = { notifications: PerformanceNotification[] };\n\nclass UserProfile extends Component<Props, IState> {\n\n  _isMounted = false;\n\n  state = {\n    notifications: []\n  }\n\n  componentDidMount(): void {\n    this._isMounted = true;\n    this.loadNotifications(this.props);\n  }\n\n  componentWillReceiveProps(nextProps: Readonly<Props>, nextContext: any): void {\n    if (nextProps.student?.login_id !== this.props.student?.login_id) {\n      this.loadNotifications(nextProps);\n    }\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  loadNotifications = (props: Props) => {\n    const { student } = props;\n    if (!student) return;\n\n    DataMartController.getNotifications(student.login_id).then(notifications => {\n      // TODO: I think this may be a race condition, try to do away with the isMounted flag and resolve the console error. If noone complains about missing functionality by 2023, remove this todo.\n      this._isMounted && this.setState({ notifications });\n    });\n  }\n\n  render(): React.ReactNode {\n    const { course, student, tiles, settings } = this.props;\n    const { notifications }: IState = this.state;\n\n    const outperforming = notifications\n      .filter(n => n.status === \"outperforming peers\");\n\n    const closing = notifications\n      .filter(n => n.status === \"closing the gap\");\n\n    const moreEffort = notifications\n      .filter(n => n.status === \"more effort required\");\n\n    return (\n      <div id={\"userProfile\"}>\n        <Row>\n          <Col span={6}>\n            <div style={{margin: \"10\"}}>\n            <h3>{ student && student.name }</h3>\n            <strong>{ course && course.course_name }</strong>\n            </div>\n          </Col>\n\n          <Col span={13} >\n            <div style={{display: \"table\", margin: \"0 auto\"}}>\n              <PerformanceNotifications outperforming = {outperforming}\n                                      closing = {closing}\n                                      moreEffort = {moreEffort}\n                                      tiles = {tiles}\n            />\n            </div>\n          </Col>\n          <Col span={5}>\n            <div style={{display: \"table\", margin: \"0 auto\"}}>\n            <Button size={\"large\"} onClick={() => settings(true)} color={\"primary\"} icon={<SettingOutlined />}>\n              Settings\n            </Button>\n            </div>\n          </Col>\n\n        </Row>\n        <br />\n        <div style={{textAlign: 'center'}}>\n          <small>\n            IGuideME is a product by the University of Amsterdam.\n          </small>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default connector(UserProfile);\n","import React, { Component } from \"react\";\nimport { withConsent } from \"../../hoc/withConsent\";\nimport { withAdminRole } from \"../../hoc/withAdminRole\";\nimport \"./style.scss\";\nimport { Radio, Space } from \"antd\";\nimport AppController from \"../../api/controllers/app\";\n\ninterface IProps {};\ninterface IState {\n  goalGrade: number\n\n};\n\nclass DesiredGrade extends Component<IProps, IState> {\n\n  state = {\n    goalGrade: -1,\n  }\n\n  componentDidMount(): void {\n    AppController.getGoalGrade().then(goalGrade =>\n      this.setState({ goalGrade: goalGrade }));\n  }\n\n  render(): React.ReactNode {\n\n    return (\n      <div id={\"desiredGrade\"}>\n        <h1>Goal Grade</h1>\n        <p>Please indicate the grade you wish to obtain for this course. You can always change your goal at a later stage!</p>\n\n        <Space direction={\"vertical\"}>\n          <Radio.Group\n            value={this.state.goalGrade}\n            onChange={val => AppController.setGoalGrade(val.target.value).then(_ => this.setState({ goalGrade: val.target.value }))}\n            options={[\n              { label: '1', value: 1 },\n              { label: '2', value: 2 },\n              { label: '3', value: 3 },\n              { label: '4', value: 4 },\n              { label: '5', value: 5 },\n              { label: '6', value: 6 },\n              { label: '7', value: 7 },\n              { label: '8', value: 8 },\n              { label: '9', value: 9 },\n              { label: '10', value: 10 }\n            ]}\n            optionType=\"button\"\n          />\n        </Space>\n      </div>\n    )\n  }\n}\n\nexport default withConsent(withAdminRole(DesiredGrade));","import React, { Component } from \"react\";\nimport { Button, Col, Row, Tooltip } from \"antd\";\nimport { ArrowLeftOutlined } from \"@ant-design/icons\";\nimport { BellTwoTone } from \"@ant-design/icons\";\nimport DesiredGrade from \"../DesiredGrade\";\nimport Consent from \"../Consent\";\n\n\ninterface IProps {settings: (view: boolean) => void};\ninterface IState {\n    notifications: boolean;\n    updatingNotifications: boolean;\n};\n\nexport default class UserSettings extends Component<IProps, IState> {\n\n    state = {\n        notifications: true,\n        updatingNotifications: false\n    }\n\n    toggleNotifications = () => {\n        this.setState({notifications: !this.state.notifications});\n    };\n\n    render(): React.ReactNode {\n        const { settings } = this.props;\n        let { notifications, updatingNotifications } = this.state;\n\n        return (\n            <div>\n            <Row>\n            <Col span={6}>\n                <div style={{padding: 20}}>\n                    <Button type={\"ghost\"}\n                        icon={<ArrowLeftOutlined />}\n                        onClick={() => settings(false)}\n                    >\n                    Return to dashboard\n                    </Button>\n                </div>\n            </Col>\n            <Col span={4} offset={14}>\n                <div style={{padding: 20, textAlign: 'center'}}>\n                <Tooltip key={`tooltip`}\n                         title={<span>Notifications are turned <strong>{ notifications ? \"on\" : \"off\"}</strong>.</span>}>\n                  <Button type={\"ghost\"}\n                          key={`toggleNotifications`}\n                          loading={updatingNotifications}\n                          size={'large'}\n                          shape=\"circle\"\n                          icon={<BellTwoTone twoToneColor={notifications ? \"rgb(0, 185, 120)\" : \"rgb(255, 110, 90)\"} />}\n                          onClick={() => this.toggleNotifications()}\n                  />\n                </Tooltip>\n                </div>\n            </Col>\n            </Row>\n            <Row>\n            <Col span={24}>\n                <DesiredGrade/>\n            </Col>\n            </Row>\n            <Row>\n            <Col span={24}>\n                <Consent/>\n            </Col>\n            </Row>\n            </div>\n        )\n    }\n}\n\n","import React, { Component } from \"react\";\nimport {IProps, IState, TilesGradeSummary, ViewTypes} from \"./types\";\nimport TileGroup from \"./TileGroup\";\nimport {Tile, TileEntrySubmission, TileGroup as TileGroupModel} from \"../../models/app/Tile\";\nimport FadeIn from \"react-fade-in\";\nimport TileController from \"../../api/controllers/tile\";\nimport Loading from \"../utils/Loading\";\nimport {DashboardColumn} from \"../../models/app/Layout\";\nimport TileDetail from \"./TileDetail\";\nimport { Col, Radio, Row } from \"antd\";\nimport { AppstoreOutlined, BarChartOutlined } from \"@ant-design/icons\";\n// import TileRadar from \"./TileRadar\";\nimport TileBars from \"./TileBars\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport {RootState} from \"../../store\";\nimport \"./style.scss\";\nimport {DataMartActions} from \"../../store/actions/datamart\";\nimport {PredictedGrade} from \"../../models/app/PredictiveModel\";\nimport UserProfile from \"./UserProfile\";\nimport {CanvasDiscussion} from \"../../models/canvas/Discussion\";\nimport {LearningOutcome} from \"../../models/app/LearningGoal\";\nimport DataMartController from \"../../api/controllers/datamart\";\nimport AppController from \"../../api/controllers/app\";\nimport UserSettings from \"../../common/UserSettings\";\n\nconst mapState = (state: RootState) => ({\n  dashboardColumns: state.dashboardColumns,\n  tiles: state.tiles.filter((t: Tile) => t.visible),\n  tileGroups: state.tileGroups,\n  tileEntries: state.tileEntries,\n  predictions: state.predictions,\n});\n\nconst mapDispatch = {\n  loadPredictions: (user: string = 'self') => DataMartActions.loadPredictions(user)\n}\n\nconst connector = connect(mapState, mapDispatch)\ntype PropsFromRedux = ConnectedProps<typeof connector>\ntype Props = PropsFromRedux & IProps;\n\nclass StudentDashboard extends Component<Props, IState> {\n\n  state = {\n    tilesGradeSummary: [],\n    peerGrades: [],\n    userSubmissions: new Map<number, TileEntrySubmission[]>(),\n    loaded: true,\n    displayTile: null,\n    discussions: [] as CanvasDiscussion[],\n    learningOutcomes: [] as LearningOutcome[],\n    viewType: \"bar\" as ViewTypes,\n    predictions: [],\n    goalGrade: 0,\n    settings_view: false\n  }\n\n  componentDidMount(): void {\n    window.addEventListener('selectTile', (event: any) => {\n      this.setState({ displayTile: event?.detail});\n    });\n\n    this.setup(this.props);\n  }\n\n  componentWillReceiveProps(nextProps: Readonly<Props>, nextContext: any): void {\n    if (nextProps.student && nextProps.student?.login_id !== this.props.student?.login_id) {\n        this.setup(nextProps);\n    }\n  }\n\n  setSettingsView = (view: boolean) => {\n    this.setState({settings_view: view});\n  }\n\n  setup = async (props: Props, propPredictions: PredictedGrade[] = []) => {\n    let { tiles, student} = props;\n    if (!student) return;\n\n    // if (propPredictions.length >= 0) predictions = propPredictions;\n\n    let predictions = await DataMartController.getPredictions(student.login_id);\n\n    this.setState({ loaded: false });\n\n    let submissions = new Map<number, TileEntrySubmission[]>();\n\n    let p_discussions: Promise<CanvasDiscussion[]>[] = [];\n    let p_goals: Promise<LearningOutcome[]>[] = [];\n\n    let data = [];\n    let grade;\n\n    for (const tile of tiles) {\n      if (tile.content === \"LEARNING_OUTCOMES\") {\n        p_goals.push(TileController.getUserGoals(tile.id, student.login_id));\n        continue;\n      }\n      if (tile.type === \"DISCUSSIONS\") {\n        p_discussions.push(TileController.getDiscussions(tile.id, student.login_id));\n        continue;\n      }\n\n      if (tile.content === \"PREDICTION\") {\n        data.push({\n          tile: tile,\n          average: predictions.length > 0 ? predictions[0].grade : 0\n        })\n        continue;\n      }\n\n      submissions.set(tile.id, await TileController.getTileSubmissions(tile.id, student.login_id));\n\n      let avg = 0, total = 0;\n\n      for (const sub of submissions.get(tile.id)!) {\n        grade = parseFloat(sub.grade);\n        avg += (tile.content === \"BINARY\") ? Number(grade !== 0) : grade;\n        total++;\n      }\n\n      avg = total ? avg/total : avg;\n      data.push({ tile: tile, average: avg}\n      );\n    }\n\n    let discussions = (await Promise.all(p_discussions)).flat();\n    let goals = (await Promise.all(p_goals)).flat();\n\n    let goalGrade = await AppController.getGoalGrade();\n\n    this.setState({\n      discussions,\n      learningOutcomes: goals,\n      tilesGradeSummary: data,\n      userSubmissions: submissions,\n      predictions: predictions,\n      goalGrade: goalGrade\n    }, () => {\n      TileController.getPeerResults(student!.login_id).then(peerGrades =>\n        this.setState({ peerGrades, loaded: true })\n      ).catch(() => this.setState({ loaded: true }));\n    });\n  }\n\n  render(): React.ReactNode {\n    const {\n      loaded,\n      displayTile,\n      viewType,\n      tilesGradeSummary,\n      peerGrades,\n      userSubmissions,\n      discussions,\n      learningOutcomes,\n      predictions,\n      goalGrade,\n      settings_view\n    } = this.state;\n\n    const { tiles, tileGroups, dashboardColumns, tileEntries, student } = this.props;\n    console.log(\"tiles\", tiles);\n    console.log(\"Discussions\", discussions);\n\n    if (!loaded || !student) return (<Loading small={true} />);\n\n    if (settings_view) {\n      return <UserSettings settings={this.setSettingsView} />\n    }\n\n    if (displayTile) {\n      return <TileDetail tile={(displayTile as any).tile}\n                         tileEntries={tileEntries}\n                         discussions={discussions}\n                         predictions={predictions}\n                         submissions={userSubmissions.get((displayTile as any).tile.id)!}\n                         learningOutcomes={learningOutcomes}\n                         student={student}\n      />\n    }\n\n    return (\n      <div id={\"studentDashboard\"}>\n        <Row>\n        <Col span={6}>\n\n        <Radio.Group value={viewType}\n                     buttonStyle=\"solid\"\n                     onChange={e => this.setState({ viewType: e.target.value })}\n                     >\n          <Radio.Button value=\"bar\"><BarChartOutlined /> Bar</Radio.Button>\n          <Radio.Button value=\"grid\"><AppstoreOutlined /> Grid</Radio.Button>\n        </Radio.Group>\n        </Col>\n        <Col span={4} offset={14}>\n          <div style={{margin: 10}}>\n              Goal Grade: { goalGrade }\n          </div>\n        </Col>\n        </Row>\n\n        { viewType === \"grid\" ?\n          <FadeIn>\n            <div>\n              { dashboardColumns.map((c: DashboardColumn) => {\n                return (\n                  <div className={`column ${c.container_width}`}\n                       key={c.id}>\n                    { tileGroups\n                      .filter((tg: TileGroupModel) => tg.column_id === c.id)\n                      .sort((a: TileGroupModel, b: TileGroupModel) => a.position - b.position)\n                      .map((tg: TileGroupModel) =>\n                        <TileGroup tileGroup={tg}\n                                   tiles={tiles.filter((t: Tile) => t.group_id === tg.id) }\n                                   discussions={discussions}\n                                   tileEntries={tileEntries.filter(e => tiles.filter(\n                                     (t: Tile) => t.group_id === tg.id).map(x => x.id).includes(e.tile_id))}\n                                   student={student}\n                                   tilesGradeSummary={tilesGradeSummary.filter(\n                                     (tgs: TilesGradeSummary) => tgs.tile.group_id === tg.id)}\n                                   peerGrades={peerGrades}\n                                   submissions={userSubmissions}\n                                   learningOutcomes={learningOutcomes}\n                        key={tg.id}\n                        />\n                      )\n                    }\n                  </div>\n                )\n              })}\n            </div>\n          </FadeIn>\n          :\n          // <TileRadar tiles={tiles}\n          //            tileEntries={tileEntries}\n          //            student={student}\n          //            tilesGradeSummary={tilesGradeSummary}\n          //            peerGrades={peerGrades}\n          // />\n          <div style={{ padding: '0 8%'}}>\n            <TileBars tiles={tiles}\n                      tilesGradeSummary = {tilesGradeSummary}\n                      peerGrades = {peerGrades}\n                      discussions = {discussions}\n                      learningOutcomes={learningOutcomes}\n                      student={student}\n            />\n          </div>\n        }\n      <br />\n      <br />\n        <UserProfile student={this.props.student}\n                     settings={this.setSettingsView} />\n      </div>\n    )\n  }\n}\n\nexport default connector(StudentDashboard);\n","import React, { Component } from \"react\";\nimport { IProps } from \"./types\";\nimport { Result } from \"antd\";\nimport { SmileOutlined } from \"@ant-design/icons\";\nimport StudentDashboard from \"../StudentDashboard\";\nimport \"./style.scss\";\n\nexport default class AdminDashboard extends Component<IProps> {\n  render(): React.ReactNode {\n    if (!this.props.student) {\n      return (\n        <div id={\"getStarted\"}>\n          <Result\n            icon={<SmileOutlined />}\n            title={\n              <div>\n                <h2>Pick a student to start!</h2>\n                <h1 id={\"brand\"}>IGuideME</h1>\n              </div>\n            }\n          />\n        </div>\n      );\n    }\n\n    return (<StudentDashboard student={this.props.student} />);\n  }\n}","import React, { Component } from \"react\";\nimport { withConsent } from \"../../hoc/withConsent\";\nimport { withAdminRole } from \"../../hoc/withAdminRole\";\nimport {UserDataProps} from \"../../hoc/types\";\nimport AdminHeader from \"../../containers/AdminHeader\";\nimport StudentDashboard from \"../../components/StudentDashboard\";\nimport AdminDashboard from \"../../components/AdminDashboard\";\nimport {CanvasStudent} from \"../../models/canvas/Student\";\nimport UserController from \"../../api/controllers/app\";\nimport {RootState} from \"../../store\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport Loading from \"../../components/utils/Loading\";\nimport { Redirect } from \"react-router-dom\";\n\nconst mapState = (state: RootState) => ({\n  user: state.user,\n  predictions: state.predictions\n});\n\nconst connector = connect(mapState)\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\ntype Props = PropsFromRedux & UserDataProps;\n\nclass App extends Component<Props, { student: CanvasStudent | null, goalGrade: number | undefined }> {\n\n  state = { student: null, goalGrade: undefined }\n\n  componentDidMount(): void {\n    const { isAdmin } = this.props;\n    if (!isAdmin) {\n      UserController.getUser().then(student => this.setState({ student }));\n      UserController.getGoalGrade().then(goalGrade => this.setState({ goalGrade }));\n    } else {\n      this.setState({ goalGrade: 10 });\n    }\n  }\n\n  render(): React.ReactNode {\n    const { isAdmin } = this.props;\n    const { student, goalGrade } = this.state;\n\n    if (goalGrade === undefined) return <Loading />;\n    if (goalGrade === -1) return <Redirect to={'goal-grade'} />;\n\n    return (\n      <div id={\"app\"}>\n        { isAdmin && <AdminHeader studentPickView={true}\n                                  setStudent={student => {\n                                    this.setState({ student }, () =>\n                                      window.dispatchEvent(\n                                        new CustomEvent('selectTile', {\n                                          detail: undefined\n                                        })\n                                      )\n                                    )\n                                  }}\n        /> }\n        { isAdmin ?\n          <AdminDashboard student={student} /> :\n          student === null ?\n            <h1>Your account has not yet been processed, try again tomorrow!</h1>:\n            <StudentDashboard student={student || undefined} />\n        }\n      </div>\n    )\n  }\n}\n\nexport default withConsent(withAdminRole(connector(App)));","import React, {Component} from \"react\";\nimport {TrophyOutlined, RiseOutlined, WarningOutlined} from \"@ant-design/icons\";\nimport { IProps } from \"./types\";\n\n\nexport default class PerformanceNotifications extends Component<IProps> {\n\n    _getTileTitle = (tileID: number): string => {\n        return this.props.tiles.find(t => t.id === tileID)?.title ?? \"\";\n    }\n\n    render(): React.ReactNode {\n\n        let {outperforming, closing, moreEffort} = this.props\n\n        return (\n        <div className=\"Notifications\">\n            { outperforming.length > 0 &&\n            <div>\n                <TrophyOutlined />\n                {' '}\n                You are outperforming your peers in:\n                <ul style={{boxSizing: 'border-box', paddingLeft: 30}}>\n                { outperforming.map((n, i) => <li key={i}>{this._getTileTitle(n.tile_id)}</li>)}\n                </ul>\n            </div> }\n\n            { closing.length > 0 &&\n            <div>\n                <RiseOutlined />\n                {' '}\n                You are closing the gap to your peers in:\n                <ul style={{boxSizing: 'border-box', paddingLeft: 30}}>\n                { closing.map((n, i) => <li key={i}>{this._getTileTitle(n.tile_id)}</li>)}\n                </ul>\n            </div> }\n\n            { moreEffort.length > 0 &&\n            <div>\n                <WarningOutlined />\n                {' '}\n                You have to put more effort in:\n                <ul style={{boxSizing: 'border-box', paddingLeft: 30}}>\n                { moreEffort.map(n => <li>{this._getTileTitle(n.tile_id)}</li>)}\n                </ul>\n            </div> }\n        </div>\n        );\n    }\n}","import React, { Component } from \"react\";\nimport Select from \"react-select\";\nimport {Button, Tooltip} from \"antd\";\nimport {SyncOutlined} from \"@ant-design/icons\";\nimport { Link } from \"react-router-dom\";\nimport {IProps, IState} from \"./types\";\nimport StudentController from \"../../api/controllers/student\";\nimport {CanvasStudent} from \"../../models/canvas/Student\";\nimport {debug} from \"../../config/config\";\nimport {RootState} from \"../../store\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport \"./style.scss\";\n\nconst mapState = (state: RootState) => ({\n  course: state.course,\n  user: state.user\n});\n\nconst connector = connect(mapState);\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\ntype Props = IProps & PropsFromRedux;\n\nclass AdminHeader extends Component<Props, IState> {\n\n  state = {\n    loaded: false,\n    students: []\n  }\n\n  componentDidMount(): void {\n    const { studentPickView } = this.props;\n\n    if (studentPickView) {\n      StudentController.getStudents().then(students => this.setState({ students, loaded: true }));\n    }\n\n    this.setState({ loaded: true });\n  }\n\n  renderInner(): React.ReactNode {\n    if (this.props.studentPickView) {\n      const { students, loaded } = this.state;\n      return (\n        <Select id={\"studentPicker\"}\n                isLoading={!loaded}\n                options={students.sort(\n                  (a: CanvasStudent, b: CanvasStudent) => a.name.localeCompare(b.name)\n                ).map((s: CanvasStudent) => ({ label: s.name, value: s.login_id}))}\n                placeholder={\"Choose a student\"}\n                onChange={(e) => this.props.setStudent!(\n                  e ? students.find((s: CanvasStudent) => s.login_id === e!.value)! : null\n                )}\n                isClearable={true}\n                styles={{\n                  control: (provided, state) => ({\n                    ...provided,\n                    backgroundColor: 'transparent',\n                    color: 'white',\n                    border: '1px solid white'\n                  }),\n                  singleValue: (provided, state) => {\n                    return {...provided, color: 'white'};\n                  }\n                }}\n        />\n      );\n    }\n\n    return (\n      <div id={\"inner\"}>\n        <h2>{ this.props.course ? this.props.course.course_name : \"Loading course...\" }</h2>\n      </div>\n    );\n  }\n\n  render(): React.ReactNode {\n    return (\n      <React.Fragment>\n        <div id={\"adminHeader\"}>\n          { this.props.studentPickView ?\n            <Link to={'/admin'} style={{ float: 'right' }}>\n              <h3>Admin Panel</h3>\n            </Link> :\n            <div style={{float: 'right', padding: 20}}>\n              <Tooltip title={\"Reload data\"}>\n                <Button id={\"reload\"}\n                        shape=\"circle\"\n                        style={{backgroundColor: 'rgba(255, 255, 255, 0.5)', color: 'white'}}\n                        icon={<SyncOutlined />} />\n              </Tooltip>\n            </div>\n          }\n\n          <div id={\"navbarContent\"}>\n            <div id={\"brand\"}>\n              <Link to={'/'}>\n                <h1>IGuideME</h1>\n              </Link>\n            </div>\n\n            { this.renderInner() }\n          </div>\n        </div>\n        { debug() &&\n          (<div id={\"debugNotice\"}>\n            Application is running in <strong>demo</strong> mode. Changes will not be saved!\n          </div>)\n        }\n      </React.Fragment>\n    );\n  }\n}\n\nexport default connector(AdminHeader);","import { debug } from \"../../config/config\";\nimport Controller from \"../controller\";\n\nexport default class AdminController extends Controller {\n\n  static isAdmin(): Promise<boolean> {\n    if (debug()) return Promise.resolve(true);\n\n    return this.client.get(\n      `is-admin`\n    ).then(response => response.data);\n  }\n}","import React from \"react\";\nimport Loading from \"../components/utils/Loading\";\nimport AdminController from \"../api/controllers/admin\";\n\ntype IState = {\n  isAdmin: boolean,\n  doneLoading: boolean\n}\n\nexport const withAdminRole = <P extends object>(Component: React.ComponentType<P>) =>\n  class WithAdminRole extends React.Component<P, IState> {\n\n    state = {\n      isAdmin: false,\n      doneLoading: false\n    }\n\n    componentDidMount(): void {\n      AdminController.isAdmin().then(result => {\n        this.setState({\n          isAdmin: result,\n          doneLoading: true\n        });\n      });\n    }\n\n    render() {\n      const { doneLoading, isAdmin } = this.state;\n\n      if (!doneLoading) return <Loading />;\n\n      return <Component isAdmin={isAdmin} {...this.props as P} />;\n    }\n  };"],"names":["StudentController","debug","delay","MOCK_STUDENTS","this","client","get","then","response","data","MOCK_CONSENTS","MOCK_GOALS","Controller","discussionType","ConsentController","Promise","resolve","granted","post","Consent","state","hasRead","redirect","handleAccept","setConsent","setState","handleDecline","message","text","props","to","consentText","length","course","store","undefined","style","maxWidth","margin","boxSizing","padding","backgroundColor","borderRadius","dangerouslySetInnerHTML","__html","marginTop","checked","onChange","e","target","type","disabled","onClick","danger","Component","withConsent","accepted","consentLoaded","consentGranted","fetchConsent","result","isAccepted","require_consent","Loading","React","PeerComparison","peerGrades","round","val","Math","className","min","avg","max","compute","require","getAverageGrade","submissions","precision","grades","map","s","average","mean","getProgression","tile","entries","content","filter","parseFloat","grade","GradeStatistic","loading","passed","setup","title","value","prefix","LikeOutlined","WarningOutlined","Tile","loaded","getHeader","tileEntries","userGrades","discussions","learningOutcomes","student","disc_grade","discussion","topic","posted_by","name","textAlign","success","lo","toString","percent","window","dispatchEvent","CustomEvent","detail","direction","width","find","pg","tileID","id","TileGroup","tileGroup","tiles","tilesGradeSummary","sort","a","b","position","t","tile_id","tgs","BinaryGrades","gutter","slice","entry","entry_id","xs","md","lg","CheckOutlined","EntryItem","tileEntry","submission","meta","JSON","parse","Object","keys","dataSource","key","i","label","columns","dataIndex","ellipsis","EntriesList","graph_view","labels","datasets","fill","minHeight","options","legend","display","sm","GradePrediction","predictions","maxComponents","errors","Array","from","scales","xAxes","yAxes","ticks","beginAtZero","canvas","ctx","getContext","gradient1","createLinearGradient","addColorStop","gradient2","date","borderColor","hoverBorderColor","tension","sp","yAxisID","xAxisID","pointRadius","DiscussionsList","posted_at","elem","html","Map","html_list","handle_topic","discussion_id","set","array","push","handle_entry_or_reply","parent_id","reply","values","concat","LearningOutcomes","formatExpression","exp","color","size","goal","requirements","r","expression","TileDetail","icon","ArrowLeftOutlined","GradeBar","bar_options","maintainAspectRatio","gridLines","scaleLabel","stacked","barPercentage","categoryPercentage","click","evt","element","_index","datadict","peergrade","pgrade","data_tiles","titles","peergrades","forEach","borderWidth","skipNull","createBarData","height","connector","connect","UserProfile","_isMounted","notifications","loadNotifications","DataMartController","login_id","nextProps","nextContext","settings","outperforming","n","status","closing","moreEffort","span","course_name","SettingOutlined","DesiredGrade","goalGrade","AppController","_","optionType","withAdminRole","UserSettings","updatingNotifications","toggleNotifications","offset","shape","BellTwoTone","twoToneColor","mapDispatch","loadPredictions","user","DataMartActions","dashboardColumns","visible","tileGroups","StudentDashboard","userSubmissions","displayTile","viewType","settings_view","setSettingsView","view","p_discussions","p_goals","TileController","total","sub","Number","all","flat","goals","catch","addEventListener","event","console","log","buttonStyle","BarChartOutlined","AppstoreOutlined","c","container_width","tg","column_id","group_id","x","includes","small","AdminDashboard","SmileOutlined","App","isAdmin","UserController","AdminHeader","studentPickView","setStudent","PerformanceNotifications","_getTileTitle","paddingLeft","students","isLoading","localeCompare","placeholder","isClearable","styles","control","provided","border","singleValue","float","SyncOutlined","renderInner","AdminController","doneLoading"],"sourceRoot":""}