{"version":3,"file":"static/js/787.8df90df9.chunk.js","mappings":"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","sources":["common/Admin/AdminMenu/index.tsx","common/Admin/index.tsx","containers/ManageTileGroups/index.tsx","components/DraggableTile/ActionButtons/index.tsx","components/DraggableTile/ContentType/index.tsx","components/DraggableTile/TileType/index.tsx","components/DraggableTile/index.tsx","components/managers/TileCreateEntries/ExternalDataManager/index.tsx","components/managers/TileCreateEntries/CreationPreview/index.tsx","components/managers/TileCreateEntries/AssignmentManager/helpers.tsx","components/managers/TileCreateEntries/AssignmentManager/QuizzesTutorial/index.tsx","components/managers/TileCreateEntries/AssignmentManager/index.tsx","components/managers/TileCreateEntries/DiscussionManager/helpers.tsx","components/managers/TileCreateEntries/DiscussionManager/index.tsx","components/managers/TileCreateEntries/LearningGoalsManager/GoalEntry/GoalRequirement/index.tsx","components/managers/TileCreateEntries/LearningGoalsManager/GoalEntry/index.tsx","components/managers/TileCreateEntries/LearningGoalsManager/index.tsx","components/managers/TileCreateEntries/index.tsx","common/Admin/sections/Tiles/TileWrapper/EditTileDragger/VisibilityButton/index.tsx","common/Admin/sections/Tiles/TileWrapper/EditTileDragger/index.tsx","common/Admin/sections/Tiles/TileWrapper/helpers.ts","common/Admin/sections/Tiles/TileWrapper/index.tsx","common/Admin/sections/Tiles/index.tsx"],"sourcesContent":["import React, { Component } from \"react\";\nimport {\n    AppstoreOutlined,\n    ControlOutlined,\n    CloudUploadOutlined,\n    // ClusterOutlined,\n    DotChartOutlined,\n    FundProjectionScreenOutlined,\n    LaptopOutlined,\n    TrophyOutlined,\n    NotificationOutlined,\n    DatabaseOutlined,\n    UserOutlined,\n    TeamOutlined\n} from \"@ant-design/icons\";\nimport { Menu } from \"antd\";\nimport { Link } from \"react-router-dom\";\nimport \"./style.scss\";\nimport { RootState } from \"../../../store\";\nimport { connect, ConnectedProps } from \"react-redux\";\n\nconst mapState = (state: RootState) => ({\n    user: state.user\n});\n\nconst connector = connect(mapState)\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\ntype Props = { menuKey: string } & PropsFromRedux;\n\nclass AdminMenu extends Component<Props> {\n\n    render(): React.ReactNode {\n        const { user } = this.props;\n\n        return (\n            <div id={\"adminMenu\"}>\n                <div id={\"user\"}>\n                    <h3>{user ? user.name : \"Loading profile...\"}</h3>\n                    <strong><UserOutlined /> Instructor</strong>\n                </div>\n\n                <Menu selectedKeys={[this.props.menuKey]}>\n                    <Menu.Item key={\"datamart\"} icon={<DatabaseOutlined />}>\n                        <Link to={'/admin'}>\n                            Datamart\n                        </Link>\n                    </Menu.Item>\n\n                    <Menu.Item key={\"tiles\"} icon={<AppstoreOutlined />}>\n                        <Link to={'/admin/tiles'}>\n                            Tiles\n                        </Link>\n                    </Menu.Item>\n\n                    <Menu.Item key={\"dashboard\"} icon={<LaptopOutlined />}>\n                        <Link to={'/admin/dashboard'}>\n                            Dashboard\n                        </Link>\n                    </Menu.Item>\n\n                    <Menu.Item key={\"studentOverview\"} icon={<TeamOutlined />}>\n                        <Link to={'/admin/student-overview'}>\n                            Student Overview\n                        </Link>\n                    </Menu.Item>\n                    <Menu.SubMenu key={\"submenu\"} icon={<TrophyOutlined />} title={\"Grades\"}>\n                        {/* TODO: completely remove oldpredictor from code */}\n                        {/* <Menu.Item key={\"gradePredictorOld\"} icon={<FundProjectionScreenOutlined />}>\n                            <Link to={'/admin/grade-predictor-old'}>\n                                Old Predictor\n                            </Link>\n                        </Menu.Item> */}\n                        <Menu.Item key={\"gradePredictor\"} icon={<FundProjectionScreenOutlined />}>\n                            <Link to={'/admin/grade-predictor'}>\n                                Predictor\n                            </Link>\n                        </Menu.Item>\n                        <Menu.Item key={\"gradeAnalyzer\"} icon={<DotChartOutlined />}>\n                            <Link to={'/admin/grade-analyzer'}>\n                                Analyzer\n                            </Link>\n                        </Menu.Item>\n                    </Menu.SubMenu>\n                    <Menu.Item key={\"dataWizard\"} icon={<CloudUploadOutlined />}>\n                        <Link to={'/admin/data-wizard'}>\n                            Data Wizard\n                        </Link>\n                    </Menu.Item>\n                    {/* <Menu.Item key={\"analytics\"} icon={<ClusterOutlined />}>\n                        <Link to={'/admin/analytics'}>\n                            Analytics\n                        </Link>\n                    </Menu.Item> */}\n                    <Menu.Item key={\"notificationCentre\"} icon={<NotificationOutlined />}>\n                        <Link to={'/admin/notification-centre'}>\n                            Notification Centre\n                        </Link>\n                    </Menu.Item>\n                    <Menu.Item key={\"settings\"} icon={<ControlOutlined />}>\n                        <Link to={'/admin/settings'}>\n                            Settings\n                        </Link>\n                    </Menu.Item>\n                </Menu>\n            </div>\n        )\n    }\n}\n\nexport default connector(AdminMenu);\n","import React, { Component } from \"react\";\nimport { withAdminRole } from \"../../hoc/withAdminRole\";\nimport AdminHeader from \"../../containers/AdminHeader\";\nimport { Redirect } from \"react-router-dom\";\nimport { Col, Row } from \"antd\";\nimport AdminMenu from \"./AdminMenu\";\nimport \"./style.scss\";\n\nclass Admin extends Component<any> {\n\n  render(): React.ReactNode {\n    const { isAdmin, menuKey } = this.props;\n    if (!isAdmin) return (<Redirect to={'/'} />);\n\n    return (\n      <div id={\"admin\"}>\n        <AdminHeader />\n        <Row>\n          <Col xs={4}>\n            <AdminMenu menuKey={menuKey} />\n          </Col>\n          <Col xs={20} id={'wrapper'} className={`${ menuKey !== \"settings\" && \"noOverflow\"}`}>\n            { this.props.children }\n          </Col>\n        </Row>\n      </div>\n    )\n  }\n}\n\nexport default withAdminRole(Admin);","import React, { Component } from \"react\";\nimport {Button, Drawer, Input, Space} from \"antd\";\nimport { PlusOutlined } from \"@ant-design/icons\";\nimport { IState } from \"./types\";\nimport {RootState} from \"../../store\";\nimport {TileActions} from \"../../store/actions/tiles\";\nimport \"./style.scss\";\nimport TileController from \"../../api/controllers/tile\";\nimport {connect, ConnectedProps} from \"react-redux\";\n\nconst mapState = (state: RootState) => ({\n  tileGroups: state.tileGroups,\n});\n\nconst mapDispatch = {\n  loadGroups: () => TileActions.loadGroups()\n}\n\nconst connector = connect(mapState, mapDispatch)\ntype PropsFromRedux = ConnectedProps<typeof connector>\n\nclass ManageTileGroups extends Component<PropsFromRedux, IState> {\n\n  state = {\n    text: \"\",\n    drawerOpen: false\n  }\n\n  render(): React.ReactNode {\n    return (\n      <div id={\"manageGroup\"}>\n        <Space direction={\"horizontal\"}>\n          <Button icon={<PlusOutlined />}\n                  className={\"successButton\"}\n                  onClick={() => this.setState({ drawerOpen: true })}\n          >\n            Group\n          </Button>\n        </Space>\n        <Drawer\n          width={400}\n          title={\"Create tile group\"}\n          placement={\"right\"}\n          closable={true}\n          onClose={() => this.setState({ drawerOpen: false })}\n          open={this.state.drawerOpen}\n          getContainer={false}\n          style={{ position: 'absolute' }}\n        >\n          <p>Provide a title for the group.</p>\n\n          <Space style={{width: \"100%\"}} direction={\"vertical\"}>\n            <Input placeholder={\"Title\"}\n                   value={this.state.text}\n                   onChange={e => this.setState({ text: e.target.value || \"\" })}\n            />\n\n            <Space direction={\"horizontal\"}>\n              <Button type={\"ghost\"}\n                      onClick={() => this.setState({ drawerOpen: false })}>\n                Cancel\n              </Button>\n              <Button className={\"successButton\"}\n                      onClick={() => {\n                        TileController.createTileGroup(\n                          this.state.text,\n                          this.props.tileGroups.length).then(() => {\n                            this.props.loadGroups().then(() => {\n                              this.setState({ drawerOpen: false, text: \"\" });\n                            });\n                        });\n                      }}>\n                Create\n              </Button>\n            </Space>\n          </Space>\n        </Drawer>\n      </div>\n    )\n  }\n}\n\nexport default connector(ManageTileGroups);","import React, { Component } from \"react\";\nimport {Dropdown, MenuProps, Spin} from \"antd\";\nimport { DeleteOutlined, EditOutlined } from \"@ant-design/icons\";\nimport { IProps, IState } from \"./types\";\nimport {RootState} from \"../../../store\";\nimport {ThunkDispatch} from \"redux-thunk\";\nimport {Tile} from \"../../../models/app/Tile\";\nimport {TileActions} from \"../../../store/actions/tiles\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport TileController from \"../../../api/controllers/tile\";\nimport Swal from \"sweetalert2\";\n\nconst mapState = (state: RootState) => ({\n  tiles: state.tiles,\n});\n\nconst mapDispatch = (dispatch: ThunkDispatch<any, any, any>): any => {\n  return {\n    updateTile: async (tile: Tile) => dispatch(await TileActions.updateTile(tile))\n  };\n};\n\nconst connector = connect(mapState, mapDispatch)\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\ntype Props = IProps & PropsFromRedux;\n\nclass ActionButtons extends Component<Props, IState> {\n\n  state = {\n    loading: false,\n    tile: null\n  }\n\n  handleMenuClick: MenuProps['onClick'] = (e) => {\n    switch(e.key) {\n      case \"1\":\n        this.props.editTile()\n        return;\n      case \"2\":\n        let tile: any = this.state.tile;\n        Swal.fire({\n          title: 'Do you really want to delete this tile?',\n          showCancelButton: true,\n          confirmButtonText: 'Delete',\n          confirmButtonColor: 'rgb(255, 110, 90)',\n          showLoaderOnConfirm: true,\n          allowOutsideClick: () => !Swal.isLoading()\n        }).then((result) => {\n          if (result.isConfirmed) {\n            this.props.deleteTile(tile!.id).then(() => [\n              Swal.fire('Task completed!', '', 'success')\n            ]);\n          }\n        })\n        return;\n    }\n  };\n\n  items: MenuProps['items'] = [\n    {\n      label: 'Edit',\n      key: '1',\n      icon: <EditOutlined />,\n    },\n    {\n      label: 'Delete',\n      key: '2',\n      icon: <DeleteOutlined />,\n      danger: true,\n    },\n  ];\n\n\n  componentDidMount(): void {\n    this.setState({ tile: this.props.tile });\n  }\n\n  render(): React.ReactNode {\n\n    let { tile, loading }: IState = this.state;\n\n    if (!tile) return null;\n    tile = tile as Tile;\n\n    return (\n      <div style={{float: 'right'}}>\n        <Dropdown.Button  menu={{items: this.items, onClick: this.handleMenuClick}}\n                          buttonsRender={([leftButton, rightButton]) => {\n                            let name = loading ? \"\" : (tile!.visible ? \"successButton\" : \"dangerButton\");\n                            return [\n                                React.cloneElement(leftButton as React.ReactElement<any, string>, {className: name }),\n                                rightButton\n                            ]\n                          }}\n                          onClick={() => {\n                            this.setState({ loading: true }, () => {\n                              let t = tile!;\n                              t.visible = !t.visible;\n                              TileController.updateTile(t).then(async newTile => {\n                                await (this.props as any).updateTile(newTile);\n                                this.setState({ tile: t, loading: false });\n                              });\n                              });\n                          }}\n        >\n          { loading ?\n            <Spin size={'small'} /> :\n            (tile!.visible ? \"Visible\" : \"Hidden\")\n          }\n        </Dropdown.Button>\n      </div>\n    );\n  }\n}\n\nexport default connector(ActionButtons);","import React, { Component } from \"react\";\nimport {TileContentTypes} from \"../../../models/app/Tile\";\nimport { FieldBinaryOutlined, AppstoreOutlined, StockOutlined, TrophyOutlined } from \"@ant-design/icons\";\nimport {Space} from \"antd\";\n\nexport default class ContentType extends Component<{ content: TileContentTypes}> {\n\n  getName = () => {\n    switch (this.props.content) {\n      case \"BINARY\":\n        return \"Binary\";\n      case \"ENTRIES\":\n        return \"Entries\";\n      case \"LEARNING_OUTCOMES\":\n        return \"Learning Outcomes\";\n      case \"PREDICTION\":\n        return \"Prediction\";\n    }\n  }\n\n  getIcon = () => {\n    switch(this.props.content) {\n      case \"BINARY\":\n        return <FieldBinaryOutlined />;\n      case \"ENTRIES\":\n        return <AppstoreOutlined />;\n      case \"PREDICTION\":\n        return <StockOutlined />;\n      case \"LEARNING_OUTCOMES\":\n        return <TrophyOutlined />;\n    }\n  }\n\n  render(): React.ReactNode {\n    return (\n      <div id={\"contentType\"}>\n        <Space direction={\"horizontal\"} style={{ width: '100%'}}>\n          { this.getIcon() }\n          <span><b>{ this.getName() }</b></span>\n        </Space>\n      </div>\n    )\n  }\n}","import React, { Component } from \"react\";\nimport {TileTypeTypes} from \"../../../models/app/Tile\";\n\nexport default class TileType extends Component<{ type: TileTypeTypes }> {\n\n  getName = () => {\n    switch (this.props.type) {\n      case \"ASSIGNMENTS\":\n        return \"Assignments\";\n      case \"DISCUSSIONS\":\n        return \"Discussions\";\n      case \"EXTERNAL_DATA\":\n        return \"External Data\";\n      default:\n        return \"N/A\";\n    }\n  }\n\n  render(): React.ReactNode {\n    return (\n      <div id={\"tileType\"}>\n        <span><b>{ this.getName() }</b></span>\n      </div>\n    )\n  }\n}","import React, { Component } from \"react\";\nimport {IProps, IState} from \"./types\";\nimport ActionButtons from \"./ActionButtons\";\nimport {Row, Col, Divider, Tag, Tooltip, Button} from \"antd\";\nimport {BellTwoTone} from \"@ant-design/icons\";\nimport ContentType from \"./ContentType\";\nimport TileType from \"./TileType\";\nimport TileController from \"../../api/controllers/tile\";\nimport {Draggable} from \"react-smooth-dnd\";\nimport \"./style.scss\";\nimport {RootState} from \"../../store\";\nimport {TileActions} from \"../../store/actions/tiles\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport {Tile} from \"../../models/app/Tile\";\nimport {ThunkDispatch} from \"redux-thunk\";\n\nconst mapState = (state: RootState) => ({\n  tiles: state.tiles,\n  tileEntries: state.tileEntries\n});\n\nconst mapDispatch = ( dispatch: ThunkDispatch<any, any, any> ): any => {\n  return {\n    updateTile: async (tile: Tile) => dispatch(await TileActions.updateTile(tile))\n    //signIn: (credentials: LoginCredentials) => dispatch(signIn(credentials))\n  };\n};\n\nconst connector = connect(mapState, mapDispatch)\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\ntype Props = IProps & PropsFromRedux;\n\nclass DraggableTile extends Component<Props, IState> {\n\n  state = {\n    tile: null,\n    entriesLoaded: false,\n    entries: [],\n    updatingNotifications: []\n  }\n\n  componentDidMount(): void {\n    this.setState({tile: this.props.tile});\n    TileController.getTileEntries(this.props.tile.id).then(entries => {\n      this.setState({ entries, entriesLoaded: true });\n    });\n  }\n\n  componentDidUpdate(prevProps: Readonly<IProps>, prevState: Readonly<{}>, snapshot?: any): void {\n    let { tile }: IState = this.state;\n\n    if (tile !== undefined) return;\n\n    tile = tile as Tile;\n\n    if (prevProps.tile.id !== tile!.id) {\n      TileController.getTileEntries(tile!.id).then(entries => {\n        this.setState({ entries, entriesLoaded: true });\n      });\n    }\n  }\n\n  toggleNotifications = async (tile: Tile) => {\n    const { updatingNotifications }: IState = this.state;\n    this.setState({ updatingNotifications: [...updatingNotifications, tile.id]}, () => {\n      tile.notifications = !tile.notifications;\n      TileController.updateTile(tile).then(async t => {\n        (this.props as any).updateTile(t);\n        this.setState({\n          updatingNotifications: updatingNotifications\n            .filter(x => x !== tile.id),\n          tile: t\n        });\n      })\n    });\n  }\n\n  render(): React.ReactNode {\n    let { tile, entriesLoaded, entries, updatingNotifications }: IState = this.state;\n\n    if (!tile) return null;\n    tile = tile as Tile;\n\n    return (\n      <Draggable key={'dragTile' + tile!.id.toString()} className={\"tile\"}>\n        <div>\n          <div className={\"padded\"}>\n            <ActionButtons {...{tile, editTile: this.props.editTile, deleteTile: this.props.deleteTile}} />\n            <h3>{ tile!.title }</h3>\n            <Row gutter={10} style={{ marginTop: 20 }}>\n              <Col xs={12}>\n                <span>Content type</span>\n                <ContentType content={tile!.content} />\n              </Col>\n\n              <Col xs={12} style={{ textAlign: 'right' }}>\n                <span>Tile type</span>\n                <TileType type={tile!.type} />\n              </Col>\n\n              <Col xs={24} style={{ margin: \"20px 0\" }}>\n                <Divider />\n              </Col>\n\n              <Col xs={18}>\n                <div>\n                  { entriesLoaded ?\n                    <span>\n                      <Tag key={'tileTag' + tile!.id.toString()}>\n                        { entries.length }\n                      </Tag>\n                      children\n                    </span> :\n                    <span>Loading entries...</span>\n                  }\n                </div>\n              </Col>\n\n              <Col xs={6}>\n                <Tooltip key={`tooltipTile#${tile!.id}`}\n                         title={<span>Notifications are turned <strong>{ tile!.notifications ? \"on\" : \"off\"}</strong>.</span>}>\n                  <Button type={\"ghost\"}\n                          key={`toggleNotificationsTile#${tile!.id}`}\n                          loading={updatingNotifications.includes(tile!.id)}\n                          style={{ float: 'right' }}\n                          shape=\"circle\"\n                          icon={<BellTwoTone twoToneColor={tile!.notifications ? \"rgb(0, 185, 120)\" : \"rgb(255, 110, 90)\"} />}\n                          onClick={() => this.toggleNotifications(tile as Tile)}\n                  />\n                </Tooltip>\n              </Col>\n            </Row>\n          </div>\n        </div>\n      </Draggable>\n    );\n  }\n}\n\nexport default connector(DraggableTile);","import React, { Component } from 'react';\nimport {Link} from \"react-router-dom\";\nimport \"./style.scss\";\n\nexport default class ExternalDataManager extends Component {\n  render(): React.ReactNode {\n    return (\n      <div id={\"externalDataManager\"}>\n        <h2>Tiles of type external data need no further configuration.</h2>\n        <span>Data can be uploaded via the <Link to={'/admin/data-wizard'}>Data Wizard</Link>!</span>\n        <div id={\"illustration\"} />\n      </div>\n    );\n  }\n}","import React, { Component } from \"react\";\nimport {Col, Row} from \"antd\";\nimport FadeIn from \"react-fade-in\";\nimport {TileContentTypes} from \"../../../../models/app/Tile\";\n\nexport default class CreationPreview extends Component<{ contentType: TileContentTypes }> {\n\n  getTitle = () => {\n    switch (this.props.contentType) {\n      case \"BINARY\":\n        return \"Binary tiles\";\n      case \"ENTRIES\":\n        return \"Entries\";\n      default:\n          return \"\";\n    }\n  }\n\n  getDescription = () => {\n    switch (this.props.contentType) {\n      case \"BINARY\":\n        return \"Binary tiles project data whose unit can take on only two possible states, given by a grade of 0 and 1.\";\n      case \"ENTRIES\":\n        return \"The entries content type is most suitable for tiles containing gradable components\";\n      default:\n        return \"\";\n    }\n  }\n\n  render(): React.ReactNode {\n    const { contentType } = this.props;\n\n    console.log(\"RENDER\", contentType);\n    if (!contentType) {\n      return <span>error?</span>;\n    }\n\n    ////<div id={\"mockRender\"} className={contentType.toLowerCase()} />\n\n    return (\n      <div id={\"preview\"}>\n        <Row gutter={[10, 10]}>\n          <Col xs={24} md={8}>\n            <FadeIn>\n              <div id={\"mockRender\"} className={contentType ? contentType.toLowerCase() : \"\"} />\n            </FadeIn>\n          </Col>\n          <Col xs={24} md={16} id={\"description\"}>\n            <div id={\"descriptionWrapper\"}>\n              <h2>{ this.getTitle() }</h2>\n              <span>{ this.getDescription() }</span>\n            </div>\n          </Col>\n        </Row>\n      </div>\n    )\n  }\n}","import React from \"react\";\nimport {CloseCircleOutlined, CheckCircleOutlined} from \"@ant-design/icons\";\nimport {Button} from \"antd\";\nimport { DeleteOutlined } from \"@ant-design/icons\";\nimport {TileEntry} from \"../../../../models/app/Tile\";\nimport {CanvasAssignment} from \"../../../../models/canvas/Assignment\";\n\nexport const getColumns = (\n  removeAssignment: (entry: TileEntry) => any,\n  canvasAssignments: CanvasAssignment[]) => {\n  return [\n    {\n      title: 'Name',\n      dataIndex: 'title',\n      key: 'title',\n    }, {\n      title: 'On Canvas',\n      dataIndex: 'onCanvas',\n      key: 'onCanvas',\n      render: (text: string, obj: TileEntry) => {\n        const assignment = canvasAssignments.find(c => c.title === obj.title);\n        return assignment !== undefined ?\n          <span className={\"binary success\"}><CheckCircleOutlined /> Yes</span> :\n          <span className={\"binary fail\"}><CloseCircleOutlined /> <b>No</b></span>\n      }\n    }, {\n      title: 'Published',\n      dataIndex: 'published',\n      key: 'published',\n      render: (text: string, obj: TileEntry) => {\n        const assignment = canvasAssignments.find(c => c.title === obj.title);\n        return (assignment && assignment.published) ?\n          <div className={\"binary success\"}><CheckCircleOutlined /> <span>Yes</span></div> :\n          <div className={\"binary fail\"}><CloseCircleOutlined /> <span>No</span></div>\n      }\n    }, {\n      title: 'Action',\n      dataIndex: 'action',\n      key: 'action',\n      render: (_: string, obj: TileEntry) => {\n        return (\n          <Button danger\n                  icon={<DeleteOutlined />}\n                  shape={\"round\"}\n                  type={\"primary\"}\n                  size={\"large\"}\n                  onClick={() => removeAssignment(obj)}\n          />\n        )\n      }\n    }\n  ]\n}","import React, { Component } from \"react\";\nimport {Button, Col, Divider, Modal, Row} from \"antd\";\n\nexport default class QuizzesTutorial extends Component<{ open: boolean, setOpen: (val: boolean) => any }> {\n  render(): React.ReactNode {\n    return (\n      <Modal\n        title={\"Response Canvas quizzes\"}\n        centered\n        closable={true}\n        visible={this.props.open}\n        width={'90%'}\n        onCancel={() => this.props.setOpen(false)}\n        footer={\n          <div>\n            <Button onClick={() => this.props.setOpen(false)}>\n              Close\n            </Button>\n          </div>\n        }\n      >\n        <Row gutter={[10, 10]}>\n          <Col xs={24} md={8}>\n            <h2>Create a quiz</h2>\n            <p>The responsive setup of the quizzes is reliant on a varying points-per-question. This functionality is only available in the \"New Quizzes\" Quiz Engine. Select the \"New Quizzes\" and hit \"Submit\".</p>\n          </Col>\n\n          <Col xs={24} md={16} style={{textAlign: 'center'}}>\n            <img src={'/assets/img/tutorial/quiz-create.jpg'} style={{height: '100%', maxHeight: 400}} alt={''} />\n          </Col>\n\n          <Col xs={24}><Divider /></Col>\n\n          <Col xs={24}>\n            <h2>Quiz details</h2>\n            <p>When you select the Quiz Engine the assignment details must be provided. Be sure to tick the box in front of <i>\"Do not count this assignment towards the final grade\"</i>. When all details are in-place hit the \"Build\" button.</p>\n          </Col>\n\n          <Col xs={24}><Divider /></Col>\n\n          <Col xs={24} md={8}>\n            <h2>Specifying the question type</h2>\n            <p>To add a question to the quiz click the plus-button placed under the instructions field. You will be asked which type of question you want to add. Choose the \"Multiple choice\" question type.</p>\n          </Col>\n\n          <Col xs={24} md={16} style={{textAlign: 'center'}}>\n            <img src={'/assets/img/tutorial/quiz-add-question.jpg'} style={{height: '100%', maxHeight: 300}} alt={''}/>\n          </Col>\n\n          <Col xs={24}><Divider /></Col>\n\n          <Col xs={24} md={8}>\n            <h2>Formulating the question</h2>\n            <p>When you specify the question type you are able to formulate the question. In the right-side figure an example formulation is shown asking the student to specify the time spend on an assignment. Other use-cases may be to poll the reading times on class exercises. Be sure to tick the <i>\"Varying points by answer\"</i> checkbox. Create as many options as you wish and use the assigned points as a measurement of the student's answer. In the example students are rewarded points equivalent to the maximum time of the answer in minutes. Be consistent with the time unit used for the assigned points.</p>\n          </Col>\n\n          <Col xs={24} md={16} style={{textAlign: 'center'}}>\n            <img src={'/assets/img/tutorial/quiz-question.jpg'} style={{height: '100%', maxHeight: 320}} alt={''}/>\n          </Col>\n\n          <Col xs={24}><Divider /></Col>\n\n          <Col xs={24} md={8}>\n            <h2>Quiz Settings</h2>\n            <p>Lastly we wish to hide the obtained points from the students. To do this navigate to the \"Settings\" tab and enable the \"Restrict result view\". Uncheck the box where students are shown their rewarded points.</p>\n          </Col>\n\n          <Col xs={24} md={16} style={{textAlign: 'center'}}>\n            <img src={'/assets/img/tutorial/quiz-settings.jpg'} style={{height: '100%', maxHeight: 320}} alt={''}/>\n          </Col>\n\n          <Col xs={24}><Divider /></Col>\n\n          <Col xs={24}>\n            <h2>We're done!</h2>\n            <p>That's it, students should now be able to take the quiz and IguideME is able to extract the rewarded points per student.</p>\n          </Col>\n        </Row>\n      </Modal>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport {IProps, IState} from \"./types\";\nimport CreatableSelect from 'react-select/creatable';\nimport {Space, Table, Switch, Divider, Alert} from \"antd\";\nimport {QuestionOutlined} from \"@ant-design/icons\";\nimport {getColumns} from \"./helpers\";\nimport QuizzesTutorial from \"./QuizzesTutorial\";\nimport {IManagerProps} from \"../types\";\nimport \"./style.scss\";\nimport {editState, TileEntry} from \"../../../../models/app/Tile\";\n\ntype Props = IManagerProps & IProps;\n\nexport default class AssignmentManager extends Component<Props, IState> {\n\n  state = {\n    tutorialOpen: false,\n  }\n\n  addAssignment = (name: string) => {\n    const { canvasAssignments, tile }: Props = this.props;\n    const assignment = canvasAssignments.find(a => a.title === name);\n\n    const entry: TileEntry = {\n      id: -1,\n      state: editState.new,\n      tile_id: tile ? tile.id : -1,\n      title: !assignment ? name : assignment.title,\n      type: \"ASSIGNMENT\"\n    };\n\n    this.props.addEntry(entry);\n  }\n\n  render(): React.ReactNode {\n    const { activeAssignments, canvasAssignments }: Props = this.props;\n    console.log(\"activeAssignments\", activeAssignments);\n    console.log(\"canvasAssignments\", canvasAssignments);\n\n    return (\n      <div id={\"assignmentManager\"}>\n        <h2>Select assignments.</h2>\n        <Divider />\n\n        <Space direction={\"vertical\"} style={{width: '100%'}}>\n          <QuizzesTutorial open={this.state.tutorialOpen} setOpen={(val) => this.setState({ tutorialOpen: val })} />\n          <span>\n            <Switch checked={this.props.graphView}\n                    onChange={(val) => this.props.setGraphView(val)}\n                    style={{zIndex: 0}}\n            />\n              &nbsp;\n              <b>Enable graph view. </b>If enabled entries will be visualized using a graph instead of the tiles.\n          </span>\n\n          <Alert message={\n            <span>\n              <QuestionOutlined />\n              &nbsp;\n              <button onClick={() => this.setState({ tutorialOpen: true })} style={{background: \"none\", border: \"none\", padding: \"0!important\", cursor: 'pointer', color: '#069', textDecoration: 'underline'}}>\n                  Create responsive quizzes.\n                </button>\n              {' '}\n              Responsive quizzes are like surveys which can be used to poll the time spent on an assignment.\n            </span>\n          } type=\"info\" />\n\n          <div id={\"assignmentRegistry\"}>\n            <Table columns={getColumns(this.props.removeEntry, canvasAssignments)}\n                   pagination={false}\n                   dataSource={activeAssignments} //.sort((a, b) => a.position - b.position)\n            />\n          </div>\n\n          <div>\n            <CreatableSelect\n              options={canvasAssignments\n                .filter(a => !activeAssignments.map(x => x.title).includes(a.title) )\n                .map(a => ({ label: a.title, value: a.id }))}\n              onCreateOption={(name: string) => this.addAssignment(name)}\n              onChange={(e) => this.addAssignment(e!.label.toString())}\n              value={null}\n            />\n          </div>\n        </Space>\n      </div>\n    );\n  }\n}","import {Button} from \"antd\";\nimport { DeleteOutlined, CheckCircleOutlined, CloseCircleOutlined } from \"@ant-design/icons\";\nimport React from \"react\";\nimport {TileEntry} from \"../../../../models/app/Tile\";\nimport {CanvasDiscussion} from \"../../../../models/canvas/Discussion\";\n\nexport const getColumns = (\n  removeDiscussion: (entry: TileEntry) => any,\n  canvasDiscussions: CanvasDiscussion[]\n) => {\n  return [\n    {\n      title: 'Title',\n      dataIndex: 'title',\n      key: 'title',\n    }, {\n      title: 'On Canvas',\n      dataIndex: 'onCanvas',\n      key: 'onCanvas',\n      render: (text: string, obj: TileEntry) => {\n        const discussion = canvasDiscussions.find(d => d.title === obj.title);\n        return discussion !== undefined ?\n          <span className={\"binary success\"}><CheckCircleOutlined /> Yes</span> :\n          <span className={\"binary fail\"}><CloseCircleOutlined /> <b>No</b></span>\n      }\n    }, {\n      title: 'Posted by',\n      dataIndex: 'posted_by',\n      key: 'posted_by',\n      render: (text: string, obj: TileEntry) => {\n        const discussion = canvasDiscussions.find(d => d.title === obj.title);\n        return discussion ? discussion.posted_by : \"n/a\"\n      }\n    }, {\n      title: 'Posted at',\n      dataIndex: 'posted_at',\n      key: 'posted_at',\n      render: (text: string, obj: TileEntry) => {\n        const discussion = canvasDiscussions.find(d => d.title === obj.title);\n        return discussion ? discussion.posted_at : \"n/a\"\n      }\n    }, {\n      title: 'Action',\n      dataIndex: 'action',\n      key: 'action',\n      render: (_: string, obj: TileEntry) => {\n        return (\n          <Button danger\n            icon={<DeleteOutlined />}\n            shape={\"round\"}\n            type={\"primary\"}\n            size={\"large\"}\n            onClick={() => removeDiscussion(obj)}\n          />\n      )\n      }\n    }\n  ]\n}","import React, { Component } from \"react\";\nimport {Divider, Switch, Table} from \"antd\";\nimport {getColumns} from \"./helpers\";\nimport CreatableSelect from \"react-select/creatable\";\nimport FadeIn from \"react-fade-in\";\nimport {IManagerProps} from \"../types\";\nimport {IProps} from \"./types\";\nimport {editState, TileEntry} from \"../../../../models/app/Tile\";\n\ntype Props = IManagerProps & IProps;\n\nclass DiscussionManager extends Component<Props> {\n\n\n  addDiscussion = (title: string) => {\n    const { canvasDiscussions, tile }: Props = this.props;\n    const assignment = canvasDiscussions.find(d => d.title === title);\n\n    const entry: TileEntry = {\n      id: -1,\n      state: editState.new,\n      tile_id: tile ? tile.id : -1,\n      title: !assignment ? title : assignment.title,\n      type: \"DISCUSSION\"\n    }\n\n    this.props.addEntry(entry);\n  }\n\n  render(): React.ReactNode {\n    const { activeDiscussions, canvasDiscussions, wildcard } = this.props;\n\n    return (\n      <div id={\"discussionManager\"}>\n        <h2>Configure discussion metric.</h2>\n        <Divider />\n        <span>\n          <Switch checked={wildcard}\n                  onChange={(val) => {\n                    this.props.setWildcard(val)\n                  }}\n                  style={{zIndex: 0}}\n          />\n          &nbsp;\n          <strong>Count all user posts.</strong> When enabled all posted submissions will be extracted for all students. If you wish to count the replies to a certain post uncheck this functionality and specify the posts you wish to track the replies of.\n        </span>\n\n        { !wildcard &&\n          <FadeIn>\n            <div id={\"assignmentRegistry\"}>\n              <Table columns={getColumns(this.props.removeEntry, canvasDiscussions)}\n                     pagination={false}\n                     dataSource={activeDiscussions}\n              />\n            </div>\n\n            <div>\n              <CreatableSelect\n                options={canvasDiscussions\n                  .filter(a => !activeDiscussions.map(x => x.title).includes(a.title) )\n                  .map(a => ({ label: a.title, value: a.id }))}\n                onCreateOption={(title: string) => this.addDiscussion(title)}\n                onChange={(e) => this.addDiscussion(e!.label.toString())}\n                value={null}\n              />\n            </div>\n          </FadeIn>\n        }\n      </div>\n    )\n  }\n}\n\nexport default DiscussionManager;","import React, { Component } from \"react\";\nimport {Button, Col, InputNumber, Row} from \"antd\";\nimport {DeleteOutlined} from \"@ant-design/icons\";\nimport Select from \"react-select\";\nimport {IProps} from \"./types\";\nimport Swal from \"sweetalert2\";\nimport {RootState} from \"../../../../../../store\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport TileController from \"../../../../../../api/controllers/tile\";\nimport \"./style.scss\";\nimport { editState } from \"../../../../../../models/app/Tile\";\n\nconst mapState = (state: RootState) => ({\n  tiles: state.tiles,\n  tileEntries: state.tileEntries\n});\n\nconst connector = connect(mapState)\ntype PropsFromRedux = ConnectedProps<typeof connector>\ntype Props = IProps & PropsFromRedux;\n\nclass GoalRequirement extends Component<Props> {\n\n  state = {\n    loading: false,\n    metaKeys: []\n  }\n\n  componentDidMount(): void {\n    const { requirement } = this.props;\n    if (requirement.entry_id !== -1 && requirement.entry_id !== null) {\n      this.loadMetaKeys(requirement.entry_id as number);\n    }\n  }\n\n  componentWillReceiveProps(nextProps: Readonly<Props>, nextContext: any): void {\n    if (nextProps.requirement.entry_id !== this.props.requirement.entry_id &&\n        !isNaN(nextProps.requirement.entry_id as number)) {\n      this.loadMetaKeys(nextProps.requirement.entry_id as number);\n    }\n\n    if (nextProps.requirement.entry_id === -1) {\n      this.setState({\n        loading: false, metaKeys: []\n      });\n    }\n  }\n\n  loadMetaKeys = (id: number) => {\n    this.setState({ loading: true }, () => {\n      TileController.getTileEntriesMetaKeys(id).then(metaKeys => {\n        this.setState({\n          loading: false, metaKeys\n        });\n      });\n    });\n  }\n\n  getExpressionLabel = (expression: string | null) => {\n    switch (expression) {\n      case \"lte\": return \"≤ (less than)\";\n      case \"gte\": return \"≥ (greater than)\";\n      case \"e\": return \"= (equal to)\";\n      default: return \"\";\n    }\n  }\n\n  getMetaKeyLabel = (key: string) => {\n    switch (key) {\n      case \"grade\": return \"Grade (default)\";\n      default: return key;\n    }\n  }\n\n  render(): React.ReactNode {\n    let { requirement, tiles, tileEntries } = this.props;\n\n    let entryOptions: {label: string, value: number | string }[] = tileEntries\n      .filter(e => e.tile_id === requirement.tile_id)\n      .map(e => ({ label: e.title, value: e.id }));\n\n    const targetTile = tiles.find(t => t.id === requirement.tile_id);\n    if (targetTile && targetTile.content === \"BINARY\") {\n      entryOptions = [\n        { value: 'count', label: 'COUNT (success)' },\n        ...entryOptions\n      ];\n    }\n\n    if (requirement.state === editState.removed) {\n      return null;\n    }\n\n    return (\n      <div className={\"goalRequirement\"}>\n        <Row gutter={[10, 10]}>\n          <Col xs={3} md={2}>\n            <Button shape={\"circle\"}\n                    danger\n                    onClick={() => {\n                      Swal.fire({\n                        icon: 'warning',\n                        title: 'Do you really want to delete this requirement?',\n                        showCancelButton: true,\n                        confirmButtonText: 'Delete',\n                        showLoaderOnConfirm: true,\n                        allowOutsideClick: true\n                      }).then((result) => {\n                        if (result.isConfirmed) {\n                          requirement.state = editState.removed;\n                          this.props.updateRequirement(requirement);\n                          this.setState({requirement});\n                        }\n                      });\n                    }}\n                    icon={<DeleteOutlined />}/>\n          </Col>\n          <Col xs={21} md={8}>\n            Tile\n            <Select value={{\n                      value: requirement.tile_id,\n                      label: tiles.find(t => t.id === requirement.tile_id)?.title || \"Choose tile\"\n                    }}\n                    options={tiles.map(t => ({ value: t.id, label: t.title }))}\n                    onChange={(e) => {\n                      if (!e) return;\n\n                      requirement.tile_id = e.value;\n                      requirement.entry_id = -1;\n                      this.props.updateRequirement(requirement);\n                      this.setState({requirement});\n                    }}\n            />\n          </Col>\n          <Col xs={24} md={8}>\n            Entry\n            <Select value={{\n                      value: requirement.entry_id,\n                      label: requirement.entry_id === \"count\" ?\n                        \"COUNT (success)\" :\n                        (tileEntries.find(e => e.id === requirement.entry_id)?.title || \"Choose entry\")\n                    }}\n                    isDisabled={requirement.tile_id === -1}\n                    onChange={(e) => {\n                      if (!e) return;\n\n                      requirement.entry_id = e.value;\n                      this.props.updateRequirement(requirement);\n                      this.setState({requirement});\n\n                    }}\n                    options={entryOptions} />\n            <br />\n            Meta\n            <Select isLoading={this.state.loading}\n                    value={{ value: requirement.meta_key || \"\", label: this.getMetaKeyLabel(requirement.meta_key || \"\") }}\n                    onChange={e => {\n                      if (!e) return;\n                      requirement.meta_key = e.value;\n                      this.props.updateRequirement(requirement);\n                      this.setState({requirement});\n                    }}\n                    isDisabled={requirement.entry_id === -1 || requirement.entry_id === \"count\"}\n                    options={[\n                      { value: 'grade', label: 'Grade (default)' },\n                      ...this.state.metaKeys.map(k => ({\n                        value: k, label: k\n                      }))\n                    ]} />\n          </Col>\n          <Col xs={24} md={3}>\n            Expression\n            <Select isDisabled={requirement.entry_id === -1}\n                    value={requirement.expression ? { label: this.getExpressionLabel(requirement.expression), value: requirement.expression } : undefined}\n                    onChange={e => {\n                      if (!e) return;\n\n                      requirement.expression = e.value;\n                      this.props.updateRequirement(requirement);\n                      this.setState({requirement});\n                    }}\n                    options={[\n                      { value: 'lte', label: '≤ (less than)' },\n                      { value: 'e', label: '= (equal to)' },\n                      { value: 'gte', label: '≥ (greater than)' }\n                    ]}\n            />\n          </Col>\n          <Col xs={24} md={3}>\n            <br />\n            <InputNumber step={.5}\n                         size={\"large\"}\n                         disabled={requirement.expression === null}\n                         value={requirement.value}\n                         onChange={value => {\n                          requirement.value = Number(value);\n                          this.props.updateRequirement(requirement);\n                          this.setState({requirement});\n                        }}\n            />\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default connector(GoalRequirement);","import React, { Component } from \"react\";\nimport {Alert, Button, Divider, Input, Space} from \"antd\";\nimport {DeleteOutlined, PlusOutlined} from \"@ant-design/icons\";\nimport GoalRequirement from \"./GoalRequirement\";\nimport {GoalRequirement as GoalRequirementModel} from \"../../../../../models/app/LearningGoal\";\nimport {editState} from \"../../../../../models/app/Tile\";\nimport {IProps} from \"./types\";\nimport {LearningGoal} from \"../../../../../models/app/LearningGoal\";\nimport Swal from \"sweetalert2\";\nimport \"./style.scss\";\n\nexport default class GoalEntry extends Component<IProps> {\n\n  componentDidMount(): void {\n    this._initialize(this.props.goal);\n  }\n\n  componentWillReceiveProps(nextProps: Readonly<IProps>, nextContext: any): void {\n    this._initialize(nextProps.goal);\n  }\n\n  _initialize = (goal: LearningGoal) => {\n    this.setState({ goal });\n  }\n\n  addNewRequirement = () => {\n    const {goal, tile} = this.props;\n    goal.requirements = [{\n      id: -1,\n      state: editState.new,\n      expression: null,\n      goal_id: goal.id,\n      tile_id: tile ? tile.id : -1,\n      entry_id: -1,\n      meta_key: \"grade\",\n      value: 0\n    }, ...goal.requirements];\n    this.props.updateGoal(goal);\n  }\n\n  updateRequirement = (requirement: GoalRequirementModel) => {\n    if ((requirement.state !== editState.new) && (requirement.state !== editState.removed)) {\n      requirement.state = editState.updated;\n    }\n    this.props.updateGoal(this.props.goal);\n    this.setState({goal: this.props.goal});\n  }\n\n  render(): React.ReactNode {\n    let goal = this.props.goal;\n\n    if (goal.state === editState.removed) {\n      return null;\n    }\n\n    return (\n      <div className={\"goalEntry\"} >\n        <div className={\"title\"}>\n          <span><b>Title</b></span>\n          <Input value={goal.title}\n                 size={\"large\"}\n                 onChange={e => {\n                   goal.title = e.target.value;\n                   this.props.updateGoal(goal);\n                 }}\n          />\n        </div>\n\n        <div className={\"actions\"}>\n          <Space direction={\"horizontal\"}>\n            <Button shape={\"round\"}\n                    danger\n                    onClick={() => {\n                      Swal.fire({\n                        icon: 'warning',\n                        title: 'Do you really want to delete this goal?',\n                        text: `Goal: ${goal.title} will be deleted on save`,\n                        showCancelButton: true,\n                        confirmButtonText: 'Delete',\n                        showLoaderOnConfirm: true,\n                        allowOutsideClick: true\n                      }).then((result) => {\n                        if (result.isConfirmed) {\n                          goal.state = editState.removed;\n                          this.setState({goal});\n                        }\n                      });\n                    }}\n                    icon={<DeleteOutlined />}>\n              Delete goal\n            </Button>\n\n            <Button shape={\"round\"}\n                    onClick={this.addNewRequirement}\n                    icon={<PlusOutlined />}>\n              Requirement\n            </Button>\n          </Space>\n        </div>\n\n        <Divider />\n        <span><b>Requirements</b></span>\n\n        { goal.requirements.map(r => {\n          return (\n            <GoalRequirement updateRequirement={this.updateRequirement}\n                             requirement={r} />\n          );\n        })}\n\n        { goal.requirements.length === 0 &&\n          <Alert message=\"Goal doesn't have a requirement\" type=\"warning\" showIcon />\n        }\n      </div>\n    );\n  }\n}","import React, { Component } from \"react\";\nimport {Button, Divider} from \"antd\";\nimport {PlusOutlined} from \"@ant-design/icons\";\nimport GoalEntry from \"./GoalEntry\";\nimport {IProps, IState} from \"./types\";\nimport {LearningGoal} from \"../../../../models/app/LearningGoal\";\nimport { editState } from \"../../../../models/app/Tile\";\n\nexport default class LearningGoalsManager extends Component<IProps, IState> {\n\n  addNewGoal = () => {\n    const { tile, goals } = this.props;\n\n    this.props.setGoals([\n      { id: -1,\n        state: editState.new,\n        tile_id: tile ? tile.id : -1,\n        title: \"\",\n        requirements: []\n      },\n      ...goals\n    ]);\n  }\n\n  updateGoal = (goal: LearningGoal) => {\n    if ((goal.state !== editState.new) && (goal.state !== editState.removed)) {\n      goal.state = editState.updated;\n    }\n    this.props.setGoals(this.props.goals);\n  }\n\n  render(): React.ReactNode {\n    const { tile, goals } = this.props;\n\n    return (\n      <div id={\"learningGoalsManager\"}>\n        <h2>Construct learning goals.</h2>\n        <Button shape={\"round\"}\n                icon={<PlusOutlined />}\n                onClick={this.addNewGoal}\n        >\n          Goal\n        </Button>\n        <Divider />\n\n        { goals.map(goal => {\n          return (\n            <GoalEntry tile={tile}\n                       goal={goal}\n                       updateGoal={this.updateGoal}\n            />\n          )\n        })}\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport {IProps, IState} from \"./types\";\nimport ExternalDataManager from \"./ExternalDataManager\";\nimport CreationPreview from \"./CreationPreview\";\nimport AssignmentManager from \"./AssignmentManager\";\nimport TileController from \"../../../api/controllers/tile\";\nimport {Tile, TileEntry} from \"../../../models/app/Tile\";\nimport {RootState} from \"../../../store\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport Loading from \"../../utils/Loading\";\nimport DiscussionManager from \"./DiscussionManager\";\nimport {message} from \"antd\";\nimport LearningGoalsManager from \"./LearningGoalsManager\";\nimport \"./style.scss\";\nimport { discussionType } from '../../../models/canvas/Discussion';\n\nconst mapState = (state: RootState) => ({\n  assignments: state.assignments,\n  discussions: state.discussions\n});\n\nconst connector = connect(mapState)\ntype PropsFromRedux = ConnectedProps<typeof connector>\ntype Props = IProps & PropsFromRedux;\n\nclass TileCreateEntries extends Component<Props, IState> {\n\n  state = {\n    activeGoals: [],\n    activeEntries: [],\n    loading: false\n  }\n\n  componentDidMount(): void {\n    if (this.props.tile) {\n      this.setState({loading: true}, () => {\n        this._initializeTile(this.props.tile!);\n      });\n    }\n  }\n\n  componentWillReceiveProps(nextProps: Readonly<Props>, nextContext: any): void {\n    if (\n          (nextProps.tile?.id !== this.props.tile?.id) ||\n          (nextProps.contentType !== this.props.contentType) ||\n          (nextProps.tileType !== this.props.tileType)\n        ) {\n      if (nextProps.tile) this._initializeTile(nextProps.tile);\n      else this.setState({ activeEntries: [], activeGoals: [] });\n    }\n  }\n\n  _initializeTile = (tile: Tile) => {\n    if (tile.content === \"LEARNING_OUTCOMES\") {\n      TileController.getTileGoals(tile.id).then(goals => {\n        this.setState({ activeGoals: goals, loading: false }, () => {\n          this.props.updateGoals(goals);\n        });\n      });\n    } else {\n      TileController.getTileEntries(tile.id).then(entries => {\n        this.setState({ activeEntries: entries, loading: false }, () => {\n          this.props.updateEntries(entries);\n        });\n      });\n    }\n  }\n\n  addEntry = (entryRegistry: TileEntry) => {\n    if (this.state.activeEntries.find((x: TileEntry) => x.title === entryRegistry.title)) {\n      message.error(\"Entry is already registered!\");\n      console.error(\"Entry is already registered!\");\n      return;\n    }\n\n    this.setState(\n      { activeEntries: [...this.state.activeEntries, entryRegistry] },\n      () => {\n        this.props.updateEntries(this.state.activeEntries);\n      }\n    );\n  }\n\n  removeEntry = (entryRegistry: TileEntry) => {\n    if (!this.state.activeEntries.find((x: TileEntry) => x.title === entryRegistry.title)) {\n      message.error(\"Entry does not exist!\");\n      console.error(\"Entry is already registered!\");\n      return;\n    }\n\n    this.setState(\n      { activeEntries: this.state.activeEntries.filter((e: TileEntry) =>\n          e.title !== entryRegistry.title)\n      }, () => {\n        this.props.updateEntries(this.state.activeEntries);\n      }\n    );\n  }\n\n  render(): React.ReactNode {\n    const { activeEntries, loading, activeGoals }: IState = this.state;\n    const { tile, contentType, tileType, graphView, setGraphView } = this.props;\n\n    if (loading) return <Loading small={true} />\n\n    if (contentType && (contentType === \"LEARNING_OUTCOMES\")) {\n      return <LearningGoalsManager tile={tile}\n                                   setGoals={goals => {\n                                     this.setState({ activeGoals: goals });\n                                     this.props.updateGoals(goals)\n                                   }}\n                                   goals={activeGoals}\n                                   />\n    } else if (contentType && (contentType === \"PREDICTION\")) {\n\n    } else if (contentType && !tileType) {\n      return (<CreationPreview contentType={contentType} />);\n    }\n\n    if (!contentType || !tileType) return null;\n\n    switch (tileType!) {\n      case \"ASSIGNMENTS\":\n        return (<AssignmentManager tile={tile}\n                                   addEntry={this.addEntry}\n                                   removeEntry={this.removeEntry}\n                                   graphView={graphView}\n                                   setGraphView={setGraphView}\n                                   activeAssignments={activeEntries}\n                                   canvasAssignments={this.props.assignments} />);\n      case \"DISCUSSIONS\":\n        return (<DiscussionManager tile={tile}\n                                   addEntry={this.addEntry}\n                                   removeEntry={this.removeEntry}\n                                   wildcard={this.props.wildcard}\n                                   setWildcard={this.props.setWildcard}\n                                   activeDiscussions={activeEntries}\n                                   canvasDiscussions={this.props.discussions.filter(disc => disc.type === discussionType.topic)} />);\n      case \"EXTERNAL_DATA\":\n        return (<ExternalDataManager />);\n      default:\n        return null;\n    }\n  }\n}\n\nexport default connector(TileCreateEntries);\n","import React, { Component } from \"react\";\nimport {IProps} from \"./types\";\nimport {Button} from \"antd\";\n\nexport default class VisibilityButton extends Component<IProps> {\n  render(): React.ReactNode {\n    const { visible, setVisibility } = this.props;\n\n    return (\n      <div>\n        <Button size={\"large\"}\n                className={visible ? \"successButton\" : \"dangerButton\"}\n                onClick={() => setVisibility(!visible)}\n        >\n          { visible ? \"Visible\" : \"Hidden\" }\n        </Button>\n      </div>\n    )\n  }\n}","import React, { Component } from \"react\";\nimport {Col, Drawer, Input, Row, Statistic, Divider, Button} from \"antd\";\nimport {SaveOutlined} from \"@ant-design/icons\";\nimport {IProps, IState} from \"./types\";\nimport Select from \"react-select\";\nimport TileCreateEntries from \"../../../../../../components/managers/TileCreateEntries\";\nimport {editState, Tile, TileContentTypes, TileEntry, TileTypeTypes} from \"../../../../../../models/app/Tile\";\nimport VisibilityButton from \"./VisibilityButton\";\nimport {RootState} from \"../../../../../../store\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport TileController from \"../../../../../../api/controllers/tile\";\nimport {TileActions} from \"../../../../../../store/actions/tiles\";\n\nconst mapState = (state: RootState) => ({\n  tileEntries: state.tileEntries,\n  tileGoals: state.tileGoals\n});\n\nconst mapDispatch = {\n  loadTiles: () => TileActions.loadTiles(),\n  loadEntries: () => TileActions.loadTileEntries(),\n  loadTileGoals: () => TileActions.loadTileGoals()\n}\n\nconst connector = connect(mapState, mapDispatch)\ntype PropsFromRedux = ConnectedProps<typeof connector>\n\ntype Props = IProps & PropsFromRedux;\n\nclass EditTileDragger extends Component<Props, IState> {\n\n  state = {\n    updating: false,\n    title: \"\",\n    contentType: { label: undefined, value: undefined },\n    tileType: { label: undefined, value: undefined },\n    visible: true,\n    wildcard: false,\n    entries: [],\n    goals: [],\n    graphView: false,\n  }\n\n  componentWillReceiveProps(nextProps: Readonly<Props>, nextContext: any): void {\n    if (nextProps.tile !== undefined && nextProps.tile.id !== this.props.tile?.id) {\n      const { tile } = nextProps;\n\n      if (tile) {\n        this.setState({\n          title: tile.title,\n          contentType: { label: tile.content, value: tile.content },\n          tileType: { label: tile.type!, value: tile.type },\n          visible: tile.visible,\n          graphView: tile.graph_view\n        });\n      }\n    } else if (nextProps.tile === undefined) {\n      this.setState({\n        title: \"\",\n        contentType: { label: undefined, value: undefined },\n        tileType: { label: undefined, value: undefined },\n        visible: false,\n        graphView: false\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<{}>, snapshot?: any): void {\n    if (!prevProps.isOpen && this.props.isOpen) {\n      window.scrollTo(0, 0);\n    }\n  }\n\n  create = async () => {\n    const { entries, title, visible, contentType, tileType, wildcard, goals, graphView }: IState = this.state;\n    const { tileGroup } = this.props;\n\n    const newTile: Tile = {\n      id: -1,\n      group_id: tileGroup.id,\n      title,\n      position: -1,\n      visible,\n      content: contentType.value as TileContentTypes,\n      type: tileType.value as TileTypeTypes,\n      notifications: false,\n      graph_view: graphView,\n      wildcard\n    }\n\n    TileController.createTile(newTile).then(async tile => {\n      if (['ASSIGNMENTS', 'DISCUSSIONS'].includes(tile.type || \"\")) {\n        await this.createEntries(entries.map(e => {\n          e.tile_id = tile.id;\n          return e;\n        }));\n      } else if (tile.content === \"LEARNING_OUTCOMES\") {\n        for (let i = 0; i < goals.length; i++) {\n          goals[i].tile_id = tile.id;\n          let response = await TileController.createTileGoal(goals[i]);\n          console.log(\"goal\", response)\n        }\n      }\n\n      this.props.loadTiles().then(() => {\n        this.props.loadEntries().then(() => {\n          this.props.loadTileGoals().then(() => {\n            this.setState({ updating: false }, () => {\n              this.props.setOpen(false);\n            });\n          });\n        });\n      });\n    });\n  }\n\n  save = async () => {\n    const { entries, goals, graphView, wildcard, title }: IState = this.state;\n    const { tileEntries, tile }: Props = this.props;\n\n    tile!.title = title;\n    tile!.graph_view = graphView;\n    tile!.wildcard = wildcard;\n\n    const patchedTile = await TileController.updateTile(tile!)\n    this.setState({ updating: true }, async () => {\n      let removedEntries = tileEntries.filter(\n        e => e.tile_id === ( tile ? tile.id : -1 )\n      ).filter(\n        e => !entries.map(_e => _e.title).includes(e.title));\n\n      let newEntries = entries.filter(e => e.id === -1);\n\n      if (tile!.type === 'ASSIGNMENTS' || tile!.type === 'DISCUSSIONS' ) {\n        removedEntries = tileEntries.filter(\n          e => e.tile_id === patchedTile.id\n        ).filter(\n          e => !entries.map(_e => _e.title).includes(e.title));\n\n        newEntries = entries.filter(e => e.id === -1);\n\n      }\n      else if (tile!.content === \"LEARNING_OUTCOMES\") {\n        for (let i = 0; i < goals.length; i++) {\n          if (goals[i].state != null) {\n            switch (goals[i].state) {\n              case editState.new:\n                goals[i].state = editState.unchanged;\n                await TileController.createTileGoal(goals[i]);\n                break;\n              case editState.updated:\n                goals[i].state = editState.unchanged;\n                await TileController.updateTileGoal(goals[i]);\n                break;\n              case editState.removed:\n                goals[i].state = editState.unchanged;\n                await TileController.deleteTileGoal(goals[i].id);\n                break;\n              case editState.unchanged:\n                break;\n            }\n          }\n        }\n      }\n\n      await this.deleteEntries(removedEntries);\n      await this.createEntries(newEntries);\n\n      this.props.loadTiles().then(() => {\n        this.props.loadEntries().then(() => {\n          this.props.loadTileGoals().then(() => {\n            this.setState({ updating: false }, () => {\n              this.props.setOpen(false);\n            });\n          });\n        });\n      });\n    });\n  }\n\n  createEntries = async (entries: TileEntry[]) => {\n    for (const entry of entries) {\n      await TileController.createTileEntry(entry);\n    }\n  }\n\n  deleteEntries = async (entries: TileEntry[]) => {\n    for (const entry of entries) {\n      await TileController.deleteTileEntry(entry.id);\n    }\n  }\n\n  render(): React.ReactNode {\n    const { tileGroup, tiles, tile } = this.props;\n    const { title, contentType, tileType, visible }: IState = this.state;\n\n    return (\n      <Drawer\n        width={'100%'}\n        destroyOnClose={true}\n        title={tile === undefined ? \"Create new tile\" : \"Edit \" + tile.title}\n        placement={\"right\"}\n        closable={true}\n        onClose={() => this.props.setOpen(false)}\n        open={this.props.isOpen}\n        getContainer={false}\n        style={{ position: 'absolute' }}\n      >\n        <Row gutter={[10, 25]} style={{marginBottom: 10}}>\n          <Col xs={24}>\n            <Row gutter={50}>\n              <Col>\n                <Statistic\n                  title={\"Tile Group\"}\n                  value={tileGroup.title}\n                />\n              </Col>\n              <Col>\n                <Statistic\n                  title={\"Children\"}\n                  value={tiles.filter(t => t.group_id === tileGroup.id).length}\n                  suffix={\"tiles\"}\n                />\n              </Col>\n              <Col>\n                <Statistic\n                  title={\"Manage\"}\n                  valueRender={() => (\n                    <Button type=\"primary\"\n                            shape=\"round\"\n                            loading={this.state.updating}\n                            onClick={() => this.props.tile === undefined ? this.create() : this.save()}\n                            icon={<SaveOutlined />}>\n                      { this.props.tile === undefined ? \"Create\" : \"Save\" }\n                    </Button>)\n                  }\n                />\n              </Col>\n            </Row>\n\n            <Divider />\n            <h2>Tile Configuration</h2>\n          </Col>\n\n          <Col xs={12}>\n            <span>Title</span>\n            <Input size={\"large\"}\n                   placeholder={\"Specify\"}\n                   value={title}\n                   onChange={e => this.setState({ title: e.target.value })}/>\n          </Col>\n          <Col xs={12}>\n            <span>Visibility</span>\n            <br />\n            <VisibilityButton visible={visible}\n                              setVisibility={visible => this.setState({ visible })}\n            />\n          </Col>\n\n          <Col xs={12}>\n            <span>Content type</span>\n            <Select value={{label: contentType.label as string, value: contentType.value as string}}\n                    style={{zIndex: 100}}\n                    options={[\n                      { label: 'Binary', value: 'BINARY'},\n                      { label: 'Entries', value: 'ENTRIES' },\n                      { label: 'Prediction', value: 'PREDICTION' },\n                      { label: 'Learning Outcome', value: 'LEARNING_OUTCOMES' }\n                    ]}\n                    isClearable={true}\n                    onChange={e => {\n                      if (!e) {\n                        this.setState({\n                          contentType: {label: undefined, value: undefined},\n                          tileType: {label: undefined, value: undefined}\n                        });\n                      } else {\n                        this.setState({\n                          contentType: {\n                            label: e!.label,\n                            value: e!.value as TileContentTypes\n                          },\n                          tileType: {label: undefined, value: undefined}\n                        });\n                      }\n                    }\n                  }\n            />\n          </Col>\n\n          <Col xs={12}>\n            <span>Tile type</span>\n            { ((contentType.value === \"LEARNING_OUTCOMES\") || (contentType.value === \"PREDICTION\")) ?\n              <h3>N/A</h3> :\n              <Select value={{label: tileType.label as string, value: tileType.value as string}}\n                      isDisabled={!contentType}\n                      isClearable={true}\n                      style={{zIndex: 100}}\n                      options={[\n                        { label: 'Assignments', value: 'ASSIGNMENTS'},\n                        { label: 'Discussions', value: 'DISCUSSIONS', isDisabled: (contentType ? contentType!.value : \"\") !== \"ENTRIES\" },\n                        { label: 'External Data', value: 'EXTERNAL_DATA' }\n                      ]}\n                      onChange={e => this.setState({ tileType: e ? {\n                          label: e.label,\n                          value: e.value as TileTypeTypes\n                        } : { label: undefined, value: undefined } })\n                      }\n                      placeholder={\n                        contentType ? \"Select type\" : \"Specify content first\"\n                      }\n              />\n            }\n          </Col>\n        </Row>\n\n        <TileCreateEntries tile={tile}\n                           graphView={this.state.graphView}\n                           setGraphView={(graphView) => this.setState({ graphView })}\n                           wildcard={this.state.wildcard}\n                           setWildcard={wildcard => this.setState({ wildcard })}\n                           updateEntries={(entries) => this.setState({ entries })}\n                           updateGoals={(goals) => this.setState({ goals })}\n                           contentType={this.state.contentType.value}\n                           tileType={this.state.tileType.value}\n        />\n      </Drawer>\n    )\n  }\n}\n\nexport default connector(EditTileDragger);","import {Tile, TileGroup} from \"../../../../../models/app/Tile\";\n\nexport const getStyle = (group: TileGroup, tiles: Tile[]) => {\n\n  if (tiles.filter((tile: Tile) => tile.group_id === group.id).length === 0) {\n    return {\n      width: '100%',\n      minHeight: 200,\n      border: \"2px dotted #EAEAEA\",\n      borderRadius: 5,\n    }\n  }\n\n  return {}\n}\n\nexport const handleDrop = async (group: TileGroup,\n                                 evt: { removedIndex: number | null, addedIndex: number | null, payload?: Tile },\n                                 tiles: Tile[]): Promise<Tile[]> => {\n  const { addedIndex, payload, removedIndex } = evt;\n  void payload; // discard while keeping eslint happy\n\n  let tilesInGroup: Tile[] = JSON.parse(JSON.stringify(getTilesInGroup(tiles, group.id)));\n\n  if (removedIndex !== null && addedIndex !== null) {\n    const dragged = tilesInGroup[removedIndex - 1];\n    tilesInGroup.splice(addedIndex, 0, dragged);\n\n    if (removedIndex < addedIndex)\n      tilesInGroup = tilesInGroup.filter((t, i) => i !== removedIndex - 1);\n    else\n      tilesInGroup = tilesInGroup.filter((t, i) => i !== removedIndex);\n\n    for (let i = 0; i < tilesInGroup.length; i ++) {\n      tilesInGroup[i].position = i + 1;\n    }\n\n    tiles = [\n      ...tiles.filter(t => !tilesInGroup.map(x => x.id).includes(t.id)),\n      ...tilesInGroup\n    ];\n\n    return Promise.resolve(tiles);\n  } else {\n    return Promise.resolve(tiles);\n  }\n}\n\nexport const getTilesInGroup = (tiles: Tile[], groupId: number) => {\n  return tiles.filter(\n    (tile: Tile) => tile.group_id === groupId)\n    .sort(\n      (a: Tile, b: Tile) => a.position - b.position\n    );\n}","import React, { Component } from \"react\";\nimport { IProps, IState } from \"./types\";\nimport {Button, Space} from \"antd\";\nimport { PlusOutlined, DeleteOutlined } from \"@ant-design/icons\";\nimport DraggableTile from \"../../../../../components/DraggableTile\";\nimport EditTileDragger from \"./EditTileDragger\";\nimport {Container} from \"react-smooth-dnd\";\nimport {getStyle, getTilesInGroup, handleDrop} from \"./helpers\";\nimport {Tile} from \"../../../../../models/app/Tile\";\nimport \"./style.scss\";\nimport Swal from \"sweetalert2\";\nimport TileController from \"../../../../../api/controllers/tile\";\nimport {RootState} from \"../../../../../store\";\nimport {TileActions} from \"../../../../../store/actions/tiles\";\nimport {connect, ConnectedProps} from \"react-redux\";\n\nconst mapState = (state: RootState) => ({\n  tileGroups: state.tileGroups,\n});\n\nconst mapDispatch = {\n  loadGroups: () => TileActions.loadGroups(),\n  loadTiles: () => TileActions.loadTiles()\n}\n\nconst connector = connect(mapState, mapDispatch)\ntype PropsFromRedux = ConnectedProps<typeof connector>\n\ntype Props = IProps & PropsFromRedux;\n\nclass TileWrapper extends Component<Props, IState> {\n\n  state = {\n    updating: [],\n    editTile: undefined,\n    isDraggerOpen: false\n  }\n\n  deleteTile = async (id: number) => {\n    TileController.deleteTile(id).then(() => {\n      this.props.loadGroups().then(() => {\n        this.props.loadTiles().then(() => {\n          this.setState({isDraggerOpen: false});\n        });\n      });\n    });\n  }\n\n\n  render(): React.ReactNode {\n    const { editTile, isDraggerOpen, updating }: IState = this.state;\n    const { group, tiles, updateTiles } = this.props;\n    const historicTiles: Tile[] = JSON.parse(JSON.stringify(tiles));\n\n    return (\n      <div className={\"tileWrapper\"} key={\"group-\" + group.id.toString()}>\n        <h2>{ group.title }</h2>\n        <div className={\"tileContainer\"}>\n          <EditTileDragger\n            tile={editTile}\n            tiles={tiles}\n            tileGroup={group}\n            isOpen={isDraggerOpen}\n            setOpen={(isDraggerOpen) => this.setState({ isDraggerOpen })}\n            updateTiles={updateTiles}\n          />\n\n          <Container groupName={`primary`}\n                     key={\"containerGroup\" + group.id.toString()}\n                     style={{...getStyle(group, tiles)}}\n                     getChildPayload={i => getTilesInGroup(tiles, group.id)[i]}\n                     orientation={\"horizontal\"}\n                     dragClass={'dragged'}\n                     onDrop={e => {\n                       handleDrop(group, e, tiles).then(async (newTiles: Tile[]) => {\n                         if (newTiles.map(t => {\n                           const target = historicTiles.find(_t => _t.id === t.id);\n                           if (!target) return false;\n                           return (target.group_id !== t.group_id || target.position !== t.position);\n                         }).some(x => x)) {\n                           this.setState({ updating: [...updating, group.id] }, async () => {\n                             const changedTiles = newTiles.filter(t => {\n                               const target = historicTiles.find(ht => ht.id === t.id);\n                               if (!target) return true;\n\n                               return target.position !== t.position || target.group_id !== t.group_id;\n                             });\n\n                             for (const tile of changedTiles) {\n                               await TileController.updateTile(tile);\n                             }\n\n                             TileController.getTiles().then(async fetchedTiles => {\n                               await updateTiles(fetchedTiles);\n\n                               this.setState({ updating: updating.filter(x => x !== group.id)});\n                             })\n                           });\n                         }\n                       })\n                     }}>\n            <div className={\"updateOverlay \" + (updating.includes(group.id) ? \"active\" : \"\")}>\n              <div className={\"overlayBackground\"} />\n              <h1>Saving changes...</h1>\n            </div>\n            { tiles.sort((a, b) => a.position - b.position).map(t => {\n              return (\n                <DraggableTile key={\"dragMem\" + t.id.toString()} {...{\n                  tile: t, editTile: () => this.setState({editTile: t, isDraggerOpen: true}), deleteTile: this.deleteTile\n                }} />\n              );\n            })}\n          </Container>\n\n          <br />\n\n          <Space direction={\"horizontal\"}>\n            <Button type={\"link\"}\n                    onClick={() => this.setState({\n                      isDraggerOpen: true,\n                      editTile: undefined,\n                    })}\n                    icon={<PlusOutlined />}>\n              Create Tile\n            </Button>\n            <Button type={\"link\"}\n                    danger={true}\n                    onClick={() => {\n                      Swal.fire({\n                        title: 'Do you really want to delete this group?',\n                        text: 'All tiles within this group will be deleted as a result.',\n                        showCancelButton: true,\n                        confirmButtonText: 'Delete',\n                        confirmButtonColor: 'rgb(255, 110, 90)',\n                        showLoaderOnConfirm: true,\n                        allowOutsideClick: () => !Swal.isLoading()\n                      }).then((result) => {\n                        if (result.isConfirmed) {\n                          TileController.deleteTileGroup(group.id).then(() => {\n                            this.props.loadGroups().then(() => {\n                              Swal.fire('Task completed!', '', 'success');\n                            });\n                          });\n                        }\n                      });\n                    }}\n                    icon={<DeleteOutlined />}>\n              Delete Group\n            </Button>\n          </Space>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default connector(TileWrapper);","import React, { Component } from \"react\";\nimport Admin from \"../../index\";\nimport ManageTileGroups from \"../../../../containers/ManageTileGroups\";\nimport { Divider } from \"antd\";\nimport TileWrapper from \"./TileWrapper\";\nimport {Tile, TileGroup} from \"../../../../models/app/Tile\";\nimport \"./style.scss\";\nimport {RootState} from \"../../../../store\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport {TileActions} from \"../../../../store/actions/tiles\";\nimport {DataMartActions} from \"../../../../store/actions/datamart\";\nimport {getTilesInGroup} from \"./TileWrapper/helpers\";\n\nconst mapState = (state: RootState) => ({\n  tiles: state.tiles,\n  tileGroups: state.tileGroups,\n});\n\nconst mapDispatch = {\n  loadAssignments: () => DataMartActions.loadAssignments(),\n  loadDiscussions: () => DataMartActions.loadDiscussions(),\n  updateTiles: (tiles: Tile[]) => TileActions.updateTiles(tiles)\n}\n\nconst connector = connect(mapState, mapDispatch)\ntype PropsFromRedux = ConnectedProps<typeof connector>\n\nclass Tiles extends Component<PropsFromRedux> {\n\n  componentDidMount(): void {\n    this.props.loadDiscussions();\n    this.props.loadAssignments();\n  }\n\n  render(): React.ReactNode {\n    const { tiles, tileGroups } = this.props;\n\n    return (\n      <Admin menuKey={\"tiles\"}>\n        <div id={\"adminTiles\"}>\n          <ManageTileGroups />\n          <h1>Tiles</h1>\n          <p>The overview shows all groups with their respective tiles. Drag around tiles to re-arrange them or create new ones!</p>\n          <Divider />\n\n          { tileGroups.map((group: TileGroup) => (\n            <TileWrapper group={group}\n                         updateTiles={this.props.updateTiles}\n                         tiles={getTilesInGroup(tiles, group.id)}\n                         key={group.id}\n            />\n          ))}\n        </div>\n      </Admin>\n    )\n  }\n}\n\nexport default connector(Tiles);"],"names":["connector","connect","state","user","AdminMenu","_Component","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","this","props","_jsxs","id","children","_jsx","name","UserOutlined","Menu","selectedKeys","menuKey","icon","DatabaseOutlined","Link","to","AppstoreOutlined","LaptopOutlined","TeamOutlined","TrophyOutlined","title","FundProjectionScreenOutlined","DotChartOutlined","CloudUploadOutlined","NotificationOutlined","ControlOutlined","Component","Admin","_this$props","isAdmin","AdminHeader","Row","Col","xs","className","concat","Redirect","withAdminRole","mapDispatch","loadGroups","TileActions","tileGroups","ManageTileGroups","_this","_len","length","args","Array","_key","call","text","drawerOpen","_this2","Space","direction","Button","PlusOutlined","onClick","setState","Drawer","width","placement","closable","onClose","open","getContainer","style","position","Input","placeholder","onChange","e","target","type","TileController","then","tiles","dispatch","updateTile","_updateTile","_asyncToGenerator","_regeneratorRuntime","mark","_callee","tile","wrap","_context","prev","next","t0","t1","sent","abrupt","stop","_x","ActionButtons","loading","handleMenuClick","editTile","Swal","showCancelButton","confirmButtonText","confirmButtonColor","showLoaderOnConfirm","allowOutsideClick","result","isConfirmed","deleteTile","items","label","EditOutlined","DeleteOutlined","danger","_this$state","float","Dropdown","menu","buttonsRender","_ref","_ref2","_slicedToArray","leftButton","rightButton","visible","React","t","_ref3","_callee2","newTile","_context2","_x2","Spin","size","ContentType","getName","content","getIcon","FieldBinaryOutlined","StockOutlined","TileType","tileEntries","DraggableTile","entriesLoaded","entries","updatingNotifications","toggleNotifications","_callee3","_context3","_toConsumableArray","notifications","filter","x","_x3","prevProps","prevState","snapshot","_this3","undefined","_this4","Draggable","gutter","marginTop","textAlign","margin","Divider","Tag","toString","Tooltip","includes","shape","BellTwoTone","twoToneColor","ExternalDataManager","CreationPreview","getTitle","contentType","getDescription","console","log","md","FadeIn","toLowerCase","getColumns","removeAssignment","canvasAssignments","dataIndex","render","obj","find","c","CheckCircleOutlined","CloseCircleOutlined","assignment","published","_","QuizzesTutorial","Modal","centered","onCancel","setOpen","footer","src","height","maxHeight","alt","AssignmentManager","tutorialOpen","addAssignment","a","entry","editState","tile_id","addEntry","_this$props2","activeAssignments","val","Switch","checked","graphView","setGraphView","zIndex","Alert","message","QuestionOutlined","background","border","padding","cursor","color","textDecoration","Table","columns","removeEntry","pagination","dataSource","CreatableSelect","options","map","onCreateOption","removeDiscussion","canvasDiscussions","d","discussion","posted_by","posted_at","DiscussionManager","addDiscussion","activeDiscussions","wildcard","setWildcard","GoalRequirement","metaKeys","loadMetaKeys","getExpressionLabel","expression","getMetaKeyLabel","requirement","entry_id","nextProps","nextContext","isNaN","_tiles$find","_tileEntries$find","entryOptions","targetTile","updateRequirement","Select","isDisabled","isLoading","meta_key","k","InputNumber","step","disabled","Number","GoalEntry","_initialize","goal","addNewRequirement","requirements","goal_id","updateGoal","r","showIcon","LearningGoalsManager","addNewGoal","goals","setGoals","assignments","discussions","TileCreateEntries","activeGoals","activeEntries","_initializeTile","updateGoals","updateEntries","entryRegistry","error","_nextProps$tile","_this$props$tile","tileType","Loading","small","disc","discussionType","VisibilityButton","setVisibility","loadTiles","loadEntries","loadTileGoals","tileGoals","EditTileDragger","updating","create","tileGroup","group_id","graph_view","i","response","createEntries","save","_callee4","_this$state2","patchedTile","_context4","removedEntries","newEntries","_e","deleteEntries","_ref5","_callee5","_iterator","_step","_context5","_createForOfIteratorHelper","s","n","done","f","finish","_ref6","_callee6","_iterator2","_step2","_context6","isOpen","window","scrollTo","_this$state3","destroyOnClose","marginBottom","Statistic","suffix","valueRender","SaveOutlined","isClearable","getStyle","group","minHeight","borderRadius","handleDrop","evt","addedIndex","removedIndex","tilesInGroup","dragged","payload","JSON","parse","stringify","getTilesInGroup","splice","Promise","resolve","groupId","sort","b","TileWrapper","isDraggerOpen","updateTiles","historicTiles","Container","groupName","_objectSpread","getChildPayload","orientation","dragClass","onDrop","newTiles","_t","some","changedTiles","ht","_ref4","fetchedTiles","loadAssignments","DataMartActions","loadDiscussions","Tiles"],"sourceRoot":""}