{"version":3,"file":"static/js/23.6f8cad53.chunk.js","mappings":"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","sources":["common/Admin/AdminMenu/index.tsx","common/Admin/index.tsx","components/settings/RequireConsent/ConsentEditor/index.tsx","components/settings/RequireConsent/index.tsx","components/settings/AcceptList/index.tsx","components/settings/PeerGroups/index.tsx","common/Admin/sections/Settings/index.tsx"],"sourcesContent":["import React, { Component } from \"react\";\nimport {\n    AppstoreOutlined,\n    ControlOutlined,\n    CloudUploadOutlined,\n    // ClusterOutlined,\n    DotChartOutlined,\n    FundProjectionScreenOutlined,\n    LaptopOutlined,\n    TrophyOutlined,\n    NotificationOutlined,\n    DatabaseOutlined,\n    UserOutlined,\n    TeamOutlined\n} from \"@ant-design/icons\";\nimport { Menu } from \"antd\";\nimport { Link } from \"react-router-dom\";\nimport \"./style.scss\";\nimport { RootState } from \"../../../store\";\nimport { connect, ConnectedProps } from \"react-redux\";\n\nconst mapState = (state: RootState) => ({\n    user: state.user\n});\n\nconst connector = connect(mapState)\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\ntype Props = { menuKey: string } & PropsFromRedux;\n\nclass AdminMenu extends Component<Props> {\n\n    render(): React.ReactNode {\n        const { user } = this.props;\n\n        return (\n            <div id={\"adminMenu\"}>\n                <div id={\"user\"}>\n                    <h3>{user ? user.name : \"Loading profile...\"}</h3>\n                    <strong><UserOutlined /> Instructor</strong>\n                </div>\n\n                <Menu selectedKeys={[this.props.menuKey]}>\n                    <Menu.Item key={\"datamart\"} icon={<DatabaseOutlined />}>\n                        <Link to={'/admin'}>\n                            Datamart\n                        </Link>\n                    </Menu.Item>\n\n                    <Menu.Item key={\"tiles\"} icon={<AppstoreOutlined />}>\n                        <Link to={'/admin/tiles'}>\n                            Tiles\n                        </Link>\n                    </Menu.Item>\n\n                    <Menu.Item key={\"dashboard\"} icon={<LaptopOutlined />}>\n                        <Link to={'/admin/dashboard'}>\n                            Dashboard\n                        </Link>\n                    </Menu.Item>\n\n                    <Menu.Item key={\"studentOverview\"} icon={<TeamOutlined />}>\n                        <Link to={'/admin/student-overview'}>\n                            Student Overview\n                        </Link>\n                    </Menu.Item>\n                    <Menu.SubMenu key={\"submenu\"} icon={<TrophyOutlined />} title={\"Grades\"}>\n                        {/* TODO: completely remove oldpredictor from code */}\n                        {/* <Menu.Item key={\"gradePredictorOld\"} icon={<FundProjectionScreenOutlined />}>\n                            <Link to={'/admin/grade-predictor-old'}>\n                                Old Predictor\n                            </Link>\n                        </Menu.Item> */}\n                        <Menu.Item key={\"gradePredictor\"} icon={<FundProjectionScreenOutlined />}>\n                            <Link to={'/admin/grade-predictor'}>\n                                Predictor\n                            </Link>\n                        </Menu.Item>\n                        <Menu.Item key={\"gradeAnalyzer\"} icon={<DotChartOutlined />}>\n                            <Link to={'/admin/grade-analyzer'}>\n                                Analyzer\n                            </Link>\n                        </Menu.Item>\n                    </Menu.SubMenu>\n                    <Menu.Item key={\"dataWizard\"} icon={<CloudUploadOutlined />}>\n                        <Link to={'/admin/data-wizard'}>\n                            Data Wizard\n                        </Link>\n                    </Menu.Item>\n                    {/* <Menu.Item key={\"analytics\"} icon={<ClusterOutlined />}>\n                        <Link to={'/admin/analytics'}>\n                            Analytics\n                        </Link>\n                    </Menu.Item> */}\n                    <Menu.Item key={\"notificationCentre\"} icon={<NotificationOutlined />}>\n                        <Link to={'/admin/notification-centre'}>\n                            Notification Centre\n                        </Link>\n                    </Menu.Item>\n                    <Menu.Item key={\"settings\"} icon={<ControlOutlined />}>\n                        <Link to={'/admin/settings'}>\n                            Settings\n                        </Link>\n                    </Menu.Item>\n                </Menu>\n            </div>\n        )\n    }\n}\n\nexport default connector(AdminMenu);\n","import React, { Component } from \"react\";\nimport { withAdminRole } from \"../../hoc/withAdminRole\";\nimport AdminHeader from \"../../containers/AdminHeader\";\nimport { Redirect } from \"react-router-dom\";\nimport { Col, Row } from \"antd\";\nimport AdminMenu from \"./AdminMenu\";\nimport \"./style.scss\";\n\nclass Admin extends Component<any> {\n\n  render(): React.ReactNode {\n    const { isAdmin, menuKey } = this.props;\n    if (!isAdmin) return (<Redirect to={'/'} />);\n\n    return (\n      <div id={\"admin\"}>\n        <AdminHeader />\n        <Row>\n          <Col xs={4}>\n            <AdminMenu menuKey={menuKey} />\n          </Col>\n          <Col xs={20} id={'wrapper'} className={`${ menuKey !== \"settings\" && \"noOverflow\"}`}>\n            { this.props.children }\n          </Col>\n        </Row>\n      </div>\n    )\n  }\n}\n\nexport default withAdminRole(Admin);","import React, { Component } from \"react\";\nimport { IState } from \"./types\";\nimport { EditorState } from 'draft-js';\n// @ts-ignore plugin does not support TypeScript\nimport createToolbarPlugin from 'draft-js-static-toolbar-plugin';\n// @ts-ignore plugin does not support TypeScript\nimport createLinkifyPlugin from 'draft-js-linkify-plugin';\nimport Editor from 'draft-js-plugins-editor';\nimport {\n  ItalicButton,\n  BoldButton,\n  UnderlineButton,\n  CodeButton,\n  HeadlineOneButton,\n  HeadlineTwoButton,\n  HeadlineThreeButton,\n  UnorderedListButton,\n  OrderedListButton,\n  BlockquoteButton,\n  CodeBlockButton,\n} from 'draft-js-buttons';\nimport 'draft-js/dist/Draft.css';\nimport 'draft-js-static-toolbar-plugin/lib/plugin.css';\nimport \"./style.scss\";\nimport { stateToHTML } from \"draft-js-export-html\";\nimport { stateFromHTML } from \"draft-js-import-html\";\nimport { standardConsent } from \"./template\";\nimport {Alert, Button, message} from \"antd\";\nimport Loading from \"../../../utils/Loading\";\nimport {RootState} from \"../../../../store\";\nimport {CourseActions} from \"../../../../store/actions/course\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport AppController from \"../../../../api/controllers/app\";\n\nconst toolbarPlugin = createToolbarPlugin();\nconst linkifyPlugin = createLinkifyPlugin();\nconst { Toolbar } = toolbarPlugin;\n\nconst mapState = (state: RootState) => ({\n  course: state.course,\n});\n\nconst mapDispatch = {\n  loadCourse: () => CourseActions.loadCourse()\n}\n\nconst connector = connect(mapState, mapDispatch)\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nclass ConsentEditor extends Component<PropsFromRedux, IState> {\n\n  state = {\n    doneLoading: false,\n    editorState: undefined,\n    initialState: undefined,\n    hasChanged: false,\n    saving: false\n  }\n\n  componentDidMount(): void {\n    const { course }: PropsFromRedux = this.props;\n\n    // const editorState = course ? (course.text ? course.text : undefined) : undefined;\n\n    setTimeout(() => {\n      this.setState({\n        doneLoading: true,\n        editorState: EditorState.createWithContent(stateFromHTML(course ? (course.text ? course.text : standardConsent) : standardConsent)),\n        initialState: stateToHTML(stateFromHTML(course ? (course.text ? course.text : \"\") : \"\")),\n        hasChanged: false\n      });\n    }, 300);\n  }\n\n  isUpToDate = () => {\n    if (!this.state.editorState || !this.state.doneLoading) return false;\n    const currentState: EditorState = this.state.editorState!;\n    return (stateToHTML(currentState.getCurrentContent()).toString().trim() === this.state.initialState)\n  }\n\n  updateState = (newState: EditorState) => {\n    this.setState({ editorState: newState, hasChanged: true });\n  }\n\n  save = () => {\n    const { course } = this.props;\n    this.setState({ saving: true }, () => {\n      const currentState: EditorState = this.state.editorState!;\n      const text = stateToHTML(currentState.getCurrentContent());\n\n      AppController.updateConsent(course!.require_consent, text).then(() => {\n        this.props.loadCourse().then(() => {\n          this.setState({\n            saving: false,\n            initialState: text\n          }, () => message.success(\"Informed consent saved!\"));\n        });\n      });\n    });\n  }\n\n  render(): React.ReactNode {\n    if (!this.state.doneLoading) {\n      return <Loading small={true} />\n    }\n\n    return (\n      <div id={\"consentEditor\"}>\n        <div id={\"editorToolbar\"}>\n          <Toolbar>\n            {\n              (externalProps: any) => (\n                <React.Fragment>\n                  <BoldButton {...externalProps} />\n                  <ItalicButton {...externalProps} />\n                  <UnderlineButton {...externalProps} />\n                  <CodeButton {...externalProps} />\n                  <UnorderedListButton {...externalProps} />\n                  <HeadlineOneButton {...externalProps} />\n                  <HeadlineTwoButton {...externalProps} />\n                  <HeadlineThreeButton {...externalProps} />\n                  <OrderedListButton {...externalProps} />\n                  <BlockquoteButton {...externalProps} />\n                  <CodeBlockButton {...externalProps} />\n                  <Button\n                    id={\"save\"}\n                    type={\"link\"}\n                    disabled={this.isUpToDate() || this.state.saving}\n                    onClick={this.save}\n                  >\n                    { this.state.saving ? \"Saving\" : \"Save\" }\n                  </Button>\n                </React.Fragment>\n              )\n            }\n          </Toolbar>\n\n          { !this.state.initialState &&\n          <Alert\n            message={\"Consent can not be given because the informed consent is undefined. Provide the\" +\n            \" informed consent below\"}\n            type={\"error\"} showIcon />\n          }\n        </div>\n\n        <div id={\"contentWrapper\"}\n             className={`${this.isUpToDate() && \"up-to-date\"} ${this.state.saving && \"saving\"}`}>\n          <Editor\n            editorState={this.state.editorState!}\n            onChange={this.updateState}\n            plugins={[toolbarPlugin, linkifyPlugin]}\n          />\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default connector(ConsentEditor);","import React, { Component } from \"react\";\nimport {Divider, Switch, Tooltip} from \"antd\";\nimport {CheckOutlined, CloseOutlined} from \"@ant-design/icons\";\nimport ConsentEditor from \"./ConsentEditor\";\nimport FadeIn from \"react-fade-in\";\nimport {RootState} from \"../../../store\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport AppController from \"../../../api/controllers/app\";\nimport Loading from \"../../utils/Loading\";\nimport {IState} from \"./types\";\nimport {CourseActions} from \"../../../store/actions/course\";\n\nconst mapState = (state: RootState) => ({\n  course: state.course,\n});\n\nconst mapDispatch = {\n  loadCourse: () => CourseActions.loadCourse()\n}\n\nconst connector = connect(mapState, mapDispatch)\ntype PropsFromRedux = ConnectedProps<typeof connector>\n\nclass RequireConsent extends Component<PropsFromRedux, IState> {\n\n  state = {\n    loading: false\n  }\n\n  toggleConsentRequirement = () => {\n    const { course } = this.props;\n\n    if (!course) return;\n\n    this.setState({ loading: true }, () => {\n      AppController.updateConsent(!course.require_consent, course.text).then(() => {\n        this.props.loadCourse().then(() => {\n          this.setState({ loading: false });\n        });\n      });\n    });\n  }\n\n  render(): React.ReactNode {\n    const { course } = this.props;\n    if (!course) return <Loading small={true} />;\n\n    return (\n      <div id={\"informedConsent\"}>\n        <h2>Informed Consent</h2>\n        <div className={\"primaryContainer\"}>\n          <span>\n            <Tooltip title={\"Consent is mandatory!\"}>\n              <Switch\n                // consent is enforced\n                checkedChildren={<CheckOutlined />}\n                unCheckedChildren={<CloseOutlined />}\n                onClick={this.toggleConsentRequirement}\n                checked={course.require_consent || true}\n                disabled={true}\n                loading={this.state.loading}\n              />\n            </Tooltip>\n            &nbsp;\n            When checked students are required to explicitly accept the informed consent. Students that did not grant\n              consent won't be able to use the application and their data will be excluded.\n          </span>\n\n          <Divider />\n\n          { course.require_consent &&\n            <FadeIn>\n              <ConsentEditor />\n            </FadeIn>\n          }\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default connector(RequireConsent);","import React, { Component } from \"react\";\nimport StudentController from \"../../../api/controllers/student\";\nimport {Button, Col, Divider, Row, Space, Switch} from \"antd\";\nimport {CheckOutlined, CloseOutlined} from \"@ant-design/icons\";\nimport {IProps, IState} from \"./types\";\nimport Loading from \"../../utils/Loading\";\nimport {CanvasStudent} from \"../../../models/canvas/Student\";\nimport \"./style.scss\";\nimport Swal from \"sweetalert2\";\nimport {RootState} from \"../../../store\";\nimport {CourseActions} from \"../../../store/actions/course\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport DataMartController from \"../../../api/controllers/datamart\";\nimport AppController from \"../../../api/controllers/app\";\n\nconst mapState = (state: RootState) => ({\n  course: state.course,\n});\n\nconst mapDispatch = {\n  loadCourse: () => CourseActions.loadCourse()\n}\n\nconst connector = connect(mapState, mapDispatch)\ntype PropsFromRedux = ConnectedProps<typeof connector>\n\nclass AcceptList extends Component<PropsFromRedux & IProps, IState> {\n\n  state = {\n    loaded: false,\n    students: [],\n    enabled: false,\n    accepted: []\n  }\n\n  componentDidMount(): void {\n    StudentController.getStudents().then(students => this.setState({ students, loaded: true }));\n\n    DataMartController.getAcceptList().then(acceptList => {\n      this.setState({ accepted: acceptList.filter(x => x.accepted).map(x => x.userID) });\n    });\n\n    const { course } = this.props;\n    if (course) {\n      this.setState({ enabled: course.accept_list });\n    }\n  }\n\n  isAccepted = (userID: string) => {\n    return (this.state.accepted as string[]).includes(userID);\n  }\n\n  render(): React.ReactNode {\n    const { loaded, students, enabled, accepted }: IState = this.state;\n\n    if (!loaded) {\n      return (\n        <div id={\"acceptList\"}>\n          <h2>Accept List</h2>\n          <div className={\"primaryContainer\"}>\n            <Loading small={true} />\n          </div>\n        </div>\n      )\n    }\n\n    return (\n      <div id={\"acceptList\"}>\n        <h2>Accept List</h2>\n\n        <div className={\"primaryContainer\"}>\n          <span>\n            <Switch\n              checkedChildren={<CheckOutlined />}\n              unCheckedChildren={<CloseOutlined />}\n              checked={enabled}\n              onChange={val => {\n                AppController.updateAcceptList(val).then(e =>\n                  this.setState({ enabled: e }, () => this.props.loadCourse()));\n              }}\n            />\n            &nbsp;\n            If enabled only the students with explicit access may use the application. When disabled all enrolled students are able to use the application.\n          </span>\n\n          <Divider />\n\n          <span>\n            Accepted: { accepted.length } / { students.length } <small>({Math.round((accepted.length / students.length) * 100)}%)</small>\n          </span>\n\n          <br />\n\n          <Space>\n            <Button disabled={!enabled}>Select all</Button>\n            <Button disabled={!enabled}>Deselect all</Button>\n            <Button disabled={!enabled}\n                    onClick={() => {\n                      Swal.fire({\n                        title: 'Percentage of students to accept',\n                        input: 'number',\n                        inputAttributes: {\n                          autocapitalize: 'off'\n                        },\n                        showCancelButton: true,\n                        confirmButtonText: 'Randomize',\n                        showLoaderOnConfirm: true,\n                        preConfirm: (percentage) => {\n                          const _p = parseInt(percentage);\n\n                          if (_p < 10) {\n                            return Swal.showValidationMessage(\n                              `The acceptance percentage must be above 10%!`\n                            )\n                          }\n\n                          if (_p > 100) {\n                            return Swal.showValidationMessage(\n                              `Percentages can't exceed 100%.`\n                            )\n                          }\n                        },\n                        allowOutsideClick: () => !Swal.isLoading()\n                      }).then((result) => {\n                        if (result.isConfirmed) {\n                          const percentage = parseInt(result.value as unknown as string);\n                          const n = Math.ceil(students.length * (percentage / 100));\n                          const _a = students.sort(() => 0.5 - Math.random()).slice(0, n);\n                          this.setState({ accepted: _a.map((s: CanvasStudent) => s.userID) });\n\n                          Swal.fire('Task completed!', '', 'success')\n                        }\n                      })\n                    }}\n            >\n              Random assign\n            </Button>\n            <Button className={\"successButtonStyle\"}\n                    disabled={!enabled}\n                    onClick={() => {\n                      DataMartController.createAcceptList(students.map(s => {\n                        return {\n                          userID: s.userID,\n                          accepted: accepted.includes(s.userID)\n                        }\n                      })).then(list => {\n                        this.setState({\n                          accepted: list.filter(x => x.accepted).map(x => x.userID)\n                        });\n                        Swal.fire('Configuration saved!', '', 'success')\n                      })\n                    }}\n            >\n              Save\n            </Button>\n          </Space>\n\n          <Divider />\n\n          <div style={{ opacity: enabled ? 1 : 0.5}}>\n            <Row>\n              { students.sort((a, b) => a.name.localeCompare(b.name)).map((student: CanvasStudent) => (\n                <Col xs={12} md={8} lg={6} xl={4}>\n                  <div className={`student ${this.isAccepted(student.userID) && \"accepted\"}`}\n                       onClick={() => {\n                         this.isAccepted(student.userID) ?\n                           this.setState({ accepted: accepted.filter(s => s !== student.userID) }) :\n                           this.setState({ accepted: [...accepted, student.userID] })\n                       }}\n                  >\n                    <span>{ student.name }</span>\n                    <br />\n                    <small>{ student.userID }</small>\n                  </div>\n                </Col>\n              ))}\n            </Row>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default connector(AcceptList);\n","import React, { Component } from \"react\";\nimport {Button, InputNumber, Space, Switch} from \"antd\";\nimport {CheckOutlined, CloseOutlined} from \"@ant-design/icons\";\nimport {RootState} from \"../../../store\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport AppController from \"../../../api/controllers/app\";\nimport {IState} from \"./types\";\nimport {CourseActions} from \"../../../store/actions/course\";\n\nconst mapState = (state: RootState) => ({\n  course: state.course,\n});\n\nconst mapDispatch = {\n  loadCourse: () => CourseActions.loadCourse()\n}\n\nconst connector = connect(mapState, mapDispatch)\ntype PropsFromRedux = ConnectedProps<typeof connector>\n\nclass PeerGroups extends Component<PropsFromRedux, IState> {\n\n  state = {\n    loading: true,\n    enabled: false,\n    size: 0,\n    inputSize: 0,\n    inputEnabled: false,\n    buttonText: \"Save\"\n  }\n\n  componentDidMount(): void {\n    this.setState({ loading: true }, () => {\n      AppController.getCoursePeerGroups().then(result => {\n        this.setState({\n          loading: false,\n          enabled: result.personalized_peers,\n          inputEnabled: result.personalized_peers,\n          size: result.min_size,\n          inputSize: result.min_size\n        })\n      });\n    });\n  }\n\n  updatePeerGroups = (personalized: boolean = false) => {\n    this.setState({ loading: true }, () => {\n      AppController.updateCoursePeerGroup(\n        this.state.inputSize,\n        personalized ? true : this.state.inputEnabled\n      ).then(result => {\n        this.setState({\n          enabled: result.personalized_peers,\n          inputEnabled: result.personalized_peers,\n          size: result.min_size,\n          inputSize: result.min_size,\n          buttonText: \"Saved\"\n        }, () => {\n          setTimeout(() => this.setState({ buttonText: \"Save\", loading: false }), 1000)\n        });\n      });\n    });\n  }\n\n  render(): React.ReactNode {\n    return (\n      <div id={\"peerGroups\"}>\n        <h2>Peer Groups</h2>\n        <div className={\"primaryContainer\"}>\n          <Space direction={\"vertical\"}>\n            <div>\n              <span>\n                <Switch\n                  checkedChildren={<CheckOutlined />}\n                  unCheckedChildren={<CloseOutlined />}\n                  onClick={() => {\n                    this.updatePeerGroups(!this.state.inputEnabled);\n                    this.setState({ inputEnabled: !this.state.inputEnabled });\n                  }}\n                  checked={this.state.inputEnabled}\n                  loading={this.state.loading}\n                />\n                &nbsp;\n                Enable personalized peer groups.\n              </span>\n            </div>\n\n            <div>\n              Minimum group size: &nbsp;\n              <InputNumber min={2}\n                           size={\"large\"}\n                           value={this.state.inputSize}\n                           onChange={val => this.setState({ inputSize: val as number })}\n                           disabled={!this.state.enabled || this.state.loading} />\n            </div>\n\n            <Button className={\"successButtonStyle\"}\n                    onClick={() => this.updatePeerGroups()}\n                    loading={this.state.loading}\n                    disabled={this.state.loading}>\n              { this.state.buttonText }\n            </Button>\n          </Space>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default connector(PeerGroups);","import React, { Component } from \"react\";\nimport Admin from \"../../index\";\nimport {Divider, Space} from \"antd\";\nimport RequireConsent from \"../../../../components/settings/RequireConsent\";\nimport AcceptList from \"../../../../components/settings/AcceptList\";\nimport PeerGroups from \"../../../../components/settings/PeerGroups\";\n\nexport default class Settings extends Component {\n  render(): React.ReactNode {\n    return (\n      <Admin menuKey={\"settings\"}>\n        <h1>Settings</h1>\n        <Divider />\n\n        <Space direction={\"vertical\"} style={{width: '100%'}}>\n          <RequireConsent />\n          <AcceptList />\n          <PeerGroups />\n        </Space>\n      </Admin>\n    )\n  }\n}"],"names":["connector","connect","state","user","AdminMenu","this","props","id","name","UserOutlined","selectedKeys","menuKey","icon","DatabaseOutlined","to","AppstoreOutlined","LaptopOutlined","TeamOutlined","TrophyOutlined","title","FundProjectionScreenOutlined","DotChartOutlined","CloudUploadOutlined","NotificationOutlined","ControlOutlined","Component","Admin","isAdmin","AdminHeader","xs","className","children","withAdminRole","toolbarPlugin","createToolbarPlugin","linkifyPlugin","createLinkifyPlugin","Toolbar","mapDispatch","loadCourse","CourseActions","course","ConsentEditor","doneLoading","editorState","undefined","initialState","hasChanged","saving","isUpToDate","currentState","stateToHTML","getCurrentContent","toString","trim","updateState","newState","setState","save","text","AppController","require_consent","then","message","setTimeout","EditorState","stateFromHTML","standardConsent","externalProps","BoldButton","ItalicButton","UnderlineButton","CodeButton","UnorderedListButton","HeadlineOneButton","HeadlineTwoButton","HeadlineThreeButton","OrderedListButton","BlockquoteButton","CodeBlockButton","type","disabled","onClick","showIcon","onChange","plugins","Loading","small","RequireConsent","loading","toggleConsentRequirement","checkedChildren","CheckOutlined","unCheckedChildren","CloseOutlined","checked","AcceptList","loaded","students","enabled","accepted","isAccepted","userID","includes","StudentController","DataMartController","acceptList","filter","x","map","accept_list","val","e","length","Math","round","Swal","input","inputAttributes","autocapitalize","showCancelButton","confirmButtonText","showLoaderOnConfirm","preConfirm","percentage","_p","parseInt","allowOutsideClick","result","isConfirmed","value","n","ceil","_a","sort","random","slice","s","list","style","opacity","a","b","localeCompare","student","md","lg","xl","PeerGroups","size","inputSize","inputEnabled","buttonText","updatePeerGroups","personalized","personalized_peers","min_size","direction","min","Settings","width"],"sourceRoot":""}