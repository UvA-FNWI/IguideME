{"version":3,"file":"static/js/266.33eb87f0.chunk.js","mappings":"0IAAO,IAAMA,EAAmB,CAAC,iBAAkB,YAAa,UAAW,K,0UCyBrEC,GAAYC,EAAAA,EAAAA,KAJD,SAACC,GAAgB,MAAM,CACpCC,KAAMD,EAAMC,KACf,IAOKC,EAAS,qGA6EV,OA7EU,8BAEX,WACI,IAAQD,EAASE,KAAKC,MAAdH,KAER,OACI,iBAAKI,GAAI,YAAY,WACjB,iBAAKA,GAAI,OAAO,WACZ,wBAAKJ,EAAOA,EAAKK,KAAO,wBACxB,+BAAQ,SAACC,EAAA,EAAY,IAAG,qBAG5B,UAAC,IAAI,CAACC,aAAc,CAACL,KAAKC,MAAMK,SAAS,WACrC,SAAC,SAAS,CAAkBC,MAAM,SAACC,EAAA,EAAgB,IAAI,UACnD,SAAC,KAAI,CAACC,GAAI,SAAS,SAAC,cADR,aAMhB,SAAC,SAAS,CAAeF,MAAM,SAACG,EAAA,EAAgB,IAAI,UAChD,SAAC,KAAI,CAACD,GAAI,eAAe,SAAC,WADd,UAMhB,SAAC,SAAS,CAAmBF,MAAM,SAACI,EAAA,EAAc,IAAI,UAClD,SAAC,KAAI,CAACF,GAAI,mBAAmB,SAAC,eADlB,cAMhB,SAAC,SAAS,CAAyBF,MAAM,SAACK,EAAA,EAAY,IAAI,UACtD,SAAC,KAAI,CAACH,GAAI,0BAA0B,SAAC,sBADzB,oBAKhB,UAAC,YAAY,CAAiBF,MAAM,SAACM,EAAA,EAAc,IAAKC,MAAO,SAAS,WAOpE,SAAC,SAAS,CAAwBP,MAAM,SAACQ,EAAA,EAA4B,IAAI,UACrE,SAAC,KAAI,CAACN,GAAI,yBAAyB,SAAC,eADxB,mBAKhB,SAAC,SAAS,CAAuBF,MAAM,SAACS,EAAA,EAAgB,IAAI,UACxD,SAAC,KAAI,CAACP,GAAI,wBAAwB,SAAC,cADvB,mBAZD,YAkBnB,SAAC,SAAS,CAAoBF,MAAM,SAACU,EAAA,EAAmB,IAAI,UACxD,SAAC,KAAI,CAACR,GAAI,qBAAqB,SAAC,iBADpB,eAUhB,SAAC,SAAS,CAA4BF,MAAM,SAACW,EAAA,EAAoB,IAAI,UACjE,SAAC,KAAI,CAACT,GAAI,6BAA6B,SAAC,yBAD5B,uBAKhB,SAAC,SAAS,CAAkBF,MAAM,SAACY,EAAA,EAAe,IAAI,UAClD,SAAC,KAAI,CAACV,GAAI,kBAAkB,SAAC,cADjB,iBAQhC,KAAC,EA7EU,CAASW,EAAAA,WAgFxB,EAAezB,EAAUI,GCtGnBsB,EAAK,qGAmBR,OAnBQ,8BAET,WACE,MAA6BrB,KAAKC,MAA1BqB,EAAO,EAAPA,QAAShB,EAAO,EAAPA,QACjB,OAAKgB,GAGH,iBAAKpB,GAAI,QAAQ,WACf,SAACqB,EAAA,EAAW,KACZ,UAAC,IAAG,YACF,SAAC,IAAG,CAACC,GAAI,EAAE,UACT,SAAC,EAAS,CAAClB,QAASA,OAEtB,SAAC,IAAG,CAACkB,GAAI,GAAItB,GAAI,UAAWuB,UAAS,UAAkB,aAAZnB,GAA0B,cAAe,SAChFN,KAAKC,MAAMyB,kBAVC,SAAC,KAAQ,CAACjB,GAAI,KAetC,KAAC,EAnBQ,CAASW,EAAAA,WAsBpB,GAAeO,EAAAA,EAAAA,GAAcN,E,mSCtBvBO,EAAUC,EAAS,OA4FZC,EAAa,SAACC,EAAYC,EAAsBC,GAE3D,OAAOD,EAAQE,KAAI,SAAAC,GACjB,IAAMC,EAAIH,EAAYI,QAAO,SAAAC,GAAC,OAAIA,EAAEC,WAAaJ,EAAMjC,EAAE,IACnDsC,EAAmBJ,EAAEF,KAAI,SAAAI,GAAC,OAAIG,WAAWH,EAAEI,MAAM,IAEvD,MAAO,CACLC,UAAWR,EACXrB,MAAOqB,EAAMrB,MACb8B,KAAMR,EAAES,OACRL,OAAQA,EACRM,eAAcf,GAAwB,WAAjBA,EAAKgB,QAC1BC,QAASC,KAAKC,MAA8B,IAAvBtB,EAAQuB,KAAKX,IAAkB,IACpDY,MAAOH,KAAKC,MAA+B,IAAxBtB,EAAQwB,MAAMZ,IAAkB,IACnDa,SAAUJ,KAAKC,MAAkC,IAA3BtB,EAAQyB,SAASb,IAAkB,IAE7D,GACF,E,gCChHqBc,EAAU,qJAMR,OANQ,oCAM7BzD,MAAQ,CAAE0D,MAAO,IAAI,EA8EpB,OA9EoB,8BAErB,WAA2B,IAAD,OACxB,EAA6CvD,KAAKC,MAA1CuD,EAAS,EAATA,UAAWvB,EAAW,EAAXA,YAAawB,EAAQ,EAARA,SACxBF,EAAUvD,KAAKH,MAAf0D,MAER,OAAKC,GAyBH,4BACE,wBAAMA,EAAU1C,SAEhB,UAAC,IAAG,YACF,UAAC,IAAG,CAACU,GAAI,GAAIkC,GAAI,GAAG,WAClB,wBAAI,oBAEJ,2BAAO,0BACP,SAAC,IAAK,CAACC,KAAM,QACNC,MAAOL,EACPM,YAAa,qBACbC,SAAU,SAAAC,GAAC,OAAI,EAAKC,SAAS,CAAET,MAAOQ,EAAEE,OAAOL,OAAQ,KAG9D,SAAC,IAAK,CAACM,QAAS,CACd,CAAEpD,MAAO,OAAQqD,UAAW,eAAgBC,IAAK,gBACjD,CAAEtD,MAAO,aAAcqD,UAAW,aAAcC,IAAK,cACrD,CAAEtD,MAAO,QAASqD,UAAW,QAASC,IAAK,UAEtCC,WAAYpC,EAAYI,QACtB,SAAAD,GACE,IAAMkC,EAAUb,EAASc,MAAK,SAAAC,GAAE,OAAIpC,EAAEqC,SAAWD,EAAGC,MAAM,IAC1D,QAAOH,IACLA,EAAQnE,KAAKuE,cAAcC,SAASpB,EAAMmB,gBACxCJ,EAAQG,OAAOC,cAAcC,SAASpB,EAAMmB,eAElD,IACAE,MACA,SAACC,EAAGC,GAAC,OAAKrC,WAAWqC,EAAEpC,OAASD,WAAWoC,EAAEnC,MAAM,IACnDR,KAAI,SAACE,EAAG2C,GACR,IAAMT,EAAUb,EAASc,MAAK,SAAAC,GAAE,OAAIpC,EAAEqC,SAAWD,EAAGC,MAAM,IACzD,MAAO,CACLL,IAAKW,EACLC,aAAcV,EAAUA,EAAQnE,KAAO,MACvC8E,WAAYX,EAAUA,EAAQG,OAAS,MACvC/B,MAAON,EAAEM,MAEd,UAIT,SAAC,IAAG,CAAClB,GAAI,GAAIkC,GAAI,UAlEA,IAwEzB,KAAC,EApF4B,CAAStC,EAAAA,WCGnB8D,EAAe,qJAKjC,OALiC,oCAElCrF,MAAQ,CACNsF,YAAY,EACZC,eAAWC,GACZ,EA6BA,OA7BA,8BAED,WAA2B,IFLFC,EAAmCC,EEKlC,OACxB,EAGYvF,KAAKH,MAFfsF,EAAU,EAAVA,WACAC,EAAS,EAATA,UAGF,EAAiDpF,KAAKC,MAA9C8B,EAAI,EAAJA,KAAMC,EAAO,EAAPA,QAASC,EAAW,EAAXA,YAAawB,EAAQ,EAARA,SAEpC,OACE,iBAAKhC,UAAW,kBAAkB,WAChC,UAAC,IAAM,CAAC+D,MAAO,OAAQC,QAASN,GAAcC,EAAWM,QAAS,kBAAM,EAAK1B,SAAS,CAAEmB,YAAY,GAAQ,EAAC,UACzG1B,EAASZ,OAAQ,aACnB,SAACS,EAAU,CAACE,UAAW4B,EACX3B,SAAUA,EACVxB,YAAaA,EAAYI,QAAO,SAAAD,GAAC,OAAIA,EAAEG,cAAc6C,GAAaA,EAAyBlF,GAAW,UAIpH,wBAAI,sBACJ,SAAC,IAAK,CAACgE,SFxBYoB,EEwBQ,SAACnD,GACnB,EAAK6B,SAAS,CAAEmB,YAAY,EAAMC,UAAWjD,GAC/C,EF1B+CoD,EE0B5C,kBAAM,EAAKtF,MAAMsF,QAAQ,EFzBlC,CACL,CACEzE,MAAO,cACPqD,UAAW,QACXC,IAAK,SAEP,CACEtD,MAAO,OACPqD,UAAW,OACXC,IAAK,QAEP,CACEtD,MAAO,UACPqD,UAAW,UACXC,IAAK,WAEP,CACEtD,MAAO,WACPqD,UAAW,QACXC,IAAK,SAEP,CACEtD,MAAO,WACPqD,UAAW,WACXC,IAAK,WACLuB,OAAQ,SAAC/B,GACP,OAAOgC,MAAMhC,GAAS,IAAMA,CAC9B,GAEF,CACE4B,MAAO,IACP1E,MAAO,SACP6E,OAAQ,SAAC/B,EAAOiC,GACd,OAAO,SAACC,EAAA,EAAQ,CAACtD,OAAQqD,EAAOrD,OACfuD,OAAQF,EAAO/C,aACfkD,YAAY,EACZC,OAAQ,KAE3B,GAEF,CACEnF,MAAO,UACP6E,OAAQ,SAACO,EAAGL,GACV,OACE,UAAC,IAAK,YACJ,SAAC,IAAM,CAACM,QAAS,kBAAMb,EAASO,EAAOlD,UAAU,EAAC,SAAC,eACnD,SAAC,IAAM,CAAClB,UAAW,oBACX0E,QAAS,kBAAMC,IAAAA,KAAU,CACvBtF,MAAO,0CACPuF,KAAK,kBAAD,OAAoBR,EAAO/E,MAAK,gCACpCP,KAAM,UACN+F,aAAa,EACbC,kBAAkB,EAClBC,kBAAmB,SACnBC,iBAAkB,SAClBC,YAAa,CACXC,cAAe,wBACfC,aAAc,0BAEfC,MAAK,SAACC,GACHA,EAAOlD,MACTmD,EAAAA,EAAAA,gBAA+BlB,EAAOlD,UAAUzC,IAAI2G,MAAK,WACvDtB,IACAa,IAAAA,KACE,mBACA,GACA,UAEJ,IACSU,EAAOE,UAAYZ,IAAAA,cAAAA,QAC5BA,IAAAA,KACE,YACA,+BACA,QAGN,GACD,EACF,SACJ,aAKP,KE1DSa,OAAQ,CAAE3E,EAAG,KACb+B,WAAYvC,EAAWC,EAAMC,EAASC,OAInD,KAAC,EAlCiC,CAASb,EAAAA,W,2CCJxB8F,EAAY,qJAO9B,OAP8B,oCAE/BC,cAAgB,WACd,MAA2B,EAAKlH,MAAxBsD,EAAK,EAALA,MAAOe,EAAO,EAAPA,QACf,OAAqB,IAAjBf,EAAMV,QAEHyB,EAAQnE,KAAKuE,cAAcC,SAASpB,EAAMmB,cACnD,EAAC,EAsBA,OAtBA,8BAED,WAA2B,IAAD,OACxB,EAAkC1E,KAAKC,MAA/BqE,EAAO,EAAPA,QAAS8C,EAAa,EAAbA,cAEjB,OACE,SAAC,IAAG,CAAC5F,GAAI,GAAIkC,GAAI,EAAG2D,GAAI,EAAG5F,UAAW,UAAU,UAC9C,SAAC,IAAQ,CACCmC,MAAOU,EAAQG,OACf6C,UAASF,GAAgBA,EAAqB,MAAI,EAClDtD,SAAU,SAAAC,GACR,EAAK9D,MAAMsH,cACTjD,EAAQG,OAAQ,CAACA,OAAQH,EAAQG,OAAQ/B,MAAOqB,EAAEE,OAAOqD,QAAU,EAAI,GAE3E,EAAE,UAEV,kBAAM7F,UAAW,gBAAkBzB,KAAKmH,gBAAkB,YAAc,IAAI,UACxE7C,EAAQnE,KAAM,KAAC,6BAAO,IAAGmE,EAAQG,OAAQ,WAVhCH,EAAQG,SAe7B,KAAC,EA7B8B,CAASrD,EAAAA,WCIrBoG,EAAgB,qJAgBlC,OAhBkC,oCAEnC3H,MAAQ,CACN4H,QAAQ,EAAOlE,MAAO,IACvB,EAQDgE,cAAgB,SAAC9C,EAAgBiD,GAC/B,EAAKzH,MAAM0H,QAAQ,GAAD,eACZ,EAAK1H,MAAM2H,KAAKvF,QAAO,SAAAwF,GAAC,OAAIA,EAAEpD,SAAWA,CAAM,KAAC,CAAEiD,IAE1D,EAAC,EAqDA,OArDA,yCAVD,WAA2B,IAAD,OACxBI,EAAAA,EAAAA,cAAgCjB,MAAK,SAAApD,GAAQ,OAC3C,EAAKO,SAAS,CAAEP,SAAAA,EAAUgE,QAAQ,GAAO,GAE7C,GAAC,oBAQD,WAA2B,IAAD,OACxB,EAA0BzH,KAAKH,MAAvB4H,EAAM,EAANA,OAAQlE,EAAK,EAALA,MAChB,EAA2BvD,KAAKC,MAAxB2H,EAAI,EAAJA,KAAMnE,EAAQ,EAARA,SAEd,OAAKgE,GAGH,iBAAKvH,GAAI,mBAAmB,WAC1B,UAAC,IAAG,CAAC6H,OAAQ,CAAC,GAAI,IAAI,WACpB,SAAC,IAAG,CAACvG,GAAI,GAAIkC,GAAI,GAAG,UAClB,SAAC,IAAQ,CAACsE,cAAeJ,EAAKvF,QAAO,SAAAwF,GAAC,OAAIA,EAAEnF,MAAQ,CAAC,IAAEG,SAAWY,EAASZ,QAAU+E,EAAKvF,QAAO,SAAAwF,GAAC,OAAIA,EAAEnF,MAAQ,CAAC,IAAEG,OAAS,EAClHiB,SAAU,WACJ8D,EAAKvF,QAAO,SAAAwF,GAAC,OAAIA,EAAEnF,MAAQ,CAAC,IAAEG,OAASY,EAASZ,OAClD,EAAK5C,MAAM0H,QAAQlE,EAASvB,KAAI,SAAAE,GAAC,MAAK,CAACqC,OAAQrC,EAAEqC,OAAQ/B,MAAO,EAAE,KAElE,EAAKzC,MAAM0H,QAAQlE,EAASvB,KAAI,SAAAE,GAAC,MAAK,CAACqC,OAAQrC,EAAEqC,OAAQ/B,MAAO,EAAE,IAEtE,EACA4E,QAASM,EAAKvF,QAAO,SAAAwF,GAAC,OAAIA,EAAEnF,MAAQ,CAAC,IAAEG,SAAWY,EAASZ,OAAO,UAC1E,iBAAMoF,MAAO,CAACC,MAAO,SAAS,SAAC,mBAInC,SAAC,IAAG,CAAC1G,GAAI,GAAIkC,GAAI,GAAG,UAClB,gBAAKuE,MAAO,CAACE,MAAO,QAASC,QAAS,gBAAgB,UAClD,4BACIR,EAAKvF,QAAO,SAAAwF,GAAC,OAAIA,EAAEnF,MAAQ,CAAC,IAAEG,OAAQ,KAAC,6BAAO,KAAGY,EAASZ,OAAO,UAChEI,KAAKC,MAAO0E,EAAKvF,QAAO,SAAAwF,GAAC,OAAIA,EAAEnF,MAAQ,CAAC,IAAEG,OAASY,EAASZ,OAAU,KAAK,mBAMxF,SAAC,IAAK,CAACgB,YAAa,uBACbwE,aAAc,MACdC,YAAa,MACbxE,SAAU,SAACC,GAAC,OAAK,EAAKC,SAAS,CAAET,MAAOQ,EAAEE,OAAOL,OAAQ,EACzDA,MAAOL,KAEd,SAAC,IAAG,UACAE,EAASvB,KAAI,SAAAE,GAAC,OACd,SAAC8E,EAAY,CAAC5C,QAASlC,EACTmB,MAAOA,EACPgE,cAAe,EAAKA,cACpBH,cAAeQ,EAAKrD,MAAK,SAAAsD,GAAC,OAAIA,EAAEpD,SAAWrC,EAAEqC,MAAM,KAC/D,UAzCU,SAAC8D,EAAA,EAAO,CAACC,OAAO,GA+CtC,KAAC,EArEkC,CAASpH,EAAAA,W,gECHzB8F,EAAY,qJAM9B,OAN8B,oCAE/BrH,MAAQ,CACN4I,UAAU,EACVrE,IAAK,GACLR,MAAO,IACR,EAkGA,OAlGA,8BAED,WAA2B,IAAD,OACxB,EAAmC5D,KAAKC,MAAhCqE,EAAO,EAAPA,QAAS8C,EAAa,EAAbA,cACjB,EAAiCpH,KAAKH,MAA9B4I,EAAQ,EAARA,SAAUrE,EAAG,EAAHA,IAAKR,EAAK,EAALA,MAEjB8E,EAAWtB,EACfuB,OAAOC,KAAKxB,GAAe/E,QAAO,SAAAwG,GAAC,OAAK,CAAC,SAAU,SAASlE,SAASkE,EAAE,IACvE,GAEF,OACE,SAAC,IAAG,CAACrH,GAAI,GAAIkC,GAAI,GAAG,UAClB,gBAAKuE,MAAO,CAACa,QAAS,GAAIC,OAAQ,qBAAqB,UACrD,UAAC,IAAG,CAAChB,OAAQ,CAAC,GAAI,IAAI,WACpB,SAAC,IAAG,CAACvG,GAAI,GAAIkC,GAAI,GAAG,UAClB,4BAAUY,EAAQnE,UAEpB,SAAC,IAAG,CAACqB,GAAI,GAAIkC,GAAI,EAAE,UACjB,SAAC,IAAW,CAACC,KAAK,QACLqF,IAAK,EACLC,IAAK,GACLnF,SAAU,SAACC,GACT,EAAK9D,MAAMsH,cACTjD,EAAQG,QAAO,kBAAK2C,GAAa,IAAE3C,OAAQH,EAAQG,OAAQ/B,MAAOqB,IAEtE,EACAH,MAAOwD,EAAgBA,EAAqB,WAAI/B,OAG/D,SAAC,IAAG,CAAC7D,GAAI,GAAG,UACV,iBAAKC,UAAW,iBAAiB,WAC/B,SAAC,IAAM,CAAClB,KAAMkI,GAAW,SAACS,EAAA,EAAU,KAAM,SAACC,EAAA,EAAY,IAC/CxF,KAAM,QACNyF,MAAO,SACPjD,QAAS,kBAAM,EAAKnC,SAAS,CAAEyE,UAAWA,GAAW,EACrDR,MAAO,CAACE,MAAO,YACvB,2BAAO,qBACP,kBAECM,IACC,UAAC,WAAc,YACb,yBACIC,EAAS9D,MAAK,SAACC,EAAGC,GAAC,OAAKD,EAAEwE,cAAcvE,EAAE,IAAE5C,KAAI,SAAA2G,GAAC,OACjD,4BACE,SAAC,IAAM,CAACtI,MAAM,SAAC+I,EAAA,EAAc,IACrB3F,KAAM,QACNsE,MAAO,CAACC,MAAO,WACfqB,KAAM,OACNpD,QAAS,WACP,IAAIuB,EAAS8B,KAAKC,MAAMD,KAAKE,UAAUtC,WAChCM,EAAOmB,GACd,EAAK5I,MAAMsH,cACTjD,EAAQG,OAAOiD,EAEnB,IAEPmB,EAAE,KAAGzB,EAAcyB,KAChB,OAGV,0BACE,UAAC,IAAG,CAACd,OAAQ,CAAC,GAAI,IAAI,WACpB,SAAC,IAAG,CAACvG,GAAI,GAAG,UACV,SAAC,IAAK,CAACqC,YAAa,MACbC,SAAU,SAAAC,GAAC,OAAI,EAAKC,SAAS,CAAEI,IAAKL,EAAEE,OAAOL,OAAQ,EACrDA,MAAOQ,OAEhB,SAAC,IAAG,CAAC5C,GAAI,GAAG,UACV,SAAC,IAAK,CAACqC,YAAa,QACbC,SAAU,SAAAC,GAAC,OAAI,EAAKC,SAAS,CAAEJ,MAAOG,EAAEE,OAAOL,OAAQ,EACvDA,MAAOA,OAEhB,SAAC,IAAG,CAACpC,GAAI,EAAE,UACT,SAAC,IAAM,CAAC+H,KAAM,UACNI,OAAK,EACLC,SAAyB,IAAfxF,EAAIvB,QAAiC,IAAjBe,EAAMf,OACpCsD,QAAS,WAAO,IAAD,EACb,EAAKlG,MAAMsH,cACTjD,EAAQG,QAAO,kBACX2C,GAAa,mBACdhD,EAAMR,IAAK,kBACJU,EAAQG,QAAM,KAE1B,EAAKT,SAAS,CAAEI,IAAK,GAAIR,MAAO,IAClC,EAAE,SAAC,6BAcnC,KAAC,EAxG8B,CAASxC,EAAAA,WCGrByI,EAAiB,qJAenC,OAfmC,oCACpChK,MAAQ,CACN4D,SAAU,GAAIgE,QAAQ,GACvB,EAQDF,cAAgB,SAAC9C,EAAgBiD,GAC/B,EAAKzH,MAAM0H,QAAQ,GAAD,eACZ,EAAK1H,MAAM2H,KAAKvF,QAAO,SAAAwF,GAAC,OAAIA,EAAEpD,SAAWA,CAAM,KAAC,CAAEiD,IAE1D,EAAC,EAoBA,OApBA,yCAVD,WAA2B,IAAD,OACxBI,EAAAA,EAAAA,cAAgCjB,MAAK,SAAApD,GAAQ,OAC3C,EAAKO,SAAS,CAAEP,SAAAA,EAAUgE,QAAQ,GAAO,GAE7C,GAAC,oBAQD,WAA2B,IAAD,OAChBA,EAAWzH,KAAKH,MAAhB4H,OACR,EAA2BzH,KAAKC,MAAxBwD,EAAQ,EAARA,SAAUmE,EAAI,EAAJA,KAElB,OAAKH,GAGH,gBAAKvH,GAAI,oBAAoB,UAC3B,SAAC,IAAG,CAAC6H,OAAQ,CAAC,GAAI,IAAKE,MAAO,CAAC6B,OAAQ,UAAU,SAC9CrG,EAASvB,KAAI,SAAAE,GAAC,OACd,SAAC,EAAY,CACCkC,QAASlC,EACTmF,cAAe,EAAKA,cACpBH,cAAeQ,EAAKrD,MAAK,SAAAsD,GAAC,OAAIA,EAAEpD,SAAWrC,EAAEqC,MAAM,KAH9CrC,EAAEqC,OAInB,SAVW,SAAC8D,EAAA,EAAO,CAACC,OAAO,GActC,KAAC,EAnCmC,CAASpH,EAAAA,W,oDCL1B2I,EAAsB,qGAaxC,OAbwC,yCAEzC,SAAoBnC,GAClB,KAAO,UAAWA,EAAK,IACvB,OAAO,EAEP,IAAK,IAAI7C,EAAI,EAAGA,EAAIrF,EAAAA,EAAAA,OAAyBqF,IAC3C,GAAIrF,EAAAA,EAAiBqF,KAAM6C,EAAK,GAC9B,OAAO,EAIX,OAAO,CACT,KAAC,EAbwC,CAASoC,EAAAA,G,UCS/BC,EAAa,qJAgD/B,OAhD+B,oCAEhCpK,MAAQ,CACN4H,QAAQ,EACRyC,WAAW,EACXzG,SAAU,GACVmE,KAAM,GACN9G,MAAO,IACR,EAUDqJ,iBAAmB,SAACvC,GACbmC,EAAuBK,aAAaxC,GAKzC,EAAK5D,SAAS,CAAE4D,KAAAA,IAJdyC,EAAAA,GAAAA,MAAc,gBAKlB,EAAC,EAEDC,OAAS,WACP,IAAQvI,EAAS,EAAK9B,MAAd8B,KACR,EAAwB,EAAKlC,MAArB+H,EAAI,EAAJA,KAAM9G,EAAK,EAALA,MAEd,EAAKkD,SAAS,CAAEkG,WAAW,IAAQ,WACjCnD,EAAAA,EAAAA,gBAA+B,CAC7B7G,IAAK,EACLL,MAAO0K,EAAAA,EAAAA,IACPC,QAASzI,EAAK7B,GACdY,MAAAA,EACAyI,KAAM,eACL1C,MAAK,SAAA1E,GACN4E,EAAAA,EAAAA,WAA0B5E,EAAMjC,GAAI0H,GAAMf,MAAK,WAC7C4D,YAAW,WACTJ,EAAAA,GAAAA,QAAgB,kBAChB,EAAKpK,MAAMyK,kBACX,EAAKzK,MAAMsF,QACb,GAAG,IACL,GACF,GACF,GACF,EAAC,EAqEA,OArEA,yCAtCD,WAA2B,IAAD,OACxBuC,EAAAA,EAAAA,cAAgCjB,MAAK,SAAApD,GAAQ,OAC3C,EAAKO,SAAS,CACZP,SAAUA,EAASmB,MAAK,SAACC,EAAGC,GAAC,OAAKD,EAAE1E,KAAKkJ,cAAcvE,EAAE3E,KAAK,IAC9DsH,QAAQ,GAAO,GAErB,GAAC,oBAkCD,WAA2B,IAAD,OAChB1F,EAAS/B,KAAKC,MAAd8B,KACR,EAA6C/B,KAAKH,MAA1C4D,EAAQ,EAARA,SAAUmE,EAAI,EAAJA,KAAM9G,EAAK,EAALA,MAAOoJ,EAAS,EAATA,UAE/B,OACE,iBAAKhK,GAAI,gBAAgB,WACvB,UAAC,IAAK,CAACyK,UAAW,WAAY1C,MAAO,CAACzC,MAAO,QAAQ,WACnD,UAAC,IAAG,CAACuC,OAAQ,CAAC,GAAI,IAAI,WACpB,UAAC,IAAG,CAACvG,GAAI,EAAE,WACT,2BAAO,iBAAmB,mBAC1B,mBACEC,UAAW,eACXwG,MAAO,CAAEhC,OAAQ,eAAe,UACjC,6BAEC,SAAC,IAAS,CAAC2E,aAAc,SAAChD,GAAI,OAAK,EAAKuC,iBAAiBvC,EAAK,EACnDiD,WAAY,CAAEzC,QAAS,QACvB0C,QAAS,kBAAMC,MAAM,QAAQ,EAC7BC,cAAe,CACbC,QAAQ,EACRC,eAAe,EACfC,gBAAgB,EAChBC,gBAAiB,SAACH,GAAW,OAC3BA,EACGvG,cACA2G,QAAQ,MAAO,IAAI,YAKzC,UAAC,IAAG,CAAC7J,GAAI,GAAG,WACV,2BAAO,iBACP,SAAC,IAAK,CAACqC,YAAa,QAASD,MAAO9C,EAAOgD,SAAU,SAAAC,GAAC,OAAI,EAAKC,SAAS,CAAElD,MAAOiD,EAAEE,OAAOL,OAAQ,QAEpG,SAAC,IAAG,CAACpC,GAAI,GAAG,UACV,oBAAQtB,GAAI,SAAS,UAAC,wBAAoB,uBAAG,SAAQ,4BAAwB,uBAAG,cAAa,0EAAsE,uBAAG,UAAS,oFAInL,yBACqB,WAAjB6B,EAAKgB,SACL,SAACyE,EAAgB,CAACI,KAAMA,EACND,QAAS,SAAAE,GAAC,OAAI,EAAK7D,SAAS,CAAE4D,KAAMC,GAAI,EACxCpE,SAAUA,KAC5B,SAACoG,EAAiB,CAACjC,KAAMA,EACND,QAAS,SAAAE,GAAC,OAAI,EAAK7D,SAAS,CAAE4D,KAAMC,GAAI,EACxCpE,SAAUA,UAKnC,UAAC,IAAK,YACJ,SAAC,IAAM,CAAC0C,QAASnG,KAAKC,MAAMyK,gBACpBjJ,UAAW,oBAAoB,SACtC,YAID,SAAC,IAAM,CAACA,UAAW,gBACX0E,QAASnG,KAAKsK,OACdgB,QAASpB,EACTN,SAAU9I,EAAM+B,OAAS,EAAE,SAAC,gBAM5C,KAAC,EArH+B,CAASzB,EAAAA,W,WCOrCmK,EAAc,CAClBC,UAAW,kBAAMC,EAAAA,EAAAA,WAAuB,EACxCC,gBAAiB,kBAAMD,EAAAA,EAAAA,iBAA6B,GAGhD9L,IAAYC,E,SAAAA,KAVD,SAACC,GAAgB,MAAM,CACtC8L,MAAO9L,EAAM8L,MACbC,YAAa/L,EAAM+L,YACpB,GAOmCL,GAI9BM,GAAY,qJA2Bf,OA3Be,oCAEhBhM,MAAQ,CACN4H,QAAQ,EACRqE,gBAAgB,EAChBrI,SAAU,GACVxB,YAAa,IACd,EAMDsD,OAAS,WACP,EAAKvB,SAAS,CAAEyD,QAAQ,IAAS,WAC/BK,EAAAA,EAAAA,cAAgCjB,KAAI,yCAAC,WAAMpD,GAAQ,8EACvC,OAAFvD,EAAO,EAAKD,MAAM8B,KAAlB7B,GAAE,SAEyC6G,EAAAA,EAAAA,mBAAkC7G,GAAI,KAAD,EAApF6L,EAAsC,OAE1C,EAAK9L,MAAMuL,YAAY3E,MAAK,WAC1B,EAAK5G,MAAMyL,kBAAkB7E,MAAK,WAChC,EAAK7C,SAAS,CAAE/B,YAAa8J,EAAiBtE,QAAQ,EAAMhE,SAAAA,GAC9D,GACF,IAAG,2CACJ,mDAVmC,GAWtC,GACF,EAAC,EAmCA,OAnCA,yCAlBD,WACEzD,KAAKuF,QACP,GAAC,oBAkBD,WAA2B,IAAD,OACxB,EAAyCvF,KAAKC,MAAtC+L,EAAS,EAATA,UAAWjK,EAAI,EAAJA,KAAM6J,EAAW,EAAXA,YACzB,EAA0D5L,KAAKH,MAAvDiM,EAAc,EAAdA,eAAgBrI,EAAQ,EAARA,SAAUxB,EAAW,EAAXA,YAElC,OAFqD,EAANwF,QAK7C,iBAAKhG,UAAW,gCAAiCwG,MAAO,CAACgE,aAAc,IAAI,WACzE,2BAAI,uBAAKlK,EAAKjB,QAAW,KAAC,SAAC,IAAG,UAAGkL,EAAUlL,WAEzCgL,GACA,SAAC,IAAM,WACL,SAAC7B,EAAa,CAAClI,KAAMA,EACNwD,OAAQvF,KAAKuF,OACbmF,gBAAiB,kBAAM,EAAK1G,SAAS,CAAE8H,gBAAgB,GAAQ,OAGhF,SAAC,IAAM,CAACrK,UAAW,gBACXwG,MAAO,CAACE,MAAO,SACfhC,QAAS,kBAAM,EAAKnC,SAAS,CAAE8H,gBAAgB,GAAO,EAAC,SAC9D,gBAKH,SAAC5G,EAAe,CAACnD,KAAMA,EACNC,QAAS4J,EAAYvJ,QAAO,SAAA0B,GAAC,OAAIA,EAAEyG,UAAYzI,EAAK7B,EAAE,IACtDuD,SAAUA,EACVxB,YAAaA,EACbsD,OAAQvF,KAAKuF,aAzBd,SAACgD,EAAA,EAAO,GA6B9B,KAAC,EA9De,CAASnH,EAAAA,WAiE3B,GAAezB,GAAUkM,ICzFJK,GAAiB,qGAanC,OAbmC,8BACpC,WACE,MAA8BlM,KAAKC,MAA3B0L,EAAK,EAALA,MAAOQ,EAAU,EAAVA,WACf,OACE,yBACIR,EAAMzJ,KAAI,SAAAkK,GAAC,OACX,0BACE,SAAC,GAAY,CAACrK,KAAMqK,EACNJ,UAAWG,EAAW5H,MAAK,SAAA8H,GAAC,OAAIA,EAAEnM,KAAOkM,EAAEE,QAAQ,OAC7D,KAId,KAAC,EAbmC,CAASlL,EAAAA,WCK1BmL,GAAU,qJAEuB,OAFvB,oCAE7B1M,MAAQ,CAAE4H,QAAQ,EAAOkE,MAAO,GAAIQ,WAAY,IAAI,EA0BnD,OA1BmD,yCAEpD,WAA2B,IAAD,OACxBpF,EAAAA,EAAAA,gBAA+BF,MAAK,SAAAsF,GAClCpF,EAAAA,EAAAA,WAA0BF,MAAK,SAAA8E,GAC7B,EAAK3H,SAAS,CAAE2H,MAAAA,EAAOQ,WAAAA,EAAY1E,QAAQ,GAC7C,GACF,GACF,GAAC,oBAED,WACE,MAAsCzH,KAAKH,MAAnC4H,EAAM,EAANA,OAAQkE,EAAK,EAALA,MAAOQ,EAAU,EAAVA,WAEvB,OACE,UAAC9K,EAAA,EAAK,CAACf,QAAS,aAAa,WAC3B,wBAAI,iBACJ,SAAC,IAAO,IAENmH,GACA,SAACyE,GAAiB,CAACP,MAAOA,EAAMtJ,QAAO,SAAC+J,GAAO,MAAgB,kBAAXA,EAAE7C,IAAwB,IAC3D4C,WAAYA,KAE/B,SAAC5D,EAAA,EAAO,CAACC,OAAO,MAIxB,KAAC,EA5B4B,CAASpH,EAAAA,U,kJCLnB0E,EAAQ,qGAoB1B,OApB0B,8BAY3B,WACE,MAA+C9F,KAAKC,MAA5CuC,EAAM,EAANA,OAAQuD,EAAM,EAANA,OAAQE,EAAM,EAANA,OAAQD,EAAU,EAAVA,WAEhC,OACE,0BACE,SAAC,KAAG,CAACC,OAAQA,EAAQ2B,MAAM4E,EAAAA,EAAAA,IAAchK,EAAQuD,GAAS0G,SAASC,EAAAA,EAAAA,IAAc1G,MAGvF,KAAC,EApB0B,CAAS5E,EAAAA,WAAjB0E,EAOZ6G,aAAe,CACpB1G,OAAQ,IACRD,YAAY,E,+HCbT,IAAM4G,EAAiB,SAACpK,GAC7B,MAAO,CACLqK,OAAQrK,EAAOoC,MAAK,SAACC,EAAGC,GAAC,OACvBD,EAAIC,CAAC,IAAE5C,KAAI,SAAAE,GAAC,OAAIA,EAAE0K,UAAU,IAC9BC,SAAU,CACR,CACEC,MAAO,SACPC,YAAa,mBACbC,gBAAiB,yBACjBC,YAAa,EACbvF,KAAMpF,EAAOoC,MAAK,SAACC,EAAGC,GAAC,OACrBD,EAAIC,CAAC,MAIf,EAEa0H,EAAgB,SAAChK,EAAkBuD,GAC9C,MAAO,CACL8G,OAAQ9G,EAAS,CAAC,IAAK,KAAO,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MACjFgH,SAAU,CAAC,CACTC,MAAO,SACPE,gBAAiB,kBACjBtF,KAAM7B,EACJ,CACEvD,EAAOH,QAAO,SAAAD,GAAC,OAAU,IAANA,CAAO,IAAES,OAC5B,GACE,CACJL,EAAOH,QAAO,SAAAD,GAAC,OAAsB,IAAlBa,KAAKmK,MAAMhL,EAAQ,IAAES,OACxCL,EAAOH,QAAO,SAAAD,GAAC,OAAsB,IAAlBa,KAAKmK,MAAMhL,EAAQ,IAAES,OACxCL,EAAOH,QAAO,SAAAD,GAAC,OAAsB,IAAlBa,KAAKmK,MAAMhL,EAAQ,IAAES,OACxCL,EAAOH,QAAO,SAAAD,GAAC,OAAsB,IAAlBa,KAAKmK,MAAMhL,EAAQ,IAAES,OACxCL,EAAOH,QAAO,SAAAD,GAAC,OAAsB,IAAlBa,KAAKmK,MAAMhL,EAAQ,IAAES,OACxCL,EAAOH,QAAO,SAAAD,GAAC,OAAsB,IAAlBa,KAAKmK,MAAMhL,IAAYA,EAAI,GAAG,IAAES,OACnD,EACA,EACA,EACA,EACA,IAED,CACDmK,MAAO,SACPE,gBAAiB,mBACjBtF,KAAM7B,EACJ,CACE,EACAvD,EAAOH,QAAO,SAAAD,GAAC,OAAU,IAANA,CAAO,IAAES,QAC1B,CACJ,EACA,EACA,EACA,EACA,EACAL,EAAOH,QAAO,SAAAD,GAAC,OAAsB,IAAlBa,KAAKmK,MAAMhL,IAAYA,GAAK,GAAG,IAAES,OACpDL,EAAOH,QAAO,SAAAD,GAAC,OAAsB,IAAlBa,KAAKmK,MAAMhL,EAAQ,IAAES,OACxCL,EAAOH,QAAO,SAAAD,GAAC,OAAsB,IAAlBa,KAAKmK,MAAMhL,EAAQ,IAAES,OACxCL,EAAOH,QAAO,SAAAD,GAAC,OAAsB,IAAlBa,KAAKmK,MAAMhL,EAAQ,IAAES,OACxCL,EAAOH,QAAO,SAAAD,GAAC,OAAsB,IAAlBa,KAAKmK,MAAMhL,EAAQ,IAAES,OACxCL,EAAOH,QAAO,SAAAD,GAAC,OAAsB,KAAlBa,KAAKmK,MAAMhL,EAAS,IAAES,UAIjD,EAEawK,EAAiB,WAC5B,MAAO,CACLC,qBAAqB,EACrBC,OAAQ,CACNnF,SAAS,GAEXoF,OAAQ,CACNC,MAAO,CAAC,CACNC,UAAY,CACVtF,SAAU,GAEZuF,MAAO,CACLvF,SAAS,KAGbwF,MAAO,CAAC,CACNC,WAAY,CACVzF,SAAS,EACT0F,YAAa,YAKvB,EAEapB,EAAgB,SAAC1G,GAC5B,MAAO,CACLsH,qBAAqB,EACrBC,OAAQ,CACNnF,SAAS,GAEXoF,OAAQ,CACNC,MAAO,CAAC,CACNC,UAAY,CACVtF,SAAU,GAEZyF,WAAY,CACVzF,QAASpC,EACT8H,YAAa,SAEfC,SAAS,IAEXH,MAAO,CAAC,CACNC,WAAY,CACVzF,QAASpC,EACT8H,YAAa,iBAEfC,SAAS,KAIjB,C","sources":["common/Admin/helpers.tsx","common/Admin/AdminMenu/index.tsx","common/Admin/index.tsx","components/ExternalDataTiles/ExternalTile/HistoricUploads/helpers.tsx","components/ExternalDataTiles/ExternalTile/HistoricUploads/DataViewer/index.tsx","components/ExternalDataTiles/ExternalTile/HistoricUploads/index.tsx","components/upload/UploadManager/UploadBinaryData/StudentEntry/index.tsx","components/upload/UploadManager/UploadBinaryData/index.tsx","components/upload/UploadManager/UploadEntriesData/StudentEntry/index.tsx","components/upload/UploadManager/UploadEntriesData/index.tsx","api/controllers/externalData.ts","components/upload/UploadManager/index.tsx","components/ExternalDataTiles/ExternalTile/index.tsx","components/ExternalDataTiles/index.tsx","common/Admin/sections/DataWizard/index.tsx","components/visuals/GradesOverviewBar/GradeBar/index.tsx","components/visuals/GradesOverviewBar/helpers.ts"],"sourcesContent":["export const studentIdStrings = [\"studentloginid\", \"studentid\", \"student\", \"id\"]","import React, { Component } from \"react\";\nimport {\n    AppstoreOutlined,\n    ControlOutlined,\n    CloudUploadOutlined,\n    // ClusterOutlined,\n    DotChartOutlined,\n    FundProjectionScreenOutlined,\n    LaptopOutlined,\n    TrophyOutlined,\n    NotificationOutlined,\n    DatabaseOutlined,\n    UserOutlined,\n    TeamOutlined\n} from \"@ant-design/icons\";\nimport { Menu } from \"antd\";\nimport { Link } from \"react-router-dom\";\nimport \"./style.scss\";\nimport { RootState } from \"../../../store\";\nimport { connect, ConnectedProps } from \"react-redux\";\n\nconst mapState = (state: RootState) => ({\n    user: state.user\n});\n\nconst connector = connect(mapState)\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\ntype Props = { menuKey: string } & PropsFromRedux;\n\nclass AdminMenu extends Component<Props> {\n\n    render(): React.ReactNode {\n        const { user } = this.props;\n\n        return (\n            <div id={\"adminMenu\"}>\n                <div id={\"user\"}>\n                    <h3>{user ? user.name : \"Loading profile...\"}</h3>\n                    <strong><UserOutlined /> Instructor</strong>\n                </div>\n\n                <Menu selectedKeys={[this.props.menuKey]}>\n                    <Menu.Item key={\"datamart\"} icon={<DatabaseOutlined />}>\n                        <Link to={'/admin'}>\n                            Datamart\n                        </Link>\n                    </Menu.Item>\n\n                    <Menu.Item key={\"tiles\"} icon={<AppstoreOutlined />}>\n                        <Link to={'/admin/tiles'}>\n                            Tiles\n                        </Link>\n                    </Menu.Item>\n\n                    <Menu.Item key={\"dashboard\"} icon={<LaptopOutlined />}>\n                        <Link to={'/admin/dashboard'}>\n                            Dashboard\n                        </Link>\n                    </Menu.Item>\n\n                    <Menu.Item key={\"studentOverview\"} icon={<TeamOutlined />}>\n                        <Link to={'/admin/student-overview'}>\n                            Student Overview\n                        </Link>\n                    </Menu.Item>\n                    <Menu.SubMenu key={\"submenu\"} icon={<TrophyOutlined />} title={\"Grades\"}>\n                        {/* TODO: completely remove oldpredictor from code */}\n                        {/* <Menu.Item key={\"gradePredictorOld\"} icon={<FundProjectionScreenOutlined />}>\n                            <Link to={'/admin/grade-predictor-old'}>\n                                Old Predictor\n                            </Link>\n                        </Menu.Item> */}\n                        <Menu.Item key={\"gradePredictor\"} icon={<FundProjectionScreenOutlined />}>\n                            <Link to={'/admin/grade-predictor'}>\n                                Predictor\n                            </Link>\n                        </Menu.Item>\n                        <Menu.Item key={\"gradeAnalyzer\"} icon={<DotChartOutlined />}>\n                            <Link to={'/admin/grade-analyzer'}>\n                                Analyzer\n                            </Link>\n                        </Menu.Item>\n                    </Menu.SubMenu>\n                    <Menu.Item key={\"dataWizard\"} icon={<CloudUploadOutlined />}>\n                        <Link to={'/admin/data-wizard'}>\n                            Data Wizard\n                        </Link>\n                    </Menu.Item>\n                    {/* <Menu.Item key={\"analytics\"} icon={<ClusterOutlined />}>\n                        <Link to={'/admin/analytics'}>\n                            Analytics\n                        </Link>\n                    </Menu.Item> */}\n                    <Menu.Item key={\"notificationCentre\"} icon={<NotificationOutlined />}>\n                        <Link to={'/admin/notification-centre'}>\n                            Notification Centre\n                        </Link>\n                    </Menu.Item>\n                    <Menu.Item key={\"settings\"} icon={<ControlOutlined />}>\n                        <Link to={'/admin/settings'}>\n                            Settings\n                        </Link>\n                    </Menu.Item>\n                </Menu>\n            </div>\n        )\n    }\n}\n\nexport default connector(AdminMenu);\n","import React, { Component } from \"react\";\nimport { withAdminRole } from \"../../hoc/withAdminRole\";\nimport AdminHeader from \"../../containers/AdminHeader\";\nimport { Redirect } from \"react-router-dom\";\nimport { Col, Row } from \"antd\";\nimport AdminMenu from \"./AdminMenu\";\nimport \"./style.scss\";\n\nclass Admin extends Component<any> {\n\n  render(): React.ReactNode {\n    const { isAdmin, menuKey } = this.props;\n    if (!isAdmin) return (<Redirect to={'/'} />);\n\n    return (\n      <div id={\"admin\"}>\n        <AdminHeader />\n        <Row>\n          <Col xs={4}>\n            <AdminMenu menuKey={menuKey} />\n          </Col>\n          <Col xs={20} id={'wrapper'} className={`${ menuKey !== \"settings\" && \"noOverflow\"}`}>\n            { this.props.children }\n          </Col>\n        </Row>\n      </div>\n    )\n  }\n}\n\nexport default withAdminRole(Admin);","import React from \"react\";\nimport {ColumnsType} from \"antd/lib/table\";\nimport {Tile, TileEntry, TileEntrySubmission} from \"../../../../models/app/Tile\";\nimport GradeBar from \"../../../visuals/GradesOverviewBar/GradeBar\";\nimport {Button, Space} from \"antd\";\nimport Swal from 'sweetalert2';\nimport TileController from \"../../../../api/controllers/tile\";\n\nconst compute = require( 'compute.io' );\n\nexport const getColumns = (viewData: (obj: TileEntry) => any, reload: () => any): ColumnsType<object> => {\n  return [\n    {\n      title: 'Source name',\n      dataIndex: 'title',\n      key: 'title',\n    },\n    {\n      title: 'Rows',\n      dataIndex: 'rows',\n      key: 'rows',\n    },\n    {\n      title: 'Average',\n      dataIndex: 'average',\n      key: 'average',\n    },\n    {\n      title: 'Std. dev',\n      dataIndex: 'stdev',\n      key: 'stdev',\n    },\n    {\n      title: 'Skewness',\n      dataIndex: 'skewness',\n      key: 'skewness',\n      render: (value) => {\n        return isNaN(value) ? \"0\" : value;\n      }\n    },\n    {\n      width: 200,\n      title: 'Scores',\n      render: (value, object: any) => {\n        return <GradeBar grades={object.grades}\n                         binary={object.binaryGrades}\n                         withLegend={false}\n                         height={100}\n        />\n      }\n    },\n    {\n      title: 'Actions',\n      render: (_, object: any) => {\n        return (\n          <Space>\n            <Button onClick={() => viewData(object._rawEntry)}>View Data</Button>\n            <Button className={\"dangerButtonStyle\"}\n                    onClick={() => Swal.fire({\n                      title: 'Do you really want to delete this data?',\n                      text: `All data from \"${object.title}\" will be lost indefinitely!`,\n                      icon: 'warning',\n                      focusCancel: true,\n                      showCancelButton: true,\n                      confirmButtonText: 'Delete',\n                      cancelButtonText: 'Cancel',\n                      customClass: {\n                        confirmButton: 'historicUploadConfirm',\n                        cancelButton: 'historicUploadCancel',\n                      }\n                    }).then((result) => {\n                      if (result.value) {\n                        TileController.deleteTileEntry(object._rawEntry.id).then(() => {\n                          reload();\n                          Swal.fire(\n                            'Entries deleted!',\n                            '',\n                            'success',\n                          );\n                        });\n                      } else if (result.dismiss === Swal.DismissReason.cancel) {\n                        Swal.fire(\n                          'Cancelled',\n                          'The data has been preserved!',\n                          'error'\n                        )\n                      }\n                    }\n                  )\n                }\n            >\n              Delete\n            </Button>\n          </Space>\n        )\n      }\n    },\n  ]\n}\n\nexport const formatData = (tile: Tile, entries: TileEntry[], submissions: TileEntrySubmission[]): any => {\n\n  return entries.map(entry => {\n    const s = submissions.filter(x => x.entry_id === entry.id);\n    const grades: number[] = s.map(x => parseFloat(x.grade));\n\n    return {\n      _rawEntry: entry,\n      title: entry.title,\n      rows: s.length,\n      grades: grades,\n      binaryGrades: tile ? tile.content === \"BINARY\" : false,\n      average: Math.round((compute.mean(grades) * 100)) / 100,\n      stdev: Math.round((compute.stdev(grades) * 100)) / 100,\n      skewness: Math.round((compute.skewness(grades) * 100)) / 100,\n    }\n  });\n}","import React, { Component } from \"react\";\nimport {TileEntry, TileEntrySubmission} from \"../../../../../models/app/Tile\";\nimport {CanvasStudent} from \"../../../../../models/canvas/Student\";\nimport {Col, Input, Row, Table} from \"antd\";\n\nexport default class DataViewer extends Component<{\n  tileEntry: TileEntry | undefined,\n  submissions: TileEntrySubmission[],\n  students: CanvasStudent[]\n}, { query: string }> {\n\n  state = { query: \"\" }\n\n  render(): React.ReactNode {\n    const { tileEntry, submissions, students } = this.props;\n    const { query } = this.state;\n\n    if (!tileEntry) return null;\n\n    // console.log(students);\n    // console.log(\"submissiions\", submissions);\n    // console.log(\"data\", submissions.filter(\n    //   s => {\n    //     const student = students.find(st => s.user_login_id === st.login_id);\n    //     return student ? (\n    //       student.name.toLowerCase().includes(query.toLowerCase()) ||\n    //       student.login_id.toLowerCase().includes(query.toLowerCase())\n    //     ) : false\n    //   }\n    // ).sort(\n    //   (a, b) => parseFloat(b.grade) - parseFloat(a.grade)\n    // ).map((s, i) => {\n    //   const student = students.find(st => s.user_login_id === st.login_id);\n    //   return {\n    //     key: i,\n    //     student_name: student ? student.name : \"???\",\n    //     student_id: student ? student.login_id : \"???\",\n    //     grade: s.grade\n    //   }\n    // }));\n\n    return (\n      <div>\n        <h1>{ tileEntry.title }</h1>\n\n        <Row>\n          <Col xs={24} md={12}>\n            <h2>Student Grades</h2>\n\n            <label>Find student by name</label>\n            <Input size={\"large\"}\n                   value={query}\n                   placeholder={\"Student name or id\"}\n                   onChange={e => this.setState({ query: e.target.value })}\n            />\n\n            <Table columns={[\n              { title: 'Name', dataIndex: 'student_name', key: 'student_name' },\n              { title: 'Student ID', dataIndex: 'student_id', key: 'student_id' },\n              { title: 'Grade', dataIndex: 'grade', key: 'grade' }\n            ]}\n                   dataSource={submissions.filter(\n                     s => {\n                       const student = students.find(st => s.userID === st.userID);\n                       return student ? (\n                         student.name.toLowerCase().includes(query.toLowerCase()) ||\n                           student.userID.toLowerCase().includes(query.toLowerCase())\n                       ) : false\n                     }\n                   ).sort(\n                     (a, b) => parseFloat(b.grade) - parseFloat(a.grade)\n                   ).map((s, i) => {\n                     const student = students.find(st => s.userID === st.userID);\n                      return {\n                        key: i,\n                        student_name: student ? student.name : \"???\",\n                        student_id: student ? student.userID : \"???\",\n                        grade: s.grade\n                      }\n                   })}\n            />\n          </Col>\n\n          <Col xs={24} md={8}>\n\n          </Col>\n        </Row>\n      </div>\n    )\n  }\n}\n","import React, { Component } from \"react\";\nimport {IProps, IState} from \"./types\";\nimport {Table, Drawer} from \"antd\";\nimport {formatData, getColumns} from \"./helpers\";\nimport {TileEntry} from \"../../../../models/app/Tile\";\nimport \"./style.scss\";\nimport DataViewer from \"./DataViewer\";\n\nexport default class HistoricUploads extends Component<IProps, IState> {\n\n  state = {\n    drawerOpen: false,\n    openEntry: undefined,\n  }\n\n  render(): React.ReactNode {\n    const {\n      drawerOpen,\n      openEntry,\n    }: IState = this.state;\n\n    const { tile, entries, submissions, students } = this.props;\n\n    return (\n      <div className={\"historicUploads\"}>\n        <Drawer width={'100%'} visible={drawerOpen && openEntry} onClose={() => this.setState({ drawerOpen: false })}>\n          { students.length } students\n          <DataViewer tileEntry={openEntry}\n                      students={students}\n                      submissions={submissions.filter(s => s.entry_id === (openEntry ? (openEntry as TileEntry)!.id : false))}\n          />\n        </Drawer>\n\n        <h3>Historic Uploads</h3>\n        <Table columns={getColumns((entry: TileEntry) => {\n                 this.setState({ drawerOpen: true, openEntry: entry })\n               }, () => this.props.reload())}\n               scroll={{ x: 1000 }}\n               dataSource={formatData(tile, entries, submissions)}\n        />\n      </div>\n    );\n  }\n}","import React, { Component } from \"react\";\nimport {Checkbox, Col} from \"antd\";\nimport {IProps} from \"./types\";\n\nexport default class StudentEntry extends Component<IProps> {\n\n  isHighlighted = () => {\n    const { query, student } = this.props;\n    if (query.length === 0) return false;\n\n    return student.name.toLowerCase().includes(query.toLowerCase());\n  }\n\n  render(): React.ReactNode {\n    const { student, studentRecord} = this.props;\n\n    return (\n      <Col xs={12} md={8} lg={6} className={\"student\"}>\n        <Checkbox key={student.userID}\n                  value={student.userID}\n                  checked={studentRecord ? studentRecord['grade'] > 0 : false}\n                  onChange={e => {\n                    this.props.updateStudent(\n                      student.userID, {userID: student.userID, grade: e.target.checked ? 1 : 0 }\n                    );\n                  }}\n        >\n          <span className={\"studentName \" + (this.isHighlighted() ? \"highlight\" : \"\")}>\n            { student.name } <small>({ student.userID })</small>\n          </span>\n        </Checkbox>\n      </Col>\n    )\n  }\n}\n","import React, { Component } from \"react\";\nimport StudentController from \"../../../../api/controllers/student\";\nimport {Checkbox, Col, Input, Row} from 'antd';\nimport Loading from \"../../../utils/Loading\";\nimport {IUploadProps} from \"../types\";\nimport \"./style.scss\";\nimport StudentEntry from \"./StudentEntry\";\n\nexport default class UploadBinaryData extends Component<IUploadProps> {\n\n  state = {\n    loaded: false, query: \"\"\n  }\n\n  componentDidMount(): void {\n    StudentController.getStudents().then(students =>\n      this.setState({ students, loaded: true })\n    );\n  }\n\n  updateStudent = (userID: string, record: any) => {\n    this.props.setData(\n      [...this.props.data.filter(d => d.userID !== userID), record]\n    );\n  }\n\n  render(): React.ReactNode {\n    const { loaded, query } = this.state;\n    const { data, students } = this.props;\n\n    if (!loaded) return <Loading small={true} />;\n\n    return (\n      <div id={\"uploadBinaryData\"}>\n        <Row gutter={[10, 10]}>\n          <Col xs={24} md={12}>\n            <Checkbox indeterminate={data.filter(d => d.grade > 0).length !== students.length && data.filter(d => d.grade > 0).length > 0}\n                      onChange={() => {\n                        if (data.filter(d => d.grade > 0).length < students.length) {\n                          this.props.setData(students.map(s => ({userID: s.userID, grade: 1})));\n                        } else {\n                          this.props.setData(students.map(s => ({userID: s.userID, grade: 0})));\n                        }\n                      }}\n                      checked={data.filter(d => d.grade > 0).length === students.length}>\n              <span style={{color: 'white'}}>Check all</span>\n            </Checkbox>\n          </Col>\n\n          <Col xs={24} md={12}>\n            <div style={{float: 'right', display: 'inline-block'}}>\n                <span>\n                  { data.filter(d => d.grade > 0).length } <small>/ {students.length} &nbsp;\n                  ({ Math.round((data.filter(d => d.grade > 0).length / students.length) * 100)}%)</small>\n                </span>\n            </div>\n          </Col>\n        </Row>\n\n        <Input placeholder={\"Find student by name\"}\n               autoComplete={\"off\"}\n               autoCorrect={\"off\"}\n               onChange={(e) => this.setState({ query: e.target.value })}\n               value={query} />\n\n        <Row>\n          { students.map(s => (\n            <StudentEntry student={s}\n                          query={query}\n                          updateStudent={this.updateStudent}\n                          studentRecord={data.find(d => d.userID === s.userID)}\n            />\n          ))}\n        </Row>\n\n      </div>\n    )\n  }\n}\n","import React, { Component } from \"react\";\nimport {Button, Col, Input, InputNumber, Row} from \"antd\";\nimport {DownOutlined, UpOutlined, DeleteOutlined} from \"@ant-design/icons\";\nimport {IProps} from \"./types\";\n\nexport default class StudentEntry extends Component<IProps> {\n\n  state = {\n    menuOpen: false,\n    key: \"\",\n    value: \"\"\n  }\n\n  render(): React.ReactNode {\n    const { student, studentRecord } = this.props;\n    const { menuOpen, key, value } = this.state;\n\n    const metaKeys = studentRecord ?\n      Object.keys(studentRecord).filter(k => !['userID', 'grade'].includes(k)) :\n      []\n\n    return (\n      <Col xs={24} md={12}>\n        <div style={{padding: 10, border: '1px solid #EAEAEA'}}>\n          <Row gutter={[10, 10]}>\n            <Col xs={12} md={16}>\n              <strong>{ student.name }</strong>\n            </Col>\n            <Col xs={12} md={8}>\n              <InputNumber size=\"small\"\n                           min={1}\n                           max={10}\n                           onChange={(e) => {\n                             this.props.updateStudent(\n                               student.userID, {...studentRecord, userID: student.userID, grade: e }\n                             );\n                           }}\n                           value={studentRecord ? studentRecord['grade'] : undefined} />\n            </Col>\n\n            <Col xs={24}>\n              <div className={\"metaAttributes\"}>\n                <Button icon={menuOpen ? <UpOutlined /> : <DownOutlined />}\n                        size={\"small\"}\n                        shape={\"circle\"}\n                        onClick={() => this.setState({ menuOpen: !menuOpen })}\n                        style={{float: 'right'}} />\n                <small>Meta Attributes</small>\n                <br />\n\n                {menuOpen &&\n                  <React.Fragment>\n                    <div>\n                      { metaKeys.sort((a, b) => a.localeCompare(b)).map(k => (\n                        <div>\n                          <Button icon={<DeleteOutlined />}\n                                  size={\"small\"}\n                                  style={{color: \"#EAEAEA\"}}\n                                  type={\"text\"}\n                                  onClick={() => {\n                                    let record = JSON.parse(JSON.stringify(studentRecord));\n                                    delete record[k];\n                                    this.props.updateStudent(\n                                      student.userID,record\n                                    );\n                                  }}\n                          />\n                          {k}: {studentRecord[k]}\n                        </div>\n                      ))}\n                    </div>\n                    <div>\n                      <Row gutter={[10, 10]}>\n                        <Col xs={10}>\n                          <Input placeholder={\"Key\"}\n                                 onChange={e => this.setState({ key: e.target.value })}\n                                 value={key} />\n                        </Col>\n                        <Col xs={10}>\n                          <Input placeholder={\"Value\"}\n                                 onChange={e => this.setState({ value: e.target.value })}\n                                 value={value} />\n                        </Col>\n                        <Col xs={4}>\n                          <Button type={\"primary\"}\n                                  block\n                                  disabled={key.length === 0 || value.length === 0}\n                                  onClick={() => {\n                                    this.props.updateStudent(\n                                      student.userID,\n                                      {...studentRecord,\n                                        [key]: value,\n                                        userID: student.userID,\n                                      });\n                                    this.setState({ key: \"\", value: \"\" });\n                                  }}>\n                            Add\n                          </Button>\n                        </Col>\n                      </Row>\n                    </div>\n                  </React.Fragment>\n                }\n              </div>\n            </Col>\n          </Row>\n        </div>\n      </Col>\n    )\n  }\n}\n","import React, { Component } from \"react\";\nimport StudentController from \"../../../../api/controllers/student\";\nimport {Row} from \"antd\";\nimport Loading from \"../../../utils/Loading\";\nimport {IUploadProps} from \"../types\";\nimport \"./style.scss\";\nimport StudentEntry from \"./StudentEntry\";\n\nexport default class UploadEntriesData extends Component<IUploadProps> {\n  state = {\n    students: [], loaded: false\n  }\n\n  componentDidMount(): void {\n    StudentController.getStudents().then(students =>\n      this.setState({ students, loaded: true })\n    );\n  }\n\n  updateStudent = (userID: string, record: any) => {\n    this.props.setData(\n      [...this.props.data.filter(d => d.userID !== userID), record]\n    );\n  }\n\n  render(): React.ReactNode {\n    const { loaded } = this.state;\n    const { students, data } = this.props;\n\n    if (!loaded) return <Loading small={true} />;\n\n    return (\n      <div id={\"uploadEntriesData\"}>\n        <Row gutter={[10, 10]} style={{margin: '20px 0'}}>\n         { students.map(s =>\n           <StudentEntry key={s.userID}\n                         student={s}\n                         updateStudent={this.updateStudent}\n                         studentRecord={data.find(d => d.userID === s.userID)}\n           />) }\n        </Row>\n      </div>\n    )\n  }\n}\n","import Controller from \"../controller\";\nimport { studentIdStrings } from \"../../common/Admin/helpers\"\n\nexport default class ExternalDataController extends Controller {\n\n  static validateData(data: any[]): boolean {\n    if ( !(\"grade\" in data[0]) )\n    return false;\n\n    for (let i = 0; i < studentIdStrings.length; i++) {\n      if (studentIdStrings[i] in data[0]) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n}","import React, { Component } from \"react\";\nimport {IProps, IState} from \"./types\";\nimport UploadBinaryData from \"./UploadBinaryData\";\nimport UploadEntriesData from \"./UploadEntriesData\";\nimport {Button, Col, Input, message, Row, Space} from \"antd\";\nimport CSVReader from \"react-csv-reader\";\nimport ExternalDataController from \"../../../api/controllers/externalData\";\nimport StudentController from \"../../../api/controllers/student\";\nimport TileController from \"../../../api/controllers/tile\";\nimport \"./style.scss\";\nimport { editState } from \"../../../models/app/Tile\";\n\nexport default class UploadManager extends Component<IProps, IState> {\n\n  state = {\n    loaded: false,\n    uploading: false,\n    students: [],\n    data: [],\n    title: \"\"\n  }\n\n  componentDidMount(): void {\n    StudentController.getStudents().then(students =>\n      this.setState({\n        students: students.sort((a, b) => a.name.localeCompare(b.name)),\n        loaded: true })\n    );\n  }\n\n  handleFileUpload = (data: any[]) => {\n    if (!ExternalDataController.validateData(data)) {\n      message.error(\"Invalid data!\");\n      return;\n    }\n\n    this.setState({ data });\n  }\n\n  upload = () => {\n    const { tile } = this.props;\n    const { data, title } = this.state;\n\n    this.setState({ uploading: true }, () => {\n      TileController.createTileEntry({\n        id: -1,\n        state: editState.new,\n        tile_id: tile.id,\n        title,\n        type: \"ASSIGNMENT\"\n      }).then(entry => {\n        TileController.uploadData(entry.id, data).then(() => {\n          setTimeout(() => {\n            message.success(\"Data uploaded!\");\n            this.props.closeUploadMenu();\n            this.props.reload();\n          }, 200)\n        });\n      });\n    });\n  }\n\n  render(): React.ReactNode {\n    const { tile } = this.props;\n    const { students, data, title, uploading } = this.state;\n\n    return (\n      <div id={\"uploadManager\"}>\n        <Space direction={\"vertical\"} style={{width: '100%'}}>\n          <Row gutter={[10, 10]}>\n            <Col xs={5}>\n              <label>Data Source</label><br />\n              <label\n                className={\"uploadSource\"}\n                style={{ height: 'fit-content'}}\n              >\n                Upload data source (.CSV)\n                <CSVReader onFileLoaded={(data) => this.handleFileUpload(data)}\n                           inputStyle={{ display: 'none' }}\n                           onError={() => alert(\"error\")}\n                           parserOptions={{\n                             header: true,\n                             dynamicTyping: false,\n                             skipEmptyLines: true,\n                             transformHeader: (header: any) =>\n                               header\n                                 .toLowerCase()\n                                 .replace(/\\W/g, '_')\n                           }}\n                />\n              </label>\n            </Col>\n            <Col xs={19}>\n              <label>Entry title</label>\n              <Input placeholder={\"Title\"} value={title} onChange={e => this.setState({ title: e.target.value })} />\n            </Col>\n            <Col xs={24}>\n              <strong id={\"notice\"}>Notice: each upload <u>must</u> contain a column named <i>StudentID</i> specifying the student's login id. There must also be a column named <i>Grade</i>. All other columns will be stored as meta attributes to the submission.</strong>\n            </Col>\n          </Row>\n\n          <div>\n            { tile.content === \"BINARY\" ?\n              <UploadBinaryData data={data}\n                                setData={d => this.setState({ data: d })}\n                                students={students} /> :\n              <UploadEntriesData data={data}\n                                 setData={d => this.setState({ data: d })}\n                                 students={students} />\n            }\n          </div>\n        </Space>\n\n        <Space>\n          <Button onClick={this.props.closeUploadMenu}\n                  className={\"dangerButtonStyle\"}\n          >\n            Cancel\n          </Button>\n\n          <Button className={\"successButton\"}\n                  onClick={this.upload}\n                  loading={uploading}\n                  disabled={title.length < 1}>\n            Upload\n          </Button>\n        </Space>\n      </div>\n    )\n  }\n}","import React, { Component } from \"react\";\nimport {IProps, IState} from \"./types\";\nimport {Button, Tag} from \"antd\";\nimport FadeIn from \"react-fade-in\";\nimport HistoricUploads from \"./HistoricUploads\";\nimport UploadManager from \"../../upload/UploadManager\";\nimport {RootState} from \"../../../store\";\nimport {TileEntrySubmission} from \"../../../models/app/Tile\";\nimport {TileActions} from \"../../../store/actions/tiles\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport TileController from \"../../../api/controllers/tile\";\nimport Loading from \"../../utils/Loading\";\nimport StudentController from \"../../../api/controllers/student\";\n\nconst mapState = (state: RootState) => ({\n  tiles: state.tiles,\n  tileEntries: state.tileEntries,\n});\n\nconst mapDispatch = {\n  loadTiles: () => TileActions.loadTiles(),\n  loadTileEntries: () => TileActions.loadTileEntries(),\n}\n\nconst connector = connect(mapState, mapDispatch)\ntype PropsFromRedux = ConnectedProps<typeof connector>\ntype Props = PropsFromRedux & IProps;\n\nclass ExternalTile extends Component<Props, IState> {\n\n  state = {\n    loaded: false,\n    uploadMenuOpen: false,\n    students: [],\n    submissions: []\n  }\n\n  componentDidMount() {\n    this.reload();\n  }\n\n  reload = () => {\n    this.setState({ loaded: false }, () => {\n      StudentController.getStudents().then(async students => {\n        const { id } = this.props.tile;\n\n        let tileSubmissions: TileEntrySubmission[] = await TileController.getTileSubmissions(id);\n\n        this.props.loadTiles().then(() => {\n          this.props.loadTileEntries().then(() => {\n            this.setState({ submissions: tileSubmissions, loaded: true, students });\n          });\n        });\n      });\n    });\n  }\n\n  render(): React.ReactNode {\n    const { tileGroup, tile, tileEntries } = this.props;\n    const { uploadMenuOpen, students, submissions, loaded } = this.state;\n\n    if (!loaded) return <Loading />;\n\n    return (\n      <div className={\"primaryContainer externalTile\"} style={{marginBottom: 20}}>\n        <h2><b>{ tile.title }</b> <Tag>{ tileGroup.title }</Tag></h2>\n\n        { uploadMenuOpen ?\n          <FadeIn>\n            <UploadManager tile={tile}\n                           reload={this.reload}\n                           closeUploadMenu={() => this.setState({ uploadMenuOpen: false })}\n            />\n          </FadeIn> :\n          <Button className={\"successButton\"}\n                  style={{float: 'right'}}\n                  onClick={() => this.setState({ uploadMenuOpen: true })}\n          >\n            New Upload\n          </Button>\n        }\n\n        <HistoricUploads tile={tile}\n                         entries={tileEntries.filter(e => e.tile_id === tile.id)}\n                         students={students}\n                         submissions={submissions}\n                         reload={this.reload}\n        />\n      </div>\n    )\n  }\n}\n\nexport default connector(ExternalTile);","import React, { Component } from \"react\";\nimport {IProps} from \"./types\";\nimport ExternalTile from \"./ExternalTile\";\n\nexport default class ExternalDataTiles extends Component<IProps> {\n  render() {\n    const { tiles, tileGroups } = this.props;\n    return (\n      <div>\n        { tiles.map(t => (\n          <div>\n            <ExternalTile tile={t}\n                          tileGroup={tileGroups.find(g => g.id === t.group_id)!} />\n          </div>\n        ))}\n      </div>\n    );\n  }\n}","import React, { Component } from \"react\";\nimport Admin from \"../../index\";\nimport { Divider } from \"antd\";\nimport ExternalDataTiles from \"../../../../components/ExternalDataTiles\";\nimport {IProps, IState} from \"./types\";\nimport TileController from \"../../../../api/controllers/tile\";\nimport {Tile} from \"../../../../models/app/Tile\";\nimport Loading from \"../../../../components/utils/Loading\";\n\nexport default class DataWizard extends Component<IProps, IState> {\n\n  state = { loaded: false, tiles: [], tileGroups: [] }\n\n  componentDidMount(): void {\n    TileController.getTileGroups().then(tileGroups => {\n      TileController.getTiles().then(tiles => {\n        this.setState({ tiles, tileGroups, loaded: true });\n      });\n    });\n  }\n\n  render(): React.ReactNode {\n    const { loaded, tiles, tileGroups } = this.state;\n\n    return (\n      <Admin menuKey={\"dataWizard\"}>\n        <h1>Data Wizard</h1>\n        <Divider />\n\n        { loaded ?\n          <ExternalDataTiles tiles={tiles.filter((t: Tile) => t.type === \"EXTERNAL_DATA\")}\n                             tileGroups={tileGroups}\n          /> :\n          <Loading small={true} />\n        }\n      </Admin>\n    )\n  }\n}","import React, { Component } from \"react\";\nimport {createBarData, getBarOptions} from \"../helpers\";\nimport {Bar} from \"react-chartjs-2\";\n\nexport default class GradeBar extends Component<{\n  grades: number[],\n  binary: boolean,\n  height: number,\n  withLegend: boolean\n}> {\n\n  static defaultProps = {\n    height: 300,\n    withLegend: true\n  }\n\n  render(): React.ReactNode {\n    const { grades, binary, height, withLegend } = this.props;\n\n    return (\n      <div>\n        <Bar height={height} data={createBarData(grades, binary)} options={getBarOptions(withLegend)} />\n      </div>\n    );\n  }\n}","export const createLineData = (grades: number[]) => {\n  return {\n    labels: grades.sort((a, b) =>\n      a - b).map(s => s.toString()),\n    datasets: [\n      {\n        label: \"Grades\",\n        borderColor: \"rgb(90, 50, 255)\",\n        backgroundColor: \"rgba(90, 50, 255, 0.4)\",\n        pointRadius: 0,\n        data: grades.sort((a, b) =>\n          a - b)\n      }\n    ]\n  }\n}\n\nexport const createBarData = (grades: number[], binary: boolean) => {\n  return {\n    labels: binary ? ['0', '1'] : ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10'],\n    datasets: [{\n      label: \"Failed\",\n      backgroundColor: \"rgb(255,110,90)\",\n      data: binary ?\n        [\n          grades.filter(s => s === 0).length,\n          0,\n        ] : [\n        grades.filter(s => Math.floor(s) === 0).length,\n        grades.filter(s => Math.floor(s) === 1).length,\n        grades.filter(s => Math.floor(s) === 2).length,\n        grades.filter(s => Math.floor(s) === 3).length,\n        grades.filter(s => Math.floor(s) === 4).length,\n        grades.filter(s => Math.floor(s) === 5 && s < 5.5).length,\n        0,\n        0,\n        0,\n        0,\n        0\n      ]\n    }, {\n      label: \"Passed\",\n      backgroundColor: \"rgb(0, 185, 125)\",\n      data: binary ?\n        [\n          0,\n          grades.filter(s => s === 1).length,\n        ] : [\n        0,\n        0,\n        0,\n        0,\n        0,\n        grades.filter(s => Math.floor(s) === 5 && s >= 5.5).length,\n        grades.filter(s => Math.floor(s) === 6).length,\n        grades.filter(s => Math.floor(s) === 7).length,\n        grades.filter(s => Math.floor(s) === 8).length,\n        grades.filter(s => Math.floor(s) === 9).length,\n        grades.filter(s => Math.floor(s) === 10).length,\n      ]\n    }]\n  }\n}\n\nexport const getLineOptions = () => {\n  return {\n    maintainAspectRatio: false,\n    legend: {\n      display: false\n    },\n    scales: {\n      xAxes: [{\n        gridLines : {\n          display : false\n        },\n        ticks: {\n          display: false\n        }\n      }],\n      yAxes: [{\n        scaleLabel: {\n          display: true,\n          labelString: 'Grade'\n        }\n      }]\n    }\n  }\n}\n\nexport const getBarOptions = (withLegend: boolean) => {\n  return {\n    maintainAspectRatio: false,\n    legend: {\n      display: false\n    },\n    scales: {\n      xAxes: [{\n        gridLines : {\n          display : false\n        },\n        scaleLabel: {\n          display: withLegend,\n          labelString: 'Grade'\n        },\n        stacked: true,\n      }],\n      yAxes: [{\n        scaleLabel: {\n          display: withLegend,\n          labelString: '# of students'\n        },\n        stacked: true\n      }]\n    }\n  }\n}"],"names":["studentIdStrings","connector","connect","state","user","AdminMenu","this","props","id","name","UserOutlined","selectedKeys","menuKey","icon","DatabaseOutlined","to","AppstoreOutlined","LaptopOutlined","TeamOutlined","TrophyOutlined","title","FundProjectionScreenOutlined","DotChartOutlined","CloudUploadOutlined","NotificationOutlined","ControlOutlined","Component","Admin","isAdmin","AdminHeader","xs","className","children","withAdminRole","compute","require","formatData","tile","entries","submissions","map","entry","s","filter","x","entry_id","grades","parseFloat","grade","_rawEntry","rows","length","binaryGrades","content","average","Math","round","mean","stdev","skewness","DataViewer","query","tileEntry","students","md","size","value","placeholder","onChange","e","setState","target","columns","dataIndex","key","dataSource","student","find","st","userID","toLowerCase","includes","sort","a","b","i","student_name","student_id","HistoricUploads","drawerOpen","openEntry","undefined","viewData","reload","width","visible","onClose","render","isNaN","object","GradeBar","binary","withLegend","height","_","onClick","Swal","text","focusCancel","showCancelButton","confirmButtonText","cancelButtonText","customClass","confirmButton","cancelButton","then","result","TileController","dismiss","scroll","StudentEntry","isHighlighted","studentRecord","lg","checked","updateStudent","UploadBinaryData","loaded","record","setData","data","d","StudentController","gutter","indeterminate","style","color","float","display","autoComplete","autoCorrect","Loading","small","menuOpen","metaKeys","Object","keys","k","padding","border","min","max","UpOutlined","DownOutlined","shape","localeCompare","DeleteOutlined","type","JSON","parse","stringify","block","disabled","UploadEntriesData","margin","ExternalDataController","Controller","UploadManager","uploading","handleFileUpload","validateData","message","upload","editState","tile_id","setTimeout","closeUploadMenu","direction","onFileLoaded","inputStyle","onError","alert","parserOptions","header","dynamicTyping","skipEmptyLines","transformHeader","replace","loading","mapDispatch","loadTiles","TileActions","loadTileEntries","tiles","tileEntries","ExternalTile","uploadMenuOpen","tileSubmissions","tileGroup","marginBottom","ExternalDataTiles","tileGroups","t","g","group_id","DataWizard","createBarData","options","getBarOptions","defaultProps","createLineData","labels","toString","datasets","label","borderColor","backgroundColor","pointRadius","floor","getLineOptions","maintainAspectRatio","legend","scales","xAxes","gridLines","ticks","yAxes","scaleLabel","labelString","stacked"],"sourceRoot":""}