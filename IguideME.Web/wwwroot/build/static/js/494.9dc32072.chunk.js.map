{"version":3,"file":"static/js/494.9dc32072.chunk.js","mappings":"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","sources":["api/controllers/student.ts","components/StudentDashboard/TileGroup/Tile/PeerComparison/index.tsx","utils/grades.ts","components/StudentDashboard/TileGroup/Tile/helpers.ts","containers/GradeStatistic/index.tsx","components/StudentDashboard/TileGroup/Tile/index.tsx","components/StudentDashboard/TileGroup/index.tsx","components/StudentDashboard/TileDetail/BinaryGrades/index.tsx","components/StudentDashboard/TileDetail/EntriesList/EntryItem/index.tsx","components/StudentDashboard/TileDetail/EntriesList/index.tsx","components/StudentDashboard/TileDetail/GradePrediction/index.tsx","components/StudentDashboard/TileDetail/DiscussionsList/index.tsx","components/StudentDashboard/TileDetail/LearningOutcomes/index.tsx","components/StudentDashboard/TileDetail/index.tsx","components/StudentDashboard/TileBars/index.tsx","components/StudentDashboard/UserProfile/index.tsx","components/StudentDashboard/index.tsx","components/AdminDashboard/index.tsx","common/App/index.tsx","components/visuals/Notifications/index.tsx","containers/AdminHeader/index.tsx"],"sourcesContent":["import { debug } from \"../../config/config\";\nimport Controller from \"../controller\";\nimport {CanvasStudent} from \"../../models/canvas/Student\";\nimport {ConsentData} from \"../../models/app/ConsentData\";\nimport {GoalData} from \"../../models/app/GoalData\";\nimport {MOCK_STUDENTS, MOCK_CONSENTS, MOCK_GOALS} from \"../../mocks/students\";\nimport {delay} from \"../../utils/mockRequest\";\n\nexport default class StudentController extends Controller {\n\n  static getStudents(): Promise<CanvasStudent[]> {\n    if (debug()) return delay(MOCK_STUDENTS);\n\n    return this.client.get(\n      `students`\n    ).then(response => response.data);\n  }\n\n  static getConsents(): Promise<ConsentData[]> {\n    if (debug()) return delay(MOCK_CONSENTS);\n\n    return this.client.get(\n      `consents`\n    ).then(response => response.data);\n\n  }\n  static getGoalgrades(): Promise<GoalData[]> {\n    if (debug()) return delay(MOCK_GOALS);\n\n    return this.client.get(\n      `goal-grades`\n    ).then(response => response.data);\n  }\n}","import React, { Component } from \"react\";\nimport \"./style.scss\";\nimport {PeerGrades} from \"../../../types\";\n\nexport default class PeerComparison extends Component<{peerGrades: PeerGrades | undefined}> {\n  render(): React.ReactNode {\n    const { peerGrades } = this.props;\n\n    const round = (val: number) => {\n      return Math.round(val * 100) / 100;\n    }\n\n    return (\n      <div className={\"peerComparison\"}>\n        <span className={\"title\"}>Peer Comparison</span>\n\n        { peerGrades ?\n          <div className={\"distribution\"}>\n            <div className={\"min\"}>\n              <small>min.</small>\n              <br />\n              { round(peerGrades.min) }\n            </div>\n\n            <div className={\"avg\"}>\n              <small>avg.</small>\n              <br />\n              { round(peerGrades.avg) }\n            </div>\n\n            <div className={\"max\"}>\n              <small>max.</small>\n              <br />\n              { round(peerGrades.max) }\n            </div>\n          </div> :\n          <p>Not available</p>\n        }\n      </div>\n    )\n  }\n}","import {TilesGradeSummary} from \"../components/StudentDashboard/types\";\nconst compute = require( 'compute.io' );\n\nexport const getAverageGrade = (submissions: TilesGradeSummary[],\n                                precision: number = 2): number | null => {\n  const grades = submissions.map(s => s.average);\n\n  if (grades.length === 0) return null;\n\n  return Math.round(compute.mean(grades) * (10 ** precision)) / (10 ** precision);\n}","import {Tile, TileEntry, TileEntrySubmission} from \"../../../../models/app/Tile\";\n\nexport const getProgression = (tile: Tile, entries: TileEntry[], submissions: TileEntrySubmission[]): number => {\n  if (tile.content === \"BINARY\") {\n    return submissions.length > 0 ?\n      Math.round((\n        submissions.filter(s => parseFloat(s.grade) > .8).length /\n        entries.length\n      ) * 100) : 0;\n  }\n\n  return Math.round((submissions.length / entries.length) * 100);\n}","import React, { Component } from \"react\";\nimport {Statistic} from \"antd\";\nimport { WarningOutlined, LikeOutlined } from \"@ant-design/icons\";\nimport \"./style.scss\";\n\nexport default class GradeStatistic extends Component<\n  { grade: string },\n  { loading: boolean, passed: boolean }\n  > {\n\n  state = { loading: true, passed: false }\n\n  componentDidMount(): void {\n    this.setup();\n  }\n\n  setup = () => {\n    const { grade } = this.props;\n\n    this.setState({ loading: false, passed: parseFloat(grade) >= 5.5 });\n  }\n\n  render(): React.ReactNode {\n    const { loading, passed } = this.state;\n    const { grade } = this.props;\n\n    return (\n      <div className={\"gradeStatistic\"}>\n        <Statistic title={\"Grade\"}\n                   value={grade}\n                   loading={loading}\n                   prefix={passed ?\n                     <LikeOutlined className={\"pass\"} /> :\n                     <WarningOutlined  className={\"fail\"} />\n                   }\n        />\n      </div>\n    );\n  }\n}","import React, { Component } from \"react\";\nimport { Progress, Space } from \"antd\";\nimport PeerComparison from \"./PeerComparison\";\nimport {IProps, IState} from \"./types\";\nimport {getAverageGrade} from \"../../../../utils/grades\";\nimport {getProgression} from \"./helpers\";\nimport GradeStatistic from \"../../../../containers/GradeStatistic\";\nimport \"./style.scss\";\n\nexport default class Tile extends Component<IProps, IState> {\n\n  state = { loaded: false }\n\n  getHeader = () => {\n    const { tile, tileEntries, submissions, userGrades, discussions, learningOutcomes, student } = this.props;\n    const avg: number | null = getAverageGrade(userGrades);\n\n    switch (tile.type) {\n      case \"DISCUSSIONS\":\n        let disc_grade = 0;\n        discussions.map(discussion => {\n          if (discussion.posted_by === student.name){\n            disc_grade++;\n          }\n          if (discussion.entries)\n            disc_grade += discussion.entries.length\n        })\n      return (\n        <span style={{textAlign: 'center'}}>\n          <strong>{ disc_grade }</strong> discussion{discussions.length !== 1 && \"s\"}\n        </span>\n      );\n    }\n\n    switch (tile.content){\n      case \"LEARNING_OUTCOMES\":\n        const success = learningOutcomes.filter(lo => lo.success).length;\n        return (\n          <span style={{textAlign: 'center'}}>\n            <strong>{ success }<small>/{ learningOutcomes.length }</small></strong> completed\n          </span>\n        );\n      case \"PREDICTION\":\n        return <GradeStatistic grade={avg ? avg!.toString() : \"-\"} />;\n      case \"BINARY\":\n        // TODO: this needs to be handled more systematically with types of grades etc and also test to see if/how prediction treats this.\n        return (\n          <>\n            { !!avg && <Progress percent={getProgression(tile, tileEntries, submissions)} /> }\n            <GradeStatistic grade={avg ? (avg * 10).toString() : \"-\"} />\n          </>\n        );\n      case \"ENTRIES\":\n        return (\n          <>\n            { !!avg && <Progress percent={getProgression(tile, tileEntries, submissions)} /> }\n            <GradeStatistic grade={avg ? avg!.toString() : \"-\"} />\n          </>\n        );\n      default:\n        return null;\n    }\n  }\n\n  render(): React.ReactNode {\n    const { tile, peerGrades, userGrades } = this.props;\n    return (\n      <div className={\"tile\"}\n           onClick={() => {\n             window.dispatchEvent(new CustomEvent(\"selectTile\", { detail: { tile, userGrades } }))\n           }}\n      >\n        <div className={\"wrapper\"}>\n          <div className={\"content\"}>\n            <h2>{ tile.title }</h2>\n            <Space direction={\"vertical\"} style={{ width: '100%' }}>\n              { this.getHeader() }\n            </Space>\n          </div>\n\n          <PeerComparison peerGrades={peerGrades.find(pg => pg.tileID === tile.id)} />\n        </div>\n      </div>\n    )\n  }\n}\n","import React, { Component } from \"react\";\nimport Tile from \"./Tile\";\nimport { IProps } from \"./types\";\nimport \"./style.scss\";\n\nexport default class TileGroup extends Component<IProps> {\n\n  render(): React.ReactNode {\n    const {\n      tileGroup,\n      tileEntries,\n      tiles,\n      student,\n      tilesGradeSummary,\n      peerGrades,\n      submissions,\n      discussions,\n      learningOutcomes\n    } = this.props;\n\n    return (\n      <div className={`tileGroup`}>\n        <h2>{ tileGroup.title }</h2>\n\n        <div className={`tileWrapper`}>\n          { tiles.sort((a, b) => a.position - b.position).map(t => {\n            return (\n              <Tile tile={t}\n                    tileEntries={tileEntries.filter(e => e.tile_id === t.id)}\n                    discussions={discussions}\n                    student={student}\n                    submissions={submissions.get(t.id)!}\n                    userGrades={tilesGradeSummary.filter(tgs => tgs.tile.id === t.id)}\n                    peerGrades={peerGrades.filter(pg => pg.tileID === t.id)}\n                    learningOutcomes={learningOutcomes}\n              key={t.id}/>\n            );\n          })}\n        </div>\n      </div>\n    )\n  }\n}\n","import React, { Component } from \"react\";\nimport { TileEntry, TileEntrySubmission } from \"../../../../models/app/Tile\";\nimport { Col, Row } from \"antd\";\nimport { CheckOutlined } from \"@ant-design/icons\";\nimport \"./style.scss\";\n\nexport default class BinaryGrades extends Component<{\n    submissions: TileEntrySubmission[],\n    tileEntries: TileEntry[]\n}> {\n    render(): React.ReactNode {\n        const { submissions, tileEntries } = this.props;\n\n        return (\n            <div id={\"binaryEntries\"}>\n                <Row gutter={[5, 5]}>\n                    {submissions.map(s => {\n                        const success = s.grade.slice(0, 1) !== \"0\";\n                        const entry = tileEntries.find(e => e.id === s.entry_id);\n\n                        return (\n                            <Col key={s.entry_id} xs={12} md={8} lg={6}>\n                                <div className={`entry ${success ? \"success\" : \"fail\"}`}>\n                                    <h2>{entry ? entry.title : null}</h2>\n                                    {success ?\n                                        <span><CheckOutlined /> Present</span> :\n                                        <span>Absent</span>}\n                                </div>\n                            </Col>\n                        );\n                    })}\n                </Row>\n            </div>\n        )\n    }\n}\n","import React, { Component } from \"react\";\nimport { TileEntry, TileEntrySubmission } from \"../../../../../models/app/Tile\";\nimport { Divider, Table } from \"antd\";\nimport GradeStatistic from \"../../../../../containers/GradeStatistic\";\n\nexport default class EntryItem extends Component<{\n    submission: TileEntrySubmission,\n    tileEntry: TileEntry\n}> {\n    render(): React.ReactNode {\n        const { tileEntry, submission } = this.props;\n\n        // FIXME: the check for type is done because when the mocks were made, no consideration was given to the type of meta. To remove this check, convert the meta objects in the mocks to JSON strings.\n        const meta = typeof submission.meta === \"string\" ? JSON.parse(submission.meta || \"{}\") : submission.meta || {};\n\n        return (\n            <div className={\"tileEntry\"}>\n                <h2>{tileEntry.title}</h2>\n                <Divider style={{ margin: '5px 0' }} />\n\n                <GradeStatistic grade={submission.grade} />\n\n                { Object.keys(meta).length > 0 &&\n                    <div>\n                        <Table dataSource={Object.keys(meta).map((key, i) => ({\n                            key: i,\n                            label: key,\n                            value: meta[key]\n                        }))} columns={[\n                            {\n                                title: 'Key',\n                                dataIndex: 'label',\n                                key: 'label',\n                                width: '40%',\n                                ellipsis: true\n                            },\n                            {\n                                title: 'Value',\n                                dataIndex: 'value',\n                                key: 'value',\n                            }]} />\n                    </div>\n                }\n            </div>\n        )\n    }\n}\n","import React, { Component } from \"react\";\nimport {Tile, TileEntry, TileEntrySubmission} from \"../../../../models/app/Tile\";\nimport {Col, Row} from \"antd\";\nimport EntryItem from \"./EntryItem\";\nimport {Bar} from \"react-chartjs-2\";\nimport \"./style.scss\";\nimport {CanvasDiscussion} from \"../../../../models/canvas/Discussion\";\n\nexport default class EntriesList extends Component<{\n  submissions: TileEntrySubmission[],\n  tileEntries: TileEntry[],\n  discussions: CanvasDiscussion[],\n  tile: Tile\n}> {\n  render(): React.ReactNode {\n    const { tile, tileEntries, submissions } = this.props;\n\n    if (tile.graph_view) {\n      const data = {\n        labels: submissions.map((s, i) => {\n          const entry = tileEntries.find(e => e.id === s.entry_id);\n          return entry?.title ?? \"???\";\n        }),\n        datasets: [\n          {\n            label: tile.title + \" grades\",\n            data: submissions.map(s => s.grade),\n            fill: false,\n            backgroundColor: \"rgba(75,192,192,1)\"\n          }\n        ]\n      };\n\n      return (\n        <div id={\"tileEntriesGraph\"} style={{minHeight: '60vh'}}>\n          <div>\n            <Bar options={{ legend: { display: false }}}\n                  width={500}\n                  data={data} />\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div id={\"tileEntriesList\"}>\n        <Row gutter={[10, 10]}>\n          { tileEntries.map(entry => {\n            const submission = submissions.find(s => s.entry_id === entry.id);\n            if (!submission) return null;\n\n            return (\n              <Col key={entry.id} xs={24} sm={12} md={8} lg={6} className={\"entryCol\"}>\n                <EntryItem submission={submission} tileEntry={entry} />\n              </Col>\n            )\n          })}\n        </Row>\n      </div>\n    )\n  }\n}\n","import React, { Component } from \"react\";\nimport {PredictedGrade} from \"../../../../models/app/PredictiveModel\";\nimport {Bar} from \"react-chartjs-2\";\nimport {TileEntry} from \"../../../../models/app/Tile\";\nimport \"./style.scss\";\nimport {store} from \"../../../../utils/configureStore\";\n\nexport default class GradePrediction extends Component<{\n  predictions: PredictedGrade[],\n  tileEntries: TileEntry[]\n}> {\n  render(): React.ReactNode {\n    const { predictions, tileEntries } = this.props;\n    const tiles = store.getState().tiles;\n    let maxComponents = tiles.filter(t => t.content === \"BINARY\").length + 1;\n\n    for (const entry of tileEntries) {\n      const tile = tiles.find(t => t.id === entry.tile_id);\n      if (!tile) continue;\n\n      if (tile.content === \"BINARY\") continue;\n      maxComponents += 1;\n    }\n\n    const round = (val: number) => Math.round(val * 100) / 100;\n\n    const errors = Array.from(Array(maxComponents).keys()).map(i => 5 - ((4.5 / maxComponents) * i));\n    if (predictions.length === 0) {\n      return (\n        <div id={\"gradePrediction\"}>\n          <h2>No predictions available.</h2>\n          <p>Try again later when more grades are available.</p>\n        </div>\n      );\n    }\n\n    const data = (canvas: any) => {\n      const ctx = canvas.getContext(\"2d\")\n      const gradient1 = ctx.createLinearGradient(0,0,0,350);\n      gradient1.addColorStop(0, \"#FFF\");\n      gradient1.addColorStop(1, \"rgb(90, 50, 255)\");\n\n      const gradient2 = ctx.createLinearGradient(0,0,0,350);\n      gradient2.addColorStop(1, \"#FFF\");\n      gradient2.addColorStop(0, \"rgb(90, 50, 255)\");\n\n      return {\n        labels: predictions.map((pg) => pg.date),\n        datasets: [\n          {\n            label: \"Predicted grade\",\n            type: \"line\",\n            backgroundColor: \"rgb(90, 50, 255)\",\n            borderColor: \"rgb(90, 50, 255)\",\n            hoverBorderColor: \"rgb(90, 50, 255)\",\n            fill: false,\n            tension: 0,\n            data: predictions.map(sp => round(sp.grade)),\n            yAxisID: 'y',\n            xAxisID: 'x'\n          },\n          {\n            label: \"UpperConfidence\",\n            type: \"line\",\n            backgroundColor: gradient1,\n            borderColor: \"transparent\",\n            pointRadius: 0,\n            fill: 0,\n            tension: 0,\n            data: predictions.map((sp, i) => sp.grade + errors[i + 3]),\n            yAxisID: 'y',\n            xAxisID: 'x'\n          },\n          {\n            label: \"LowerConfidence\",\n            type: \"line\",\n            backgroundColor: gradient2,\n            borderColor: \"transparent\",\n            pointRadius: 0,\n            fill: 0,\n            tension: 0,\n            data: predictions.map((sp, i) => sp.grade - errors[i + 3]),\n            yAxisID: 'y',\n            xAxisID: 'x'\n          }\n        ]\n      }\n    };\n\n    return (\n      <div id={\"gradePrediction\"}>\n        <h3>Your predicted grade is a <strong>{round(predictions[predictions.length - 1].grade)}</strong></h3>\n\n        <Bar options={{   legend: { display: false },\n                          scales: {\n                            xAxes: [{\n                              id: 'x',\n                              type: 'category'\n                            }],\n                            yAxes: [{\n                              id: 'y',\n                              type: 'linear',\n                              position: \"left\",\n                              ticks: {\n                                beginAtZero: true,\n                                min: 0,\n                                max: 10\n                              }\n                            }]\n                          }}}\n              width={500}\n              data={data} />\n\n        <p>Grade predictions will grow more accurate as the course progresses.</p>\n      </div>\n    );\n  }\n}","import { Col, Divider, Row } from \"antd\";\nimport React, { Component } from \"react\";\nimport { Tile } from \"../../../../models/app/Tile\";\nimport { CanvasDiscussion } from \"../../../../models/canvas/Discussion\";\nimport { CanvasDiscussionEntry } from \"../../../../models/canvas/DiscussionEntry\";\nimport { CanvasStudent } from \"../../../../models/canvas/Student\";\nimport \"./style.scss\";\n\nexport default class DiscussionsList extends Component<{\n    discussions: CanvasDiscussion[],\n    tile: Tile,\n    student: CanvasStudent\n}> {\n    render(): React.ReactNode {\n        const { discussions, student } = this.props;\n        let html = []\n        let discussion: CanvasDiscussion;\n        let entry: CanvasDiscussionEntry;\n        for (let i = 0; i < discussions.length; i++) {\n            discussion = discussions[i];\n\n            if (discussion.posted_by === student.name) {\n                html.push((\n                        <Col key={discussion.id} xs={24} md={12} lg={8}>\n                            <div className={\"discussion\"}>\n                                <h2>{discussion.title}</h2>\n                                <small>{discussion.posted_at}</small>\n                                <Divider />\n                                <p dangerouslySetInnerHTML={{ __html: discussion.message }} />\n                            </div>\n                        </Col>\n                ));\n            }\n            if (discussion.entries === undefined || discussion.entries.length === 0) {\n                continue;\n            }\n\n            let html_entries = [];\n            for (let j = 0; j < discussion.entries.length; j++) {\n                entry = discussion.entries[j];\n                console.log(\"entry\", entry)\n                html_entries.push((\n                        <>\n                        <Divider />\n                        <p dangerouslySetInnerHTML={{ __html: entry.message }} />\n                        <small>{entry.posted_at}</small>\n                        </>\n                ));\n            }\n            html.push((\n                <Col key=\"{discussion.id}.entries\" xs={24} md={12} lg={8}>\n                <div className={\"discussion\"}>\n                    <h2>Questions in: {discussion.title}</h2>\n                    {html_entries}\n                </div>\n            </Col>\n            ))\n        }\n\n        return (\n            <div id={\"discussionsList\"}>\n                <Row gutter={[10, 10]}>\n                    {html}\n                </Row>\n            </div>\n        )\n    }\n}\n","import React, { Component } from \"react\";\nimport { TileEntry} from \"../../../../models/app/Tile\";\nimport { Badge, Card} from \"antd\";\nimport \"./style.scss\";\nimport { LearningOutcome } from \"../../../../models/app/LearningGoal\";\n\nexport default class LearningOutcomes extends Component<{\n    learningOutcomes: LearningOutcome[],\n    tileEntries: TileEntry[]\n}> {\n    render(): React.ReactNode {\n        const { learningOutcomes, tileEntries } = this.props;\n\n        const formatExpression = (exp: string | null) => {\n            switch (exp) {\n                case \"lte\": return \"≤\";\n                case \"gte\": return \"≥\";\n                default: return \"=\";\n            }\n        }\n\n        return (\n            <div id={\"learningOutcomes\"}>\n                <div style={{ margin: \"0 auto\", maxWidth: '400px', width: '100%' }}>\n                    {learningOutcomes.map((lo, i) => {\n                        return (\n                            <div key={lo.goal.id} style={{ margin: \"5px 0\" }}>\n                                <Badge.Ribbon text={lo.success ? \"Completed\" : \"Not completed\"} color={lo.success ? \"green\" : \"red\"}>\n                                    <Card title={`Goal ${i}`} size=\"small\">\n                                        <strong>\n                                            {lo.goal.title}\n                                        </strong>\n                                        <br />\n                                        {lo.goal.requirements.map(r => {\n                                            const entry = tileEntries.find(e => e.id === r.entry_id);\n\n                                            return (\n                                                <span>{entry ? entry.title : \"???\"} {formatExpression(r.expression)} { r.value}<br /></span>\n                                            )\n                                        })}\n                                    </Card>\n                                </Badge.Ribbon>\n                            </div>\n                        );\n                    })}\n                </div>\n            </div>\n        )\n    }\n}\n","import React, { Component } from \"react\";\nimport {Tile, TileEntry, TileEntrySubmission} from \"../../../models/app/Tile\";\nimport BinaryGrades from \"./BinaryGrades\";\nimport {Button} from \"antd\";\nimport { ArrowLeftOutlined } from \"@ant-design/icons\";\nimport EntriesList from \"./EntriesList\";\nimport GradePrediction from \"./GradePrediction\";\nimport {PredictedGrade} from \"../../../models/app/PredictiveModel\";\nimport DiscussionsList from \"./DiscussionsList\";\nimport {CanvasDiscussion} from \"../../../models/canvas/Discussion\";\nimport LearningOutcomes from \"./LearningOutcomes\";\nimport { LearningOutcome } from \"../../../models/app/LearningGoal\";\nimport { CanvasStudent } from \"../../../models/canvas/Student\";\n\nexport default class TileDetail extends Component<{\n  tile: Tile,\n  submissions: TileEntrySubmission[],\n  discussions: CanvasDiscussion[],\n  tileEntries: TileEntry[],\n  predictions: PredictedGrade[],\n  learningOutcomes: LearningOutcome[],\n  student: CanvasStudent\n}> {\n\n  content = () => {\n    const { tile, submissions, tileEntries, predictions, discussions, learningOutcomes, student } = this.props;\n\n    switch(tile.content) {\n      case \"BINARY\":\n        return (\n          <BinaryGrades submissions={submissions}\n                        tileEntries={tileEntries.filter(e => e.tile_id === tile.id)}\n          />\n        );\n      case \"ENTRIES\":\n        switch (tile.type) {\n          case \"DISCUSSIONS\":\n            return (\n              <DiscussionsList discussions={discussions}\n                               tile={tile}\n                               student={student} />\n            );\n          default:\n            return (\n              <EntriesList submissions={submissions}\n                           tileEntries={tileEntries.filter(e => e.tile_id === tile.id)}\n                           discussions={discussions}\n                           tile={tile}\n              />\n            );\n        }\n      case \"PREDICTION\":\n        return (\n          <GradePrediction tileEntries={tileEntries}\n                           predictions={predictions} />\n        );\n      case \"LEARNING_OUTCOMES\":\n        return (\n          <LearningOutcomes learningOutcomes={learningOutcomes} tileEntries={tileEntries} />\n        );\n      default:\n        return null;\n    }\n  }\n\n  render(): React.ReactNode {\n    const { tile } = this.props;\n\n    return (\n      <div style={{padding: 20}}>\n        <Button type={\"ghost\"}\n                icon={<ArrowLeftOutlined />}\n                onClick={() => {\n                  window.dispatchEvent(new CustomEvent('selectTile', { detail: undefined }))\n                }}\n        >\n          Return to dashboard\n        </Button>\n\n        <h1 style={{margin: '10px 0'}}>{ tile.title }</h1>\n        { this.content() }\n      </div>\n    )\n  }\n}","import React, { Component } from \"react\";\n// import {createBarData, getBarOptions} from \"../helpers\";\nimport {HorizontalBar} from \"react-chartjs-2\";\nimport {Tile} from \"../../../models/app/Tile\"\nimport { CanvasDiscussion } from \"../../../models/canvas/Discussion\";\nimport { LearningOutcome } from \"../../../models/app/LearningGoal\";\nimport { PeerGrades, TilesGradeSummary } from \"../types\";\nimport {Data} from \"./types\"\nimport { IProps } from \"./types\";\nimport { CanvasStudent } from \"../../../models/canvas/Student\";\n\nexport default class GradeBar extends Component<IProps> {\n\n  bar_options = {\n    maintainAspectRatio: true,\n    legend: {\n      display: true\n    },\n    scales: {\n      xAxes: [{\n        gridLines : {\n          display : false\n        },\n        scaleLabel: {\n          display: false\n          // labelString: 'Grade'\n        },\n        ticks: {\n          display: false\n        },\n        stacked: false,\n      }],\n      yAxes: [{\n        barPercentage: .95,\n        categoryPercentage: .95,\n        gridLines : {\n          display : false\n        },\n        scaleLabel: {\n          display: false\n        },\n        stacked: false\n      }]\n    }\n  }\n\n  click = (evt: any, element: any, data: any) => {\n\n    if (!element[0]) return;\n    let tile = data.tiles[element[0]._index]\n\n    window.dispatchEvent(new CustomEvent('selectTile', { detail: {tile} }))\n    // TODO: fsr the chart does not like it when we go to another page like this.\n\n  }\n\n  createBarData(tiles: Tile[], tilesGradeSummary: TilesGradeSummary[] , peerGrades: PeerGrades[], discussions: CanvasDiscussion[], learningOutcomes: LearningOutcome[], student: CanvasStudent) {\n    let datadict = new Map<number, Data>();\n\n    for (let i = 0; i < tiles.length; i++) {\n      // TODO: Very ugly but everything is hardcoded so that discussions and learning_outcomes are only on 1 tile.\n      let grade = 0\n      if (tiles[i].content === \"LEARNING_OUTCOMES\") {\n        grade = learningOutcomes.filter(lo => lo.success).length;\n      } else if (tiles[i].type === \"DISCUSSIONS\") {\n        discussions.map(discussion => {\n          if (discussion.posted_by === student.name){\n            grade++;\n          }\n          if (discussion.entries)\n            grade += discussion.entries.length\n        })\n      }\n\n      datadict.set(tiles[i].id, {title: tiles[i].title, grade: grade, peergrade: 0, max: 10, tile: tiles[i]});\n    }\n\n    for (let i = 0; i < tilesGradeSummary.length; i++) {\n      let grade = tilesGradeSummary[i].average\n      let entry = datadict.get(tilesGradeSummary[i].tile.id)!;\n      if (tilesGradeSummary[i].tile.content === \"BINARY\"){\n        entry.max = 100\n        grade = grade * 100 //TODO: this fixes the bars atm, but something is going wrong earlier I think\n      }\n\n      // TODO:\n      grade = grade * 10 / entry.max;\n\n      entry.grade = grade;\n\n    }\n\n    for (let i = 0; i < peerGrades.length; i++) {\n      let pgrade = peerGrades[i].avg;\n      let entry = datadict.get(peerGrades[i].tileID)!;\n\n      pgrade = pgrade * 10/ entry.max;\n\n      entry.peergrade = pgrade;\n    }\n\n    let data_tiles: Tile[] = [];\n    let titles: string[] = [];\n    let grades: any[] = [];\n    let peergrades: any[] = [];\n\n    datadict.forEach((value) => {\n      if (value.grade === 0 && value.peergrade === 0) return;\n\n      data_tiles.push(value.tile);\n      titles.push(value.title);\n      grades.push(value.grade);\n      peergrades.push(value.peergrade);\n    });\n\n    return {\n      tiles: data_tiles,\n      labels: titles,\n      datasets: [\n        {\n          label: \"You\",\n          backgroundColor: \"rgba(47,44,232, 0.5)\",\n          borderColor: \"rgba(0,0,255, 1)\",\n          borderWidth: 2,\n          data: grades,\n          skipNull: true\n        },\n        {\n          label: \"Peers\",\n          backgroundColor: \"rgba(255, 50, 50, .5)\",\n          borderColor: \"rgba(255,0,0, 1)\",\n          borderWidth: 2,\n          data: peergrades,\n          skipNull: true\n        }\n      ]\n    }\n  }\n\n  render(): React.ReactNode {\n    const { tiles, tilesGradeSummary, peerGrades, discussions, learningOutcomes, student} = this.props;\n    let data = this.createBarData(tiles, tilesGradeSummary, peerGrades, discussions, learningOutcomes, student)\n    return (\n      <div>\n        <HorizontalBar height={300}\n                       data={data}\n                       options={{...this.bar_options, onClick: (evt: any, e: any) => this.click(evt, e, data) }} />\n      </div>\n    );\n  }\n}","import React, { Component } from \"react\";\nimport {Link} from \"react-router-dom\";\nimport {Button, Col, Divider, Row} from \"antd\";\nimport {RootState} from \"../../../store\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport {CanvasStudent} from \"../../../models/canvas/Student\";\nimport DataMartController from \"../../../api/controllers/datamart\";\nimport {PerformanceNotification} from \"../../../models/app/Notification\";\nimport PerformanceNotifications from \"../../../components/visuals/Notifications\";\n\nconst mapState = (state: RootState) => ({\n  course: state.course,\n  tiles: state.tiles\n});\n\nconst connector = connect(mapState)\ntype PropsFromRedux = ConnectedProps<typeof connector>\ntype Props = PropsFromRedux & { student: CanvasStudent | undefined };\ntype IState = { notifications: PerformanceNotification[] };\n\nclass UserProfile extends Component<Props, IState> {\n\n  _isMounted = false;\n\n  state = {\n    notifications: []\n  }\n\n  componentDidMount(): void {\n    this._isMounted = true;\n    this.loadNotifications(this.props);\n  }\n\n  componentWillReceiveProps(nextProps: Readonly<Props>, nextContext: any): void {\n    if (nextProps.student?.login_id !== this.props.student?.login_id) {\n      this.loadNotifications(nextProps);\n    }\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  loadNotifications = (props: Props) => {\n    const { student } = props;\n    if (!student) return;\n\n    DataMartController.getNotifications(student.login_id).then(notifications => {\n      // TODO: I think this may be a race condition, try to do away with the isMounted flag and resolve the console error. If noone complains about missing functionality by 2023, remove this todo.\n      this._isMounted && this.setState({ notifications });\n    });\n  }\n\n  render(): React.ReactNode {\n    const { course, student, tiles } = this.props;\n    const { notifications }: IState = this.state;\n\n    const outperforming = notifications\n      .filter(n => n.status === \"outperforming peers\");\n\n    const closing = notifications\n      .filter(n => n.status === \"closing the gap\");\n\n    const moreEffort = notifications\n      .filter(n => n.status === \"more effort required\");\n\n    return (\n      <div id={\"userProfile\"}>\n        <Row>\n          <Col xs={24} style={{textAlign: 'center'}}>\n            <Link to={'/goal-grade'}>\n              <Button size={\"large\"} color={\"primary\"}>\n                Goal Grade\n              </Button>\n            </Link>\n          </Col>\n\n          <Col xs={24} md={8} lg={6}>\n            <h3>{ student && student.name }</h3>\n            <strong>{ course && course.course_name }</strong>\n          </Col>\n\n          <Col xs={24} md={0}>\n            <Divider />\n          </Col>\n\n          <Col xs={24} md={16} lg={18}>\n            <PerformanceNotifications outperforming = {outperforming}\n                                      closing = {closing}\n                                      moreEffort = {moreEffort}\n                                      tiles = {tiles}\n            />\n            <div style={{textAlign: 'right'}}>\n              <Link to={'/consent'}>Informed Consent</Link>\n            </div>\n          </Col>\n        </Row>\n        <br />\n        <div style={{textAlign: 'center'}}>\n          <small>\n            IGuideME is a product by the University of Amsterdam.\n          </small>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default connector(UserProfile);\n","import React, { Component } from \"react\";\nimport {IProps, IState, TilesGradeSummary, ViewTypes} from \"./types\";\nimport TileGroup from \"./TileGroup\";\nimport {Tile, TileEntrySubmission, TileGroup as TileGroupModel} from \"../../models/app/Tile\";\nimport FadeIn from \"react-fade-in\";\nimport TileController from \"../../api/controllers/tile\";\nimport Loading from \"../utils/Loading\";\nimport {DashboardColumn} from \"../../models/app/Layout\";\nimport TileDetail from \"./TileDetail\";\nimport { Radio } from \"antd\";\nimport { AppstoreOutlined, BarChartOutlined } from \"@ant-design/icons\";\n// import TileRadar from \"./TileRadar\";\nimport TileBars from \"./TileBars\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport {RootState} from \"../../store\";\nimport \"./style.scss\";\nimport {DataMartActions} from \"../../store/actions/datamart\";\nimport {PredictedGrade} from \"../../models/app/PredictiveModel\";\nimport UserProfile from \"./UserProfile\";\nimport {CanvasDiscussion} from \"../../models/canvas/Discussion\";\nimport {LearningOutcome} from \"../../models/app/LearningGoal\";\nimport DataMartController from \"../../api/controllers/datamart\";\n\nconst mapState = (state: RootState) => ({\n  dashboardColumns: state.dashboardColumns,\n  tiles: state.tiles.filter((t: Tile) => t.visible),\n  tileGroups: state.tileGroups,\n  tileEntries: state.tileEntries,\n  predictions: state.predictions,\n});\n\nconst mapDispatch = {\n  loadPredictions: (user: string = 'self') => DataMartActions.loadPredictions(user)\n}\n\nconst connector = connect(mapState, mapDispatch)\ntype PropsFromRedux = ConnectedProps<typeof connector>\ntype Props = PropsFromRedux & IProps;\n\nclass StudentDashboard extends Component<Props, IState> {\n\n  state = {\n    tilesGradeSummary: [],\n    peerGrades: [],\n    userSubmissions: new Map<number, TileEntrySubmission[]>(),\n    loaded: true,\n    displayTile: null,\n    discussions: [] as CanvasDiscussion[],\n    learningOutcomes: [] as LearningOutcome[],\n    viewType: \"bar\" as ViewTypes,\n    predictions: []\n  }\n\n  componentDidMount(): void {\n    window.addEventListener('selectTile', (event: any) => {\n      this.setState({ displayTile: event?.detail});\n    });\n\n    this.setup(this.props);\n  }\n\n  componentWillReceiveProps(nextProps: Readonly<Props>, nextContext: any): void {\n    if (nextProps.student && nextProps.student?.login_id !== this.props.student?.login_id) {\n        this.setup(nextProps);\n    }\n  }\n\n  setup = async (props: Props, propPredictions: PredictedGrade[] = []) => {\n    let { tiles, student} = props;\n    if (!student) return;\n\n    // if (propPredictions.length >= 0) predictions = propPredictions;\n\n    let predictions = await DataMartController.getPredictions(student.login_id);\n\n    this.setState({ loaded: false });\n\n    let submissions = new Map<number, TileEntrySubmission[]>();\n\n    let p_discussions: Promise<CanvasDiscussion[]>[] = [];\n    let p_goals: Promise<LearningOutcome[]>[] = [];\n\n    let data = [];\n    let grade;\n\n    for (const tile of tiles) {\n      if (tile.content === \"LEARNING_OUTCOMES\") {\n        p_goals.push(TileController.getUserGoals(tile.id, student.login_id));\n        continue;\n      }\n      if (tile.type === \"DISCUSSIONS\") {\n        p_discussions.push(TileController.getDiscussions(tile.id, student.login_id));\n        continue;\n      }\n\n      if (tile.content === \"PREDICTION\") {\n        data.push({\n          tile: tile,\n          average: predictions.length > 0 ? predictions[0].grade : 0\n        })\n        continue;\n      }\n\n      submissions.set(tile.id, await TileController.getTileSubmissions(tile.id, student.login_id));\n\n      let avg = 0, total = 0;\n\n      for (const sub of submissions.get(tile.id)!) {\n        grade = parseFloat(sub.grade);\n        avg += (tile.content === \"BINARY\") ? Number(grade !== 0) : grade;\n        total++;\n      }\n\n      avg = total ? avg/total : avg;\n      data.push({ tile: tile, average: avg}\n      );\n    }\n\n    let discussions = (await Promise.all(p_discussions)).flat();\n    let goals = (await Promise.all(p_goals)).flat();\n\n    this.setState({\n      discussions,\n      learningOutcomes: goals,\n      tilesGradeSummary: data,\n      userSubmissions: submissions,\n      predictions: predictions\n    }, () => {\n      TileController.getPeerResults(student!.login_id).then(peerGrades =>\n        this.setState({ peerGrades, loaded: true })\n      ).catch(() => this.setState({ loaded: true }));\n    });\n  }\n\n  render(): React.ReactNode {\n    const {\n      loaded,\n      displayTile,\n      viewType,\n      tilesGradeSummary,\n      peerGrades,\n      userSubmissions,\n      discussions,\n      learningOutcomes,\n      predictions\n    } = this.state;\n\n    const { tiles, tileGroups, dashboardColumns, tileEntries, student } = this.props;\n    console.log(\"tiles\", tiles);\n    console.log(\"Discussions\", discussions);\n\n    if (!loaded || !student) return (<Loading small={true} />);\n\n    if (displayTile) {\n      return <TileDetail tile={(displayTile as any).tile}\n                         tileEntries={tileEntries}\n                         discussions={discussions}\n                         predictions={predictions}\n                         submissions={userSubmissions.get((displayTile as any).tile.id)!}\n                         learningOutcomes={learningOutcomes}\n                         student={student}\n      />\n    }\n\n    return (\n      <div id={\"studentDashboard\"}>\n        <Radio.Group value={viewType}\n                     buttonStyle=\"solid\"\n                     onChange={e => this.setState({ viewType: e.target.value })}\n        >\n          <Radio.Button value=\"bar\"><BarChartOutlined /> Bar</Radio.Button>\n          <Radio.Button value=\"grid\"><AppstoreOutlined /> Grid</Radio.Button>\n        </Radio.Group>\n\n        { viewType === \"grid\" ?\n          <FadeIn>\n            <div>\n              { dashboardColumns.map((c: DashboardColumn) => {\n                return (\n                  <div className={`column ${c.container_width}`}\n                       key={c.id}>\n                    { tileGroups\n                      .filter((tg: TileGroupModel) => tg.column_id === c.id)\n                      .sort((a: TileGroupModel, b: TileGroupModel) => a.position - b.position)\n                      .map((tg: TileGroupModel) =>\n                        <TileGroup tileGroup={tg}\n                                   tiles={tiles.filter((t: Tile) => t.group_id === tg.id) }\n                                   discussions={discussions}\n                                   tileEntries={tileEntries.filter(e => tiles.filter(\n                                     (t: Tile) => t.group_id === tg.id).map(x => x.id).includes(e.tile_id))}\n                                   student={student}\n                                   tilesGradeSummary={tilesGradeSummary.filter(\n                                     (tgs: TilesGradeSummary) => tgs.tile.group_id === tg.id)}\n                                   peerGrades={peerGrades}\n                                   submissions={userSubmissions}\n                                   learningOutcomes={learningOutcomes}\n                        key={tg.id}\n                        />\n                      )\n                    }\n                  </div>\n                )\n              })}\n            </div>\n          </FadeIn>\n          :\n          // <TileRadar tiles={tiles}\n          //            tileEntries={tileEntries}\n          //            student={student}\n          //            tilesGradeSummary={tilesGradeSummary}\n          //            peerGrades={peerGrades}\n          // />\n          <div style={{ padding: '0 8%'}}>\n            <TileBars tiles={tiles}\n                      tilesGradeSummary = {tilesGradeSummary}\n                      peerGrades = {peerGrades}\n                      discussions = {discussions}\n                      learningOutcomes={learningOutcomes}\n                      student={student}\n            />\n          </div>\n        }\n\n        <UserProfile student={this.props.student} />\n      </div>\n    )\n  }\n}\n\nexport default connector(StudentDashboard);\n","import React, { Component } from \"react\";\nimport { IProps } from \"./types\";\nimport { Result } from \"antd\";\nimport { SmileOutlined } from \"@ant-design/icons\";\nimport StudentDashboard from \"../StudentDashboard\";\nimport \"./style.scss\";\n\nexport default class AdminDashboard extends Component<IProps> {\n  render(): React.ReactNode {\n    if (!this.props.student) {\n      return (\n        <div id={\"getStarted\"}>\n          <Result\n            icon={<SmileOutlined />}\n            title={\n              <div>\n                <h2>Pick a student to start!</h2>\n                <h1 id={\"brand\"}>IGuideME</h1>\n              </div>\n            }\n          />\n        </div>\n      );\n    }\n\n    return (<StudentDashboard student={this.props.student} />);\n  }\n}","import React, { Component } from \"react\";\nimport { withConsent } from \"../../hoc/withConsent\";\nimport { withAdminRole } from \"../../hoc/withAdminRole\";\nimport {UserDataProps} from \"../../hoc/types\";\nimport AdminHeader from \"../../containers/AdminHeader\";\nimport StudentDashboard from \"../../components/StudentDashboard\";\nimport AdminDashboard from \"../../components/AdminDashboard\";\nimport {CanvasStudent} from \"../../models/canvas/Student\";\nimport UserController from \"../../api/controllers/app\";\nimport {RootState} from \"../../store\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport Loading from \"../../components/utils/Loading\";\nimport { Redirect } from \"react-router-dom\";\n\nconst mapState = (state: RootState) => ({\n  user: state.user,\n  predictions: state.predictions\n});\n\nconst connector = connect(mapState)\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\ntype Props = PropsFromRedux & UserDataProps;\n\nclass App extends Component<Props, { student: CanvasStudent | null, goalGrade: number | undefined }> {\n\n  state = { student: null, goalGrade: undefined }\n\n  componentDidMount(): void {\n    const { isAdmin } = this.props;\n    if (!isAdmin) {\n      UserController.getUser().then(student => this.setState({ student }));\n      UserController.getGoalGrade().then(goalGrade => this.setState({ goalGrade }));\n    } else {\n      this.setState({ goalGrade: 10 });\n    }\n  }\n\n  render(): React.ReactNode {\n    const { isAdmin } = this.props;\n    const { student, goalGrade } = this.state;\n\n    if (goalGrade === undefined) return <Loading />;\n    if (goalGrade === -1) return <Redirect to={'goal-grade'} />;\n\n    return (\n      <div id={\"app\"}>\n        { isAdmin && <AdminHeader studentPickView={true}\n                                  setStudent={student => {\n                                    this.setState({ student }, () =>\n                                      window.dispatchEvent(\n                                        new CustomEvent('selectTile', {\n                                          detail: undefined\n                                        })\n                                      )\n                                    )\n                                  }}\n        /> }\n        { isAdmin ?\n          <AdminDashboard student={student} /> :\n          student === null ?\n            <h1>Your account has not yet been processed, try again tomorrow!</h1>:\n            <StudentDashboard student={student || undefined} />\n        }\n      </div>\n    )\n  }\n}\n\nexport default withConsent(withAdminRole(connector(App)));","import React, {Component} from \"react\";\nimport {TrophyOutlined, RiseOutlined, WarningOutlined} from \"@ant-design/icons\";\nimport { IProps } from \"./types\";\n\n\nexport default class PerformanceNotifications extends Component<IProps> {\n\n    _getTileTitle = (tileID: number): string => {\n        return this.props.tiles.find(t => t.id === tileID)?.title ?? \"\";\n    }\n\n    render(): React.ReactNode {\n\n        let {outperforming, closing, moreEffort} = this.props\n\n        return (\n        <div className=\"Notifications\">\n            { outperforming.length > 0 &&\n            <div>\n                <TrophyOutlined />\n                {' '}\n                You are outperforming your peers in:\n                <ul style={{boxSizing: 'border-box', paddingLeft: 30}}>\n                { outperforming.map((n, i) => <li key={i}>{this._getTileTitle(n.tile_id)}</li>)}\n                </ul>\n            </div> }\n\n            { closing.length > 0 &&\n            <div>\n                <RiseOutlined />\n                {' '}\n                You are closing the gap to your peers in:\n                <ul style={{boxSizing: 'border-box', paddingLeft: 30}}>\n                { closing.map((n, i) => <li key={i}>{this._getTileTitle(n.tile_id)}</li>)}\n                </ul>\n            </div> }\n\n            { moreEffort.length > 0 &&\n            <div>\n                <WarningOutlined />\n                {' '}\n                You have to put more effort in:\n                <ul style={{boxSizing: 'border-box', paddingLeft: 30}}>\n                { moreEffort.map(n => <li>{this._getTileTitle(n.tile_id)}</li>)}\n                </ul>\n            </div> }\n        </div>\n        );\n    }\n}","import React, { Component } from \"react\";\nimport Select from \"react-select\";\nimport {Button, Tooltip} from \"antd\";\nimport {SyncOutlined} from \"@ant-design/icons\";\nimport { Link } from \"react-router-dom\";\nimport {IProps, IState} from \"./types\";\nimport StudentController from \"../../api/controllers/student\";\nimport {CanvasStudent} from \"../../models/canvas/Student\";\nimport {debug} from \"../../config/config\";\nimport {RootState} from \"../../store\";\nimport {connect, ConnectedProps} from \"react-redux\";\nimport \"./style.scss\";\n\nconst mapState = (state: RootState) => ({\n  course: state.course,\n  user: state.user\n});\n\nconst connector = connect(mapState);\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\ntype Props = IProps & PropsFromRedux;\n\nclass AdminHeader extends Component<Props, IState> {\n\n  state = {\n    loaded: false,\n    students: []\n  }\n\n  componentDidMount(): void {\n    const { studentPickView } = this.props;\n\n    if (studentPickView) {\n      StudentController.getStudents().then(students => this.setState({ students, loaded: true }));\n    }\n\n    this.setState({ loaded: true });\n  }\n\n  renderInner(): React.ReactNode {\n    if (this.props.studentPickView) {\n      const { students, loaded } = this.state;\n      return (\n        <Select id={\"studentPicker\"}\n                isLoading={!loaded}\n                options={students.sort(\n                  (a: CanvasStudent, b: CanvasStudent) => a.name.localeCompare(b.name)\n                ).map((s: CanvasStudent) => ({ label: s.name, value: s.login_id}))}\n                placeholder={\"Choose a student\"}\n                onChange={(e) => this.props.setStudent!(\n                  e ? students.find((s: CanvasStudent) => s.login_id === e!.value)! : null\n                )}\n                isClearable={true}\n                styles={{\n                  control: (provided, state) => ({\n                    ...provided,\n                    backgroundColor: 'transparent',\n                    color: 'white',\n                    border: '1px solid white'\n                  }),\n                  singleValue: (provided, state) => {\n                    return {...provided, color: 'white'};\n                  }\n                }}\n        />\n      );\n    }\n\n    return (\n      <div id={\"inner\"}>\n        <h2>{ this.props.course ? this.props.course.course_name : \"Loading course...\" }</h2>\n      </div>\n    );\n  }\n\n  render(): React.ReactNode {\n    return (\n      <React.Fragment>\n        <div id={\"adminHeader\"}>\n          { this.props.studentPickView ?\n            <Link to={'/admin'} style={{ float: 'right' }}>\n              <h3>Admin Panel</h3>\n            </Link> :\n            <div style={{float: 'right', padding: 20}}>\n              <Tooltip title={\"Reload data\"}>\n                <Button id={\"reload\"}\n                        shape=\"circle\"\n                        style={{backgroundColor: 'rgba(255, 255, 255, 0.5)', color: 'white'}}\n                        icon={<SyncOutlined />} />\n              </Tooltip>\n            </div>\n          }\n\n          <div id={\"navbarContent\"}>\n            <div id={\"brand\"}>\n              <Link to={'/'}>\n                <h1>IGuideME</h1>\n              </Link>\n            </div>\n\n            { this.renderInner() }\n          </div>\n        </div>\n        { debug() &&\n          (<div id={\"debugNotice\"}>\n            Application is running in <strong>demo</strong> mode. Changes will not be saved!\n          </div>)\n        }\n      </React.Fragment>\n    );\n  }\n}\n\nexport default connector(AdminHeader);"],"names":["StudentController","debug","delay","MOCK_STUDENTS","this","client","get","then","response","data","MOCK_CONSENTS","MOCK_GOALS","Controller","PeerComparison","peerGrades","props","round","val","Math","className","min","avg","max","Component","compute","require","getAverageGrade","submissions","precision","grades","map","s","average","length","mean","getProgression","tile","entries","content","filter","parseFloat","grade","GradeStatistic","state","loading","passed","setup","setState","title","value","prefix","LikeOutlined","WarningOutlined","Tile","loaded","getHeader","tileEntries","userGrades","discussions","learningOutcomes","student","type","disc_grade","discussion","posted_by","name","style","textAlign","success","lo","toString","percent","onClick","window","dispatchEvent","CustomEvent","detail","direction","width","find","pg","tileID","id","TileGroup","tileGroup","tiles","tilesGradeSummary","sort","a","b","position","t","e","tile_id","tgs","BinaryGrades","gutter","slice","entry","entry_id","xs","md","lg","CheckOutlined","EntryItem","tileEntry","submission","meta","JSON","parse","margin","Object","keys","dataSource","key","i","label","columns","dataIndex","ellipsis","EntriesList","graph_view","labels","datasets","fill","backgroundColor","minHeight","options","legend","display","sm","GradePrediction","predictions","store","maxComponents","errors","Array","from","scales","xAxes","yAxes","ticks","beginAtZero","canvas","ctx","getContext","gradient1","createLinearGradient","addColorStop","gradient2","date","borderColor","hoverBorderColor","tension","sp","yAxisID","xAxisID","pointRadius","DiscussionsList","html","push","posted_at","dangerouslySetInnerHTML","__html","message","undefined","html_entries","j","console","log","LearningOutcomes","formatExpression","exp","maxWidth","text","color","size","goal","requirements","r","expression","TileDetail","padding","icon","ArrowLeftOutlined","GradeBar","bar_options","maintainAspectRatio","gridLines","scaleLabel","stacked","barPercentage","categoryPercentage","click","evt","element","_index","datadict","Map","set","peergrade","pgrade","data_tiles","titles","peergrades","forEach","borderWidth","skipNull","createBarData","height","connector","connect","course","UserProfile","_isMounted","notifications","loadNotifications","DataMartController","login_id","nextProps","nextContext","outperforming","n","status","closing","moreEffort","to","course_name","mapDispatch","loadPredictions","user","DataMartActions","dashboardColumns","visible","tileGroups","StudentDashboard","userSubmissions","displayTile","viewType","p_discussions","p_goals","TileController","total","sub","Number","Promise","all","flat","goals","catch","addEventListener","event","buttonStyle","onChange","target","BarChartOutlined","AppstoreOutlined","c","container_width","tg","column_id","group_id","x","includes","Loading","small","AdminDashboard","SmileOutlined","App","goalGrade","isAdmin","UserController","AdminHeader","studentPickView","setStudent","withConsent","withAdminRole","PerformanceNotifications","_getTileTitle","boxSizing","paddingLeft","students","isLoading","localeCompare","placeholder","isClearable","styles","control","provided","border","singleValue","float","shape","SyncOutlined","renderInner"],"sourceRoot":""}