import { MOCK_ASSIGNMENTS, MOCK_GOALS, MOCK_TOPICS } from '@/mocks/entry/entry-example-data';
import { GradingType, type Tile, type TileGroup, TileType } from '@/types/tile';

const MOCK_GROUPS: TileGroup[] = [
  {
    id: 1,
    title: 'Activities',
    position: 1,
  },
  {
    id: 2,
    title: 'Course Grades',
    position: 1,
  },
  {
    id: 3,
    title: 'Learning Outcome',
    position: 2,
  },
];

const MOCK_TILES: Tile[] = [
  {
    id: 1,
    group_id: 1,
    title: 'Quizzes',
    position: 1,
    weight: 0.1,
    type: TileType.Assignments,
    visible: true,
    notifications: true,
    gradingType: GradingType.Percentage,
    alt: false,
    entries: [
      {
        tile_id: 1,
        title: MOCK_ASSIGNMENTS.find((ass) => ass.id === 1)?.title ?? 'Example Title',
        weight: 0.25,
        content_id: 1,
      },
      {
        tile_id: 1,
        title: MOCK_ASSIGNMENTS.find((ass) => ass.id === 2)?.title ?? 'Example Title',
        weight: 0.25,
        content_id: 2,
      },
      {
        tile_id: 1,
        title: MOCK_ASSIGNMENTS.find((ass) => ass.id === 3)?.title ?? 'Example Title',
        weight: 0.25,
        content_id: 3,
      },
      {
        tile_id: 1,
        title: MOCK_ASSIGNMENTS.find((ass) => ass.id === 4)?.title ?? 'Example Title',
        weight: 0.25,
        content_id: 4,
      },
    ],
  },
  {
    id: 2,
    group_id: 1,
    title: 'Perusall',
    position: 2,
    weight: 0.1,
    type: TileType.Assignments,
    visible: true,
    notifications: true,
    gradingType: GradingType.PassFail,
    alt: false,
    entries: [
      {
        tile_id: 1,
        title: MOCK_ASSIGNMENTS.find((ass) => ass.id === 9)?.title ?? 'Example Title',
        weight: 0.33,
        content_id: 9,
      },
      {
        tile_id: 1,
        title: MOCK_ASSIGNMENTS.find((ass) => ass.id === 10)?.title ?? 'Example Title',
        weight: 0.33,
        content_id: 10,
      },
      {
        tile_id: 1,
        title: MOCK_ASSIGNMENTS.find((ass) => ass.id === 11)?.title ?? 'Example Title',
        weight: 0.33,
        content_id: 11,
      },
    ],
  },
  {
    id: 3,
    group_id: 1,
    title: 'Attendance',
    position: 4,
    weight: 0,
    type: TileType.Assignments,
    visible: true,
    notifications: true,
    gradingType: GradingType.PassFail,
    alt: false,
    entries: [],
  },
  {
    id: 4,
    group_id: 1,
    title: 'Practice Sessions',
    position: 3,
    weight: 0,
    type: TileType.Assignments,
    visible: true,
    notifications: true,
    gradingType: GradingType.NotGraded,
    alt: false,
    entries: [
      {
        tile_id: 1,
        title: MOCK_ASSIGNMENTS.find((ass) => ass.id === 12)?.title ?? 'Example Title',
        weight: 0.125,
        content_id: 12,
      },
      {
        tile_id: 1,
        title: MOCK_ASSIGNMENTS.find((ass) => ass.id === 13)?.title ?? 'Example Title',
        weight: 0.125,
        content_id: 13,
      },
      {
        tile_id: 1,
        title: MOCK_ASSIGNMENTS.find((ass) => ass.id === 14)?.title ?? 'Example Title',
        weight: 0.125,
        content_id: 14,
      },
      {
        tile_id: 1,
        title: MOCK_ASSIGNMENTS.find((ass) => ass.id === 15)?.title ?? 'Example Title',
        weight: 0.125,
        content_id: 15,
      },
      {
        tile_id: 1,
        title: MOCK_ASSIGNMENTS.find((ass) => ass.id === 16)?.title ?? 'Example Title',
        weight: 0.125,
        content_id: 16,
      },
      {
        tile_id: 1,
        title: MOCK_ASSIGNMENTS.find((ass) => ass.id === 17)?.title ?? 'Example Title',
        weight: 0.125,
        content_id: 17,
      },
      {
        tile_id: 1,
        title: MOCK_ASSIGNMENTS.find((ass) => ass.id === 18)?.title ?? 'Example Title',
        weight: 0.125,
        content_id: 18,
      },
      {
        tile_id: 1,
        title: MOCK_ASSIGNMENTS.find((ass) => ass.id === 19)?.title ?? 'Example Title',
        weight: 0.125,
        content_id: 19,
      },
    ],
  },
  {
    id: 5,
    group_id: 2,
    title: 'Exam Grades',
    position: 1,
    weight: 0.8,
    type: TileType.Assignments,
    visible: true,
    notifications: true,
    gradingType: GradingType.Points,
    alt: false,
    entries: [
      {
        tile_id: 1,
        title: MOCK_ASSIGNMENTS.find((top) => top.id === 5)?.title ?? 'Example Title',
        weight: 0.25,
        content_id: 5,
      },
      {
        tile_id: 1,
        title: MOCK_ASSIGNMENTS.find((top) => top.id === 6)?.title ?? 'Example Title',
        weight: 0.25,
        content_id: 6,
      },
      {
        tile_id: 1,
        title: MOCK_ASSIGNMENTS.find((top) => top.id === 7)?.title ?? 'Example Title',
        weight: 0.25,
        content_id: 7,
      },
      {
        tile_id: 1,
        title: MOCK_ASSIGNMENTS.find((top) => top.id === 8)?.title ?? 'Example Title',
        weight: 0.25,
        content_id: 8,
      },
    ],
  },
  {
    id: 7,
    group_id: 1,
    title: 'Send in Questions',
    position: 5,
    weight: 0,
    type: TileType.Discussions,
    visible: true,
    notifications: false,
    gradingType: GradingType.NotGraded,
    alt: false,
    entries: [
      {
        tile_id: 7,
        title: MOCK_TOPICS.find((top) => top.id === 1)?.title ?? 'Example Title',
        weight: 0.333,
        content_id: 1,
      },
      {
        tile_id: 7,
        title: MOCK_TOPICS.find((top) => top.id === 2)?.title ?? 'Example Title',
        weight: 0.333,
        content_id: 2,
      },
      {
        tile_id: 7,
        title: MOCK_TOPICS.find((top) => top.id === 3)?.title ?? 'Example Title',
        weight: 0.333,
        content_id: 3,
      },
    ],
  },
  {
    id: 8,
    group_id: 1,
    title: 'Send in Questions (alt)',
    position: 6,
    weight: 0,
    type: TileType.Discussions,
    visible: true,
    notifications: false,
    gradingType: GradingType.NotGraded,
    alt: true,
    entries: [],
  },
  {
    id: 9,
    group_id: 3,
    title: 'Learning Outcomes',
    position: 2,
    weight: 0,
    type: TileType.LearningOutcomes,
    visible: true,
    notifications: true,
    gradingType: GradingType.Points,
    alt: false,
    entries: [
      {
        tile_id: 7,
        title: MOCK_GOALS.find((goal) => goal.id === 1)?.title ?? 'Example Title',
        weight: 1,
        content_id: 1,
      },
    ],
  },
  {
    id: 10,
    group_id: 2,
    title: 'Hidden',
    position: 2,
    weight: 0,
    type: TileType.Assignments,
    visible: false,
    notifications: true,
    gradingType: GradingType.Points,
    alt: false,
    entries: [],
  },
];

export { MOCK_GROUPS, MOCK_TILES };
